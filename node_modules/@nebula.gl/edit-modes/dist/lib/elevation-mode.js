"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElevationMode = void 0;

var _utils = require("../utils.js");

var _modifyMode = require("./modify-mode.js");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function defaultCalculateElevationChange(_ref) {
  var pointerDownScreenCoords = _ref.pointerDownScreenCoords,
      screenCoords = _ref.screenCoords;
  return 10 * (pointerDownScreenCoords[1] - screenCoords[1]);
}

var ElevationMode =
/*#__PURE__*/
function (_ModifyMode) {
  _inherits(ElevationMode, _ModifyMode);

  function ElevationMode() {
    _classCallCheck(this, ElevationMode);

    return _possibleConstructorReturn(this, _getPrototypeOf(ElevationMode).apply(this, arguments));
  }

  _createClass(ElevationMode, [{
    key: "makeElevatedEvent",
    value: function makeElevatedEvent(event, position, props) {
      var _ref2 = props.modeConfig || {},
          _ref2$minElevation = _ref2.minElevation,
          minElevation = _ref2$minElevation === void 0 ? 0 : _ref2$minElevation,
          _ref2$maxElevation = _ref2.maxElevation,
          maxElevation = _ref2$maxElevation === void 0 ? 20000 : _ref2$maxElevation,
          _ref2$calculateElevat = _ref2.calculateElevationChange,
          calculateElevationChange = _ref2$calculateElevat === void 0 ? defaultCalculateElevationChange : _ref2$calculateElevat;

      if (!event.pointerDownScreenCoords) {
        return event;
      } // $FlowFixMe - really, I know it has something at index 2


      var elevation = position.length === 3 ? position[2] : 0; // calculateElevationChange is configurable because (at this time) modes are not aware of the viewport

      elevation += calculateElevationChange({
        pointerDownScreenCoords: event.pointerDownScreenCoords,
        screenCoords: event.screenCoords
      });
      elevation = Math.min(elevation, maxElevation);
      elevation = Math.max(elevation, minElevation);
      return Object.assign({}, event, {
        mapCoords: [position[0], position[1], elevation]
      });
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event, props) {
      var editHandle = (0, _utils.getPickedEditHandle)(event.pointerDownPicks);
      var position = editHandle ? editHandle.geometry.coordinates : event.mapCoords;

      _get(_getPrototypeOf(ElevationMode.prototype), "handlePointerMove", this).call(this, this.makeElevatedEvent(event, position, props), props);
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event, props) {
      var editHandle = (0, _utils.getPickedEditHandle)(event.picks);
      var position = editHandle ? editHandle.geometry.coordinates : event.mapCoords;

      _get(_getPrototypeOf(ElevationMode.prototype), "handleStopDragging", this).call(this, this.makeElevatedEvent(event, position, props), props);
    }
  }, {
    key: "getCursor",
    value: function getCursor(event) {
      var cursor = _get(_getPrototypeOf(ElevationMode.prototype), "getCursor", this).call(this, event);

      if (cursor === 'cell') {
        cursor = 'ns-resize';
      }

      return cursor;
    }
  }], [{
    key: "calculateElevationChangeWithViewport",
    value: function calculateElevationChangeWithViewport(viewport, _ref3) {
      var pointerDownScreenCoords = _ref3.pointerDownScreenCoords,
          screenCoords = _ref3.screenCoords;
      // Source: https://gis.stackexchange.com/a/127949/111804
      var metersPerPixel = 156543.03392 * Math.cos(viewport.latitude * Math.PI / 180) / Math.pow(2, viewport.zoom);
      return metersPerPixel * (pointerDownScreenCoords[1] - screenCoords[1]) / 2;
    }
  }]);

  return ElevationMode;
}(_modifyMode.ModifyMode);

exports.ElevationMode = ElevationMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZWxldmF0aW9uLW1vZGUuanMiXSwibmFtZXMiOlsiZGVmYXVsdENhbGN1bGF0ZUVsZXZhdGlvbkNoYW5nZSIsInBvaW50ZXJEb3duU2NyZWVuQ29vcmRzIiwic2NyZWVuQ29vcmRzIiwiRWxldmF0aW9uTW9kZSIsImV2ZW50IiwicG9zaXRpb24iLCJwcm9wcyIsIm1vZGVDb25maWciLCJtaW5FbGV2YXRpb24iLCJtYXhFbGV2YXRpb24iLCJjYWxjdWxhdGVFbGV2YXRpb25DaGFuZ2UiLCJlbGV2YXRpb24iLCJsZW5ndGgiLCJNYXRoIiwibWluIiwibWF4IiwiT2JqZWN0IiwiYXNzaWduIiwibWFwQ29vcmRzIiwiZWRpdEhhbmRsZSIsInBvaW50ZXJEb3duUGlja3MiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwibWFrZUVsZXZhdGVkRXZlbnQiLCJwaWNrcyIsImN1cnNvciIsInZpZXdwb3J0IiwibWV0ZXJzUGVyUGl4ZWwiLCJjb3MiLCJsYXRpdHVkZSIsIlBJIiwicG93Iiwiem9vbSIsIk1vZGlmeU1vZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFHQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsU0FBU0EsK0JBQVQsT0FNRztBQUFBLE1BTERDLHVCQUtDLFFBTERBLHVCQUtDO0FBQUEsTUFKREMsWUFJQyxRQUpEQSxZQUlDO0FBQ0QsU0FBTyxNQUFNRCx1QkFBdUIsQ0FBQyxDQUFELENBQXZCLEdBQTZCQyxZQUFZLENBQUMsQ0FBRCxDQUEvQyxDQUFQO0FBQ0Q7O0lBRVlDLGE7Ozs7Ozs7Ozs7Ozs7c0NBRVRDLEssRUFDQUMsUSxFQUNBQyxLLEVBQ1E7QUFBQSxrQkFNTkEsS0FBSyxDQUFDQyxVQUFOLElBQW9CLEVBTmQ7QUFBQSxxQ0FFTkMsWUFGTTtBQUFBLFVBRU5BLFlBRk0sbUNBRVMsQ0FGVDtBQUFBLHFDQUdOQyxZQUhNO0FBQUEsVUFHTkEsWUFITSxtQ0FHUyxLQUhUO0FBQUEsd0NBSU5DLHdCQUpNO0FBQUEsVUFJTkEsd0JBSk0sc0NBSXFCViwrQkFKckI7O0FBUVIsVUFBSSxDQUFDSSxLQUFLLENBQUNILHVCQUFYLEVBQW9DO0FBQ2xDLGVBQU9HLEtBQVA7QUFDRCxPQVZPLENBWVI7OztBQUNBLFVBQUlPLFNBQVMsR0FBR04sUUFBUSxDQUFDTyxNQUFULEtBQW9CLENBQXBCLEdBQXdCUCxRQUFRLENBQUMsQ0FBRCxDQUFoQyxHQUFzQyxDQUF0RCxDQWJRLENBZVI7O0FBQ0FNLE1BQUFBLFNBQVMsSUFBSUQsd0JBQXdCLENBQUM7QUFDcENULFFBQUFBLHVCQUF1QixFQUFFRyxLQUFLLENBQUNILHVCQURLO0FBRXBDQyxRQUFBQSxZQUFZLEVBQUVFLEtBQUssQ0FBQ0Y7QUFGZ0IsT0FBRCxDQUFyQztBQUlBUyxNQUFBQSxTQUFTLEdBQUdFLElBQUksQ0FBQ0MsR0FBTCxDQUFTSCxTQUFULEVBQW9CRixZQUFwQixDQUFaO0FBQ0FFLE1BQUFBLFNBQVMsR0FBR0UsSUFBSSxDQUFDRSxHQUFMLENBQVNKLFNBQVQsRUFBb0JILFlBQXBCLENBQVo7QUFFQSxhQUFPUSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCYixLQUFsQixFQUF5QjtBQUM5QmMsUUFBQUEsU0FBUyxFQUFFLENBQUNiLFFBQVEsQ0FBQyxDQUFELENBQVQsRUFBY0EsUUFBUSxDQUFDLENBQUQsQ0FBdEIsRUFBMkJNLFNBQTNCO0FBRG1CLE9BQXpCLENBQVA7QUFHRDs7O3NDQUVpQlAsSyxFQUF5QkUsSyxFQUFxQztBQUM5RSxVQUFNYSxVQUFVLEdBQUcsZ0NBQW9CZixLQUFLLENBQUNnQixnQkFBMUIsQ0FBbkI7QUFDQSxVQUFNZixRQUFRLEdBQUdjLFVBQVUsR0FBR0EsVUFBVSxDQUFDRSxRQUFYLENBQW9CQyxXQUF2QixHQUFxQ2xCLEtBQUssQ0FBQ2MsU0FBdEU7O0FBQ0EsMkZBQXdCLEtBQUtLLGlCQUFMLENBQXVCbkIsS0FBdkIsRUFBOEJDLFFBQTlCLEVBQXdDQyxLQUF4QyxDQUF4QixFQUF3RUEsS0FBeEU7QUFDRDs7O3VDQUVrQkYsSyxFQUEwQkUsSyxFQUFxQztBQUNoRixVQUFNYSxVQUFVLEdBQUcsZ0NBQW9CZixLQUFLLENBQUNvQixLQUExQixDQUFuQjtBQUNBLFVBQU1uQixRQUFRLEdBQUdjLFVBQVUsR0FBR0EsVUFBVSxDQUFDRSxRQUFYLENBQW9CQyxXQUF2QixHQUFxQ2xCLEtBQUssQ0FBQ2MsU0FBdEU7O0FBQ0EsNEZBQXlCLEtBQUtLLGlCQUFMLENBQXVCbkIsS0FBdkIsRUFBOEJDLFFBQTlCLEVBQXdDQyxLQUF4QyxDQUF6QixFQUF5RUEsS0FBekU7QUFDRDs7OzhCQUVTRixLLEVBQWtDO0FBQzFDLFVBQUlxQixNQUFNLGdGQUFtQnJCLEtBQW5CLENBQVY7O0FBQ0EsVUFBSXFCLE1BQU0sS0FBSyxNQUFmLEVBQXVCO0FBQ3JCQSxRQUFBQSxNQUFNLEdBQUcsV0FBVDtBQUNEOztBQUNELGFBQU9BLE1BQVA7QUFDRDs7O3lEQUdDQyxRLFNBUVE7QUFBQSxVQU5OekIsdUJBTU0sU0FOTkEsdUJBTU07QUFBQSxVQUxOQyxZQUtNLFNBTE5BLFlBS007QUFDUjtBQUNBLFVBQU15QixjQUFjLEdBQ2pCLGVBQWVkLElBQUksQ0FBQ2UsR0FBTCxDQUFVRixRQUFRLENBQUNHLFFBQVQsR0FBb0JoQixJQUFJLENBQUNpQixFQUExQixHQUFnQyxHQUF6QyxDQUFoQixHQUFpRWpCLElBQUksQ0FBQ2tCLEdBQUwsQ0FBUyxDQUFULEVBQVlMLFFBQVEsQ0FBQ00sSUFBckIsQ0FEbkU7QUFHQSxhQUFRTCxjQUFjLElBQUkxQix1QkFBdUIsQ0FBQyxDQUFELENBQXZCLEdBQTZCQyxZQUFZLENBQUMsQ0FBRCxDQUE3QyxDQUFmLEdBQW9FLENBQTNFO0FBQ0Q7Ozs7RUFwRWdDK0Isc0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBNb2RlUHJvcHMsIFBvaW50ZXJNb3ZlRXZlbnQsIFN0b3BEcmFnZ2luZ0V2ZW50IH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuaW1wb3J0IHR5cGUgeyBQb3NpdGlvbiwgRmVhdHVyZUNvbGxlY3Rpb24gfSBmcm9tICcuLi9nZW9qc29uLXR5cGVzLmpzJztcbmltcG9ydCB7IGdldFBpY2tlZEVkaXRIYW5kbGUgfSBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgeyBNb2RpZnlNb2RlIH0gZnJvbSAnLi9tb2RpZnktbW9kZS5qcyc7XG5cbmZ1bmN0aW9uIGRlZmF1bHRDYWxjdWxhdGVFbGV2YXRpb25DaGFuZ2Uoe1xuICBwb2ludGVyRG93blNjcmVlbkNvb3JkcyxcbiAgc2NyZWVuQ29vcmRzXG59OiB7XG4gIHBvaW50ZXJEb3duU2NyZWVuQ29vcmRzOiBQb3NpdGlvbixcbiAgc2NyZWVuQ29vcmRzOiBQb3NpdGlvblxufSkge1xuICByZXR1cm4gMTAgKiAocG9pbnRlckRvd25TY3JlZW5Db29yZHNbMV0gLSBzY3JlZW5Db29yZHNbMV0pO1xufVxuXG5leHBvcnQgY2xhc3MgRWxldmF0aW9uTW9kZSBleHRlbmRzIE1vZGlmeU1vZGUge1xuICBtYWtlRWxldmF0ZWRFdmVudChcbiAgICBldmVudDogUG9pbnRlck1vdmVFdmVudCB8IFN0b3BEcmFnZ2luZ0V2ZW50LFxuICAgIHBvc2l0aW9uOiBQb3NpdGlvbixcbiAgICBwcm9wczogTW9kZVByb3BzPEZlYXR1cmVDb2xsZWN0aW9uPlxuICApOiBPYmplY3Qge1xuICAgIGNvbnN0IHtcbiAgICAgIG1pbkVsZXZhdGlvbiA9IDAsXG4gICAgICBtYXhFbGV2YXRpb24gPSAyMDAwMCxcbiAgICAgIGNhbGN1bGF0ZUVsZXZhdGlvbkNoYW5nZSA9IGRlZmF1bHRDYWxjdWxhdGVFbGV2YXRpb25DaGFuZ2VcbiAgICB9ID1cbiAgICAgIHByb3BzLm1vZGVDb25maWcgfHwge307XG5cbiAgICBpZiAoIWV2ZW50LnBvaW50ZXJEb3duU2NyZWVuQ29vcmRzKSB7XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuXG4gICAgLy8gJEZsb3dGaXhNZSAtIHJlYWxseSwgSSBrbm93IGl0IGhhcyBzb21ldGhpbmcgYXQgaW5kZXggMlxuICAgIGxldCBlbGV2YXRpb24gPSBwb3NpdGlvbi5sZW5ndGggPT09IDMgPyBwb3NpdGlvblsyXSA6IDA7XG5cbiAgICAvLyBjYWxjdWxhdGVFbGV2YXRpb25DaGFuZ2UgaXMgY29uZmlndXJhYmxlIGJlY2F1c2UgKGF0IHRoaXMgdGltZSkgbW9kZXMgYXJlIG5vdCBhd2FyZSBvZiB0aGUgdmlld3BvcnRcbiAgICBlbGV2YXRpb24gKz0gY2FsY3VsYXRlRWxldmF0aW9uQ2hhbmdlKHtcbiAgICAgIHBvaW50ZXJEb3duU2NyZWVuQ29vcmRzOiBldmVudC5wb2ludGVyRG93blNjcmVlbkNvb3JkcyxcbiAgICAgIHNjcmVlbkNvb3JkczogZXZlbnQuc2NyZWVuQ29vcmRzXG4gICAgfSk7XG4gICAgZWxldmF0aW9uID0gTWF0aC5taW4oZWxldmF0aW9uLCBtYXhFbGV2YXRpb24pO1xuICAgIGVsZXZhdGlvbiA9IE1hdGgubWF4KGVsZXZhdGlvbiwgbWluRWxldmF0aW9uKTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBldmVudCwge1xuICAgICAgbWFwQ29vcmRzOiBbcG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCBlbGV2YXRpb25dXG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVQb2ludGVyTW92ZShldmVudDogUG9pbnRlck1vdmVFdmVudCwgcHJvcHM6IE1vZGVQcm9wczxGZWF0dXJlQ29sbGVjdGlvbj4pIHtcbiAgICBjb25zdCBlZGl0SGFuZGxlID0gZ2V0UGlja2VkRWRpdEhhbmRsZShldmVudC5wb2ludGVyRG93blBpY2tzKTtcbiAgICBjb25zdCBwb3NpdGlvbiA9IGVkaXRIYW5kbGUgPyBlZGl0SGFuZGxlLmdlb21ldHJ5LmNvb3JkaW5hdGVzIDogZXZlbnQubWFwQ29vcmRzO1xuICAgIHN1cGVyLmhhbmRsZVBvaW50ZXJNb3ZlKHRoaXMubWFrZUVsZXZhdGVkRXZlbnQoZXZlbnQsIHBvc2l0aW9uLCBwcm9wcyksIHByb3BzKTtcbiAgfVxuXG4gIGhhbmRsZVN0b3BEcmFnZ2luZyhldmVudDogU3RvcERyYWdnaW5nRXZlbnQsIHByb3BzOiBNb2RlUHJvcHM8RmVhdHVyZUNvbGxlY3Rpb24+KSB7XG4gICAgY29uc3QgZWRpdEhhbmRsZSA9IGdldFBpY2tlZEVkaXRIYW5kbGUoZXZlbnQucGlja3MpO1xuICAgIGNvbnN0IHBvc2l0aW9uID0gZWRpdEhhbmRsZSA/IGVkaXRIYW5kbGUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMgOiBldmVudC5tYXBDb29yZHM7XG4gICAgc3VwZXIuaGFuZGxlU3RvcERyYWdnaW5nKHRoaXMubWFrZUVsZXZhdGVkRXZlbnQoZXZlbnQsIHBvc2l0aW9uLCBwcm9wcyksIHByb3BzKTtcbiAgfVxuXG4gIGdldEN1cnNvcihldmVudDogUG9pbnRlck1vdmVFdmVudCk6ID9zdHJpbmcge1xuICAgIGxldCBjdXJzb3IgPSBzdXBlci5nZXRDdXJzb3IoZXZlbnQpO1xuICAgIGlmIChjdXJzb3IgPT09ICdjZWxsJykge1xuICAgICAgY3Vyc29yID0gJ25zLXJlc2l6ZSc7XG4gICAgfVxuICAgIHJldHVybiBjdXJzb3I7XG4gIH1cblxuICBzdGF0aWMgY2FsY3VsYXRlRWxldmF0aW9uQ2hhbmdlV2l0aFZpZXdwb3J0KFxuICAgIHZpZXdwb3J0OiBhbnksXG4gICAge1xuICAgICAgcG9pbnRlckRvd25TY3JlZW5Db29yZHMsXG4gICAgICBzY3JlZW5Db29yZHNcbiAgICB9OiB7XG4gICAgICBwb2ludGVyRG93blNjcmVlbkNvb3JkczogUG9zaXRpb24sXG4gICAgICBzY3JlZW5Db29yZHM6IFBvc2l0aW9uXG4gICAgfVxuICApOiBudW1iZXIge1xuICAgIC8vIFNvdXJjZTogaHR0cHM6Ly9naXMuc3RhY2tleGNoYW5nZS5jb20vYS8xMjc5NDkvMTExODA0XG4gICAgY29uc3QgbWV0ZXJzUGVyUGl4ZWwgPVxuICAgICAgKDE1NjU0My4wMzM5MiAqIE1hdGguY29zKCh2aWV3cG9ydC5sYXRpdHVkZSAqIE1hdGguUEkpIC8gMTgwKSkgLyBNYXRoLnBvdygyLCB2aWV3cG9ydC56b29tKTtcblxuICAgIHJldHVybiAobWV0ZXJzUGVyUGl4ZWwgKiAocG9pbnRlckRvd25TY3JlZW5Db29yZHNbMV0gLSBzY3JlZW5Db29yZHNbMV0pKSAvIDI7XG4gIH1cbn1cbiJdfQ==