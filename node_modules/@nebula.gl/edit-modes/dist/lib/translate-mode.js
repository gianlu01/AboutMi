"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TranslateMode = void 0;

var _bearing = _interopRequireDefault(require("@turf/bearing"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _transformTranslate = _interopRequireDefault(require("@turf/transform-translate"));

var _helpers = require("@turf/helpers");

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _immutableFeatureCollection = require("./immutable-feature-collection.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TranslateMode =
/*#__PURE__*/
function (_BaseGeoJsonEditMode) {
  _inherits(TranslateMode, _BaseGeoJsonEditMode);

  function TranslateMode() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TranslateMode);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TranslateMode)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_geometryBeforeTranslate", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_isTranslatable", void 0);

    return _this;
  }

  _createClass(TranslateMode, [{
    key: "handleDragging",
    value: function handleDragging(event, props) {
      if (!this._isTranslatable) {
        // Nothing to do
        return;
      }

      if (this._geometryBeforeTranslate) {
        // Translate the geometry
        var editAction = this.getTranslateAction(event.pointerDownMapCoords, event.mapCoords, 'translating', props);

        if (editAction) {
          props.onEdit(editAction);
        }
      } // cancel map panning


      event.cancelPan();
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event, props) {
      this._isTranslatable = this.isSelectionPicked(event.pointerDownPicks || event.picks, props);
      this.updateCursor(props);
    }
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event, props) {
      if (!this._isTranslatable) {
        return;
      }

      this._geometryBeforeTranslate = this.getSelectedFeaturesAsFeatureCollection(props);
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event, props) {
      if (this._geometryBeforeTranslate) {
        // Translate the geometry
        var editAction = this.getTranslateAction(event.pointerDownMapCoords, event.mapCoords, 'translated', props);

        if (editAction) {
          props.onEdit(editAction);
        }

        this._geometryBeforeTranslate = null;
      }
    }
  }, {
    key: "updateCursor",
    value: function updateCursor(props) {
      if (this._isTranslatable) {
        props.onUpdateCursor('move');
      } else {
        props.onUpdateCursor(null);
      }
    }
  }, {
    key: "getTranslateAction",
    value: function getTranslateAction(startDragPoint, currentPoint, editType, props) {
      if (!this._geometryBeforeTranslate) {
        return null;
      }

      var p1 = (0, _helpers.point)(startDragPoint);
      var p2 = (0, _helpers.point)(currentPoint);
      var distanceMoved = (0, _distance.default)(p1, p2);
      var direction = (0, _bearing.default)(p1, p2);
      var movedFeatures = (0, _transformTranslate.default)(this._geometryBeforeTranslate, distanceMoved, direction);
      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data);
      var selectedIndexes = props.selectedIndexes;

      for (var i = 0; i < selectedIndexes.length; i++) {
        var selectedIndex = selectedIndexes[i];
        var movedFeature = movedFeatures.features[i];
        updatedData = updatedData.replaceGeometry(selectedIndex, movedFeature.geometry);
      }

      return {
        updatedData: updatedData.getObject(),
        editType: editType,
        editContext: {
          featureIndexes: selectedIndexes
        }
      };
    }
  }]);

  return TranslateMode;
}(_geojsonEditMode.BaseGeoJsonEditMode);

exports.TranslateMode = TranslateMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,