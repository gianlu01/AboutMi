"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SnappableMode = void 0;

var _utils = require("../utils.js");

var _geojsonEditMode = require("./geojson-edit-mode.js");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SnappableMode =
/*#__PURE__*/
function (_BaseGeoJsonEditMode) {
  _inherits(SnappableMode, _BaseGeoJsonEditMode);

  function SnappableMode(handler) {
    var _this;

    _classCallCheck(this, SnappableMode);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SnappableMode).call(this));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_handler", void 0);

    _this._handler = handler;
    return _this;
  }

  _createClass(SnappableMode, [{
    key: "_getSnappedMouseEvent",
    value: function _getSnappedMouseEvent(event, snapSource, snapTarget) {
      return Object.assign(event, {
        mapCoords: snapTarget.geometry.coordinates,
        pointerDownMapCoords: snapSource && snapSource.geometry.coordinates
      });
    }
  }, {
    key: "_getPickedSnapTarget",
    value: function _getPickedSnapTarget(picks) {
      return (0, _utils.getPickedEditHandles)(picks).find(function (handle) {
        return handle.properties.editHandleType === 'snap-target';
      });
    }
  }, {
    key: "_getPickedSnapSource",
    value: function _getPickedSnapSource(pointerDownPicks) {
      return (0, _utils.getPickedEditHandle)(pointerDownPicks);
    }
  }, {
    key: "_getUpdatedSnapSourceHandle",
    value: function _getUpdatedSnapSourceHandle(snapSourceHandle, data) {
      var _snapSourceHandle$pro = snapSourceHandle.properties,
          featureIndex = _snapSourceHandle$pro.featureIndex,
          positionIndexes = _snapSourceHandle$pro.positionIndexes;
      var snapSourceFeature = data.features[featureIndex]; // $FlowFixMe

      var snapSourceCoordinates = positionIndexes.reduce(function (a, b) {
        return a[b];
      }, snapSourceFeature.geometry.coordinates);
      return _objectSpread({}, snapSourceHandle, {
        geometry: {
          type: 'Point',
          coordinates: snapSourceCoordinates
        }
      });
    } // If additionalSnapTargets is present in modeConfig and is populated, this
    // method will return those features along with the features
    // that live in the current layer. Otherwise, this method will simply return the
    // features from the current layer

  }, {
    key: "_getSnapTargets",
    value: function _getSnapTargets(props) {
      var _ref = props.modeConfig || {},
          additionalSnapTargets = _ref.additionalSnapTargets;

      additionalSnapTargets = additionalSnapTargets || [];

      var features = _toConsumableArray(props.data.features).concat(_toConsumableArray(additionalSnapTargets));

      return features;
    }
  }, {
    key: "_getSnapTargetHandles",
    value: function _getSnapTargetHandles(props) {
      var handles = [];

      var features = this._getSnapTargets(props);

      for (var i = 0; i < features.length; i++) {
        // Filter out the currently selected feature(s)
        var isCurrentIndexFeatureNotSelected = !props.selectedIndexes.includes(i);

        if (isCurrentIndexFeatureNotSelected) {
          var geometry = features[i].geometry;
          handles.push.apply(handles, _toConsumableArray((0, _utils.getEditHandlesForGeometry)(geometry, i, 'snap-target')));
        }
      }

      return handles;
    } // If no snap handle has been picked, only display the edit handles of the
    // selected feature. If a snap handle has been picked, display said snap handle
    // along with all snappable points on all non-selected features.

  }, {
    key: "getGuides",
    value: function getGuides(props) {
      var modeConfig = props.modeConfig,
          lastPointerMoveEvent = props.lastPointerMoveEvent;

      var _ref2 = modeConfig || {},
          enableSnapping = _ref2.enableSnapping;

      var guides = {
        type: 'FeatureCollection',
        features: _toConsumableArray(this._handler.getGuides(props).features)
      };

      if (!enableSnapping) {
        return guides;
      }

      var snapSourceHandle = lastPointerMoveEvent && this._getPickedSnapSource(lastPointerMoveEvent.pointerDownPicks); // They started dragging a handle
      // So render the picked handle (in its updated location) and all possible snap targets


      if (snapSourceHandle) {
        var _guides$features;

        (_guides$features = guides.features).push.apply(_guides$features, _toConsumableArray(this._getSnapTargetHandles(props)).concat([this._getUpdatedSnapSourceHandle(snapSourceHandle, props.data)]));

        return guides;
      } // Render the possible snap source handles


      var features = props.data.features;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = props.selectedIndexes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var index = _step.value;

          if (index < features.length) {
            var _guides$features2;

            var geometry = features[index].geometry;

            (_guides$features2 = guides.features).push.apply(_guides$features2, _toConsumableArray((0, _utils.getEditHandlesForGeometry)(geometry, index, 'snap-source')));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return guides;
    }
  }, {
    key: "_getSnapAwareEvent",
    value: function _getSnapAwareEvent(event, props) {
      var snapSource = this._getPickedSnapSource(props.lastPointerMoveEvent.pointerDownPicks);

      var snapTarget = this._getPickedSnapTarget(event.picks);

      return snapSource && snapTarget ? this._getSnappedMouseEvent(event, snapSource, snapTarget) : event;
    }
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event, props) {
      this._handler.handleStartDragging(event, props);
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event, props) {
      this._handler.handleStopDragging(this._getSnapAwareEvent(event, props), props);
    }
  }, {
    key: "handleDragging",
    value: function handleDragging(event, props) {
      this._handler.handleDragging(this._getSnapAwareEvent(event, props), props);
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event, props) {
      this._handler.handlePointerMove(this._getSnapAwareEvent(event, props), props);
    }
  }]);

  return SnappableMode;
}(_geojsonEditMode.BaseGeoJsonEditMode);

exports.SnappableMode = SnappableMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,