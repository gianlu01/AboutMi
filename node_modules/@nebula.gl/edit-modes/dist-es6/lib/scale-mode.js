"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScaleMode = void 0;

var _centroid = _interopRequireDefault(require("@turf/centroid"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _transformScale = _interopRequireDefault(require("@turf/transform-scale"));

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _immutableFeatureCollection = require("./immutable-feature-collection.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ScaleMode =
/*#__PURE__*/
function (_BaseGeoJsonEditMode) {
  _inherits(ScaleMode, _BaseGeoJsonEditMode);

  function ScaleMode() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ScaleMode);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScaleMode)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_isScalable", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_geometryBeingScaled", void 0);

    return _this;
  }

  _createClass(ScaleMode, [{
    key: "handleDragging",
    value: function handleDragging(event, props) {
      if (!this._isScalable) {
        // Nothing to do
        return;
      }

      if (this._geometryBeingScaled) {
        // Scale the geometry
        props.onEdit(this.getScaleAction(event.pointerDownMapCoords, event.mapCoords, 'scaling', props));
      }

      event.cancelPan();
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event, props) {
      this._isScalable = this.isSelectionPicked(event.pointerDownPicks || event.picks, props);
      this.updateCursor(props);
    }
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event, props) {
      if (!this._isScalable) {
        return;
      }

      this._geometryBeingScaled = this.getSelectedFeaturesAsFeatureCollection(props);
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event, props) {
      if (this._geometryBeingScaled) {
        // Scale the geometry
        props.onEdit(this.getScaleAction(event.pointerDownMapCoords, event.mapCoords, 'scaled', props));
        this._geometryBeingScaled = null;
      }
    }
  }, {
    key: "updateCursor",
    value: function updateCursor(props) {
      if (this._isScalable) {
        // TODO: look at doing SVG cursors to get a better "scale" cursor
        props.onUpdateCursor('move');
      } else {
        props.onUpdateCursor(null);
      }
    }
  }, {
    key: "getScaleAction",
    value: function getScaleAction(startDragPoint, currentPoint, editType, props) {
      var startPosition = startDragPoint;
      var centroid = (0, _centroid.default)(this._geometryBeingScaled);
      var factor = getScaleFactor(centroid, startPosition, currentPoint);
      var scaledFeatures = (0, _transformScale.default)(this._geometryBeingScaled, factor, {
        origin: centroid
      });
      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data);
      var selectedIndexes = props.selectedIndexes;

      for (var i = 0; i < selectedIndexes.length; i++) {
        var selectedIndex = selectedIndexes[i];
        var movedFeature = scaledFeatures.features[i];
        updatedData = updatedData.replaceGeometry(selectedIndex, movedFeature.geometry);
      }

      return {
        updatedData: updatedData.getObject(),
        editType: editType,
        editContext: {
          featureIndexes: selectedIndexes
        }
      };
    }
  }]);

  return ScaleMode;
}(_geojsonEditMode.BaseGeoJsonEditMode);

exports.ScaleMode = ScaleMode;

function getScaleFactor(centroid, startDragPoint, currentPoint) {
  var startDistance = (0, _distance.default)(centroid, startDragPoint);
  var endDistance = (0, _distance.default)(centroid, currentPoint);
  return endDistance / startDistance;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,