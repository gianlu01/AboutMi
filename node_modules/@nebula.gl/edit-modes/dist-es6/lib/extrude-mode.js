"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExtrudeMode = void 0;

var _bearing = _interopRequireDefault(require("@turf/bearing"));

var _utils = require("../utils.js");

var _modifyMode = require("./modify-mode.js");

var _immutableFeatureCollection = require("./immutable-feature-collection.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ExtrudeMode =
/*#__PURE__*/
function (_ModifyMode) {
  _inherits(ExtrudeMode, _ModifyMode);

  function ExtrudeMode() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ExtrudeMode);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ExtrudeMode)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isPointAdded", false);

    return _this;
  }

  _createClass(ExtrudeMode, [{
    key: "handleDragging",
    value: function handleDragging(event, props) {
      var editHandle = (0, _utils.getPickedEditHandle)(event.pointerDownPicks);

      if (editHandle) {
        var featureIndex = editHandle.properties.featureIndex;
        var positionIndexes = editHandle.properties.positionIndexes;
        var size = this.coordinatesSize(positionIndexes, featureIndex, props.data);
        positionIndexes = this.isPointAdded ? this.nextPositionIndexes(positionIndexes, size) : positionIndexes; // p1 and p1 are end points for edge

        var p1 = this.getPointForPositionIndexes(this.prevPositionIndexes(positionIndexes, size), featureIndex, props.data);
        var p2 = this.getPointForPositionIndexes(positionIndexes, featureIndex, props.data);

        if (p1 && p2) {
          // p3 and p4 are end points for moving (extruding) edge
          var _generatePointsParall = (0, _utils.generatePointsParallelToLinePoints)(p1, p2, event.mapCoords),
              _generatePointsParall2 = _slicedToArray(_generatePointsParall, 2),
              p3 = _generatePointsParall2[0],
              p4 = _generatePointsParall2[1];

          var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replacePosition(featureIndex, this.prevPositionIndexes(positionIndexes, size), p4).replacePosition(featureIndex, positionIndexes, p3).getObject();
          props.onEdit({
            updatedData: updatedData,
            editType: 'extruding',
            editContext: {
              featureIndexes: [featureIndex],
              positionIndexes: this.nextPositionIndexes(positionIndexes, size),
              position: p3
            }
          });
          event.cancelPan();
        }
      }
    }
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event, props) {
      var selectedFeatureIndexes = props.selectedIndexes;
      var editHandle = (0, _utils.getPickedIntermediateEditHandle)(event.picks);

      if (selectedFeatureIndexes.length && editHandle) {
        var _editHandle$propertie = editHandle.properties,
            positionIndexes = _editHandle$propertie.positionIndexes,
            featureIndex = _editHandle$propertie.featureIndex;
        var size = this.coordinatesSize(positionIndexes, featureIndex, props.data); // p1 and p1 are end points for edge

        var p1 = this.getPointForPositionIndexes(this.prevPositionIndexes(positionIndexes, size), featureIndex, props.data);
        var p2 = this.getPointForPositionIndexes(positionIndexes, featureIndex, props.data);

        if (p1 && p2) {
          var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data);

          if (!this.isOrthogonal(positionIndexes, featureIndex, size, props.data)) {
            updatedData = updatedData.addPosition(featureIndex, positionIndexes, p2);
          }

          if (!this.isOrthogonal(this.prevPositionIndexes(positionIndexes, size), featureIndex, size, props.data)) {
            updatedData = updatedData.addPosition(featureIndex, positionIndexes, p1);
            this.isPointAdded = true;
          }

          props.onEdit({
            updatedData: updatedData.getObject(),
            editType: 'startExtruding',
            editContext: {
              featureIndexes: [featureIndex],
              positionIndexes: positionIndexes,
              position: p1
            }
          });
        }
      }
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event, props) {
      var selectedFeatureIndexes = props.selectedIndexes;
      var editHandle = (0, _utils.getPickedEditHandle)(event.pointerDownPicks);

      if (selectedFeatureIndexes.length && editHandle) {
        var featureIndex = editHandle.properties.featureIndex;
        var positionIndexes = editHandle.properties.positionIndexes;
        var size = this.coordinatesSize(positionIndexes, featureIndex, props.data);
        positionIndexes = this.isPointAdded ? this.nextPositionIndexes(positionIndexes, size) : positionIndexes; // p1 and p1 are end points for edge

        var p1 = this.getPointForPositionIndexes(this.prevPositionIndexes(positionIndexes, size), featureIndex, props.data);
        var p2 = this.getPointForPositionIndexes(positionIndexes, featureIndex, props.data);

        if (p1 && p2) {
          // p3 and p4 are end points for new moved (extruded) edge
          var _generatePointsParall3 = (0, _utils.generatePointsParallelToLinePoints)(p1, p2, event.mapCoords),
              _generatePointsParall4 = _slicedToArray(_generatePointsParall3, 2),
              p3 = _generatePointsParall4[0],
              p4 = _generatePointsParall4[1];

          var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replacePosition(featureIndex, this.prevPositionIndexes(positionIndexes, size), p4).replacePosition(featureIndex, positionIndexes, p3).getObject();
          props.onEdit({
            updatedData: updatedData,
            editType: 'extruded',
            editContext: {
              featureIndexes: [featureIndex],
              positionIndexes: positionIndexes,
              position: p3
            }
          });
        }
      }

      this.isPointAdded = false;
    }
  }, {
    key: "coordinatesSize",
    value: function coordinatesSize(positionIndexes, featureIndex, _ref) {
      var features = _ref.features;
      var size = 0;
      var feature = features[featureIndex];
      var coordinates = feature.geometry.coordinates; // for Multi polygons, length will be 3

      if (positionIndexes.length === 3) {
        var _positionIndexes = _slicedToArray(positionIndexes, 2),
            a = _positionIndexes[0],
            b = _positionIndexes[1];

        if (coordinates.length && coordinates[a].length) {
          size = coordinates[a][b].length;
        }
      } else {
        var _positionIndexes2 = _slicedToArray(positionIndexes, 1),
            _b = _positionIndexes2[0];

        if (coordinates.length && coordinates[_b].length) {
          size = coordinates[_b].length;
        }
      }

      return size;
    }
  }, {
    key: "getBearing",
    value: function getBearing(p1, p2) {
      var angle = (0, _bearing.default)(p1, p2);

      if (angle < 0) {
        return Math.floor(360 + angle);
      }

      return Math.floor(angle);
    }
  }, {
    key: "isOrthogonal",
    value: function isOrthogonal(positionIndexes, featureIndex, size, features) {
      if (positionIndexes[positionIndexes.length - 1] === size - 1) {
        positionIndexes[positionIndexes.length - 1] = 0;
      }

      var prevPoint = this.getPointForPositionIndexes(this.prevPositionIndexes(positionIndexes, size), featureIndex, features);
      var nextPoint = this.getPointForPositionIndexes(this.nextPositionIndexes(positionIndexes, size), featureIndex, features);
      var currentPoint = this.getPointForPositionIndexes(positionIndexes, featureIndex, features);
      var prevAngle = this.getBearing(currentPoint, prevPoint);
      var nextAngle = this.getBearing(currentPoint, nextPoint);
      return [89, 90, 91, 269, 270, 271].includes(Math.abs(prevAngle - nextAngle));
    }
  }, {
    key: "nextPositionIndexes",
    value: function nextPositionIndexes(positionIndexes, size) {
      var next = _toConsumableArray(positionIndexes);

      if (next.length) {
        next[next.length - 1] = next[next.length - 1] === size - 1 ? 0 : next[next.length - 1] + 1;
      }

      return next;
    }
  }, {
    key: "prevPositionIndexes",
    value: function prevPositionIndexes(positionIndexes, size) {
      var prev = _toConsumableArray(positionIndexes);

      if (prev.length) {
        prev[prev.length - 1] = prev[prev.length - 1] === 0 ? size - 2 : prev[prev.length - 1] - 1;
      }

      return prev;
    }
  }, {
    key: "getPointForPositionIndexes",
    value: function getPointForPositionIndexes(positionIndexes, featureIndex, _ref2) {
      var features = _ref2.features;
      var p1;
      var feature = features[featureIndex];
      var coordinates = feature.geometry.coordinates; // for Multi polygons, length will be 3

      if (positionIndexes.length === 3) {
        var _positionIndexes3 = _slicedToArray(positionIndexes, 3),
            a = _positionIndexes3[0],
            b = _positionIndexes3[1],
            c = _positionIndexes3[2];

        if (coordinates.length && coordinates[a].length) {
          p1 = coordinates[a][b][c];
        }
      } else {
        var _positionIndexes4 = _slicedToArray(positionIndexes, 2),
            _b2 = _positionIndexes4[0],
            _c = _positionIndexes4[1];

        if (coordinates.length && coordinates[_b2].length) {
          p1 = coordinates[_b2][_c];
        }
      }

      return p1;
    }
  }]);

  return ExtrudeMode;
}(_modifyMode.ModifyMode);

exports.ExtrudeMode = ExtrudeMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,