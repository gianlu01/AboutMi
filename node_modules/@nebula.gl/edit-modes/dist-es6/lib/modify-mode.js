"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModifyMode = void 0;

var _nearestPointOnLine2 = _interopRequireDefault(require("@turf/nearest-point-on-line"));

var _helpers = require("@turf/helpers");

var _utils = require("../utils.js");

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _immutableFeatureCollection = require("./immutable-feature-collection.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ModifyMode =
/*#__PURE__*/
function (_BaseGeoJsonEditMode) {
  _inherits(ModifyMode, _BaseGeoJsonEditMode);

  function ModifyMode() {
    _classCallCheck(this, ModifyMode);

    return _possibleConstructorReturn(this, _getPrototypeOf(ModifyMode).apply(this, arguments));
  }

  _createClass(ModifyMode, [{
    key: "getGuides",
    value: function getGuides(props) {
      var _this = this;

      var handles = [];
      var data = props.data,
          lastPointerMoveEvent = props.lastPointerMoveEvent;
      var features = data.features;
      var picks = lastPointerMoveEvent && lastPointerMoveEvent.picks;
      var mapCoords = lastPointerMoveEvent && lastPointerMoveEvent.mapCoords;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = props.selectedIndexes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _index = _step.value;

          if (_index < features.length) {
            var geometry = features[_index].geometry;
            handles.push.apply(handles, _toConsumableArray((0, _utils.getEditHandlesForGeometry)(geometry, _index)));
          } else {
            console.warn("selectedFeatureIndexes out of range ".concat(_index)); // eslint-disable-line no-console,no-undef
          }
        } // intermediate edit handle

      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (picks && picks.length && mapCoords) {
        var existingEditHandle = (0, _utils.getPickedExistingEditHandle)(picks); // don't show intermediate point when too close to an existing edit handle

        var featureAsPick = !existingEditHandle && picks.find(function (pick) {
          return !pick.isGuide;
        }); // is the feature in the pick selected

        if (featureAsPick && !featureAsPick.object.geometry.type.includes('Point') && props.selectedIndexes.includes(featureAsPick.index)) {
          var intermediatePoint = null;
          var positionIndexPrefix = [];
          var referencePoint = (0, _helpers.point)(mapCoords); // process all lines of the (single) feature

          (0, _utils.recursivelyTraverseNestedArrays)(featureAsPick.object.geometry.coordinates, [], function (lineString, prefix) {
            var lineStringFeature = (0, _helpers.lineString)(lineString);

            var candidateIntermediatePoint = _this.nearestPointOnLine(lineStringFeature, referencePoint, props.modeConfig && props.modeConfig.viewport);

            if (!intermediatePoint || candidateIntermediatePoint.properties.dist < intermediatePoint.properties.dist) {
              intermediatePoint = candidateIntermediatePoint;
              positionIndexPrefix = prefix;
            }
          }); // tack on the lone intermediate point to the set of handles

          if (intermediatePoint) {
            var _intermediatePoint = intermediatePoint,
                position = _intermediatePoint.geometry.coordinates,
                index = _intermediatePoint.properties.index;
            handles.push({
              type: 'Feature',
              properties: {
                guideType: 'editHandle',
                editHandleType: 'intermediate',
                featureIndex: featureAsPick.index,
                positionIndexes: _toConsumableArray(positionIndexPrefix).concat([index + 1])
              },
              geometry: {
                type: 'Point',
                coordinates: position
              }
            });
          }
        }
      }

      return {
        type: 'FeatureCollection',
        features: handles
      };
    } // turf.js does not support elevation for nearestPointOnLine

  }, {
    key: "nearestPointOnLine",
    value: function nearestPointOnLine(line, inPoint, viewport) {
      var coordinates = line.geometry.coordinates;

      if (coordinates.some(function (coord) {
        return coord.length > 2;
      })) {
        if (viewport) {
          // This line has elevation, we need to use alternative algorithm
          return (0, _utils.nearestPointOnProjectedLine)(line, inPoint, viewport);
        } // eslint-disable-next-line no-console,no-undef


        console.log('Editing 3D point but modeConfig.viewport not provided. Falling back to 2D logic.');
      }

      return (0, _nearestPointOnLine2.default)(line, inPoint);
    }
  }, {
    key: "handleClick",
    value: function handleClick(event, props) {
      var pickedExistingHandle = (0, _utils.getPickedExistingEditHandle)(event.picks);
      var pickedIntermediateHandle = (0, _utils.getPickedIntermediateEditHandle)(event.picks);

      if (pickedExistingHandle) {
        var _pickedExistingHandle = pickedExistingHandle.properties,
            featureIndex = _pickedExistingHandle.featureIndex,
            positionIndexes = _pickedExistingHandle.positionIndexes;
        var updatedData;

        try {
          updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).removePosition(featureIndex, positionIndexes).getObject();
        } catch (ignored) {// This happens if user attempts to remove the last point
        }

        if (updatedData) {
          props.onEdit({
            updatedData: updatedData,
            editType: 'removePosition',
            editContext: {
              featureIndexes: [featureIndex],
              positionIndexes: positionIndexes,
              position: pickedExistingHandle.geometry.coordinates
            }
          });
        }
      } else if (pickedIntermediateHandle) {
        var _pickedIntermediateHa = pickedIntermediateHandle.properties,
            _featureIndex = _pickedIntermediateHa.featureIndex,
            _positionIndexes = _pickedIntermediateHa.positionIndexes;

        var _updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).addPosition(_featureIndex, _positionIndexes, pickedIntermediateHandle.geometry.coordinates).getObject();

        if (_updatedData) {
          props.onEdit({
            updatedData: _updatedData,
            editType: 'addPosition',
            editContext: {
              featureIndexes: [_featureIndex],
              positionIndexes: _positionIndexes,
              position: pickedIntermediateHandle.geometry.coordinates
            }
          });
        }
      }
    }
  }, {
    key: "handleDragging",
    value: function handleDragging(event, props) {
      var editHandle = (0, _utils.getPickedEditHandle)(event.pointerDownPicks);

      if (editHandle) {
        // Cancel map panning if pointer went down on an edit handle
        event.cancelPan();
        var editHandleProperties = editHandle.properties;
        var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replacePosition(editHandleProperties.featureIndex, editHandleProperties.positionIndexes, event.mapCoords).getObject();
        props.onEdit({
          updatedData: updatedData,
          editType: 'movePosition',
          editContext: {
            featureIndexes: [editHandleProperties.featureIndex],
            positionIndexes: editHandleProperties.positionIndexes,
            position: event.mapCoords
          }
        });
      }
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event, props) {
      var cursor = this.getCursor(event);
      props.onUpdateCursor(cursor);
    }
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event, props) {
      var selectedFeatureIndexes = props.selectedIndexes;
      var editHandle = (0, _utils.getPickedIntermediateEditHandle)(event.picks);

      if (selectedFeatureIndexes.length && editHandle) {
        var editHandleProperties = editHandle.properties;
        var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).addPosition(editHandleProperties.featureIndex, editHandleProperties.positionIndexes, event.mapCoords).getObject();
        props.onEdit({
          updatedData: updatedData,
          editType: 'addPosition',
          editContext: {
            featureIndexes: [editHandleProperties.featureIndex],
            positionIndexes: editHandleProperties.positionIndexes,
            position: event.mapCoords
          }
        });
      }
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event, props) {
      var selectedFeatureIndexes = props.selectedIndexes;
      var editHandle = (0, _utils.getPickedEditHandle)(event.picks);

      if (selectedFeatureIndexes.length && editHandle) {
        var editHandleProperties = editHandle.properties;
        var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replacePosition(editHandleProperties.featureIndex, editHandleProperties.positionIndexes, event.mapCoords).getObject();
        props.onEdit({
          updatedData: updatedData,
          editType: 'finishMovePosition',
          editContext: {
            featureIndexes: [editHandleProperties.featureIndex],
            positionIndexes: editHandleProperties.positionIndexes,
            position: event.mapCoords
          }
        });
      }
    }
  }, {
    key: "getCursor",
    value: function getCursor(event) {
      var picks = event && event.picks || [];
      var handlesPicked = (0, _utils.getPickedEditHandles)(picks);

      if (handlesPicked.length) {
        return 'cell';
      }

      return null;
    }
  }]);

  return ModifyMode;
}(_geojsonEditMode.BaseGeoJsonEditMode);

exports.ModifyMode = ModifyMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,