"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawCircleByDiameterMode = void 0;

var _circle = _interopRequireDefault(require("@turf/circle"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _twoClickPolygonMode = require("./two-click-polygon-mode.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DrawCircleByDiameterMode =
/*#__PURE__*/
function (_TwoClickPolygonMode) {
  _inherits(DrawCircleByDiameterMode, _TwoClickPolygonMode);

  function DrawCircleByDiameterMode() {
    _classCallCheck(this, DrawCircleByDiameterMode);

    return _possibleConstructorReturn(this, _getPrototypeOf(DrawCircleByDiameterMode).apply(this, arguments));
  }

  _createClass(DrawCircleByDiameterMode, [{
    key: "getTwoClickPolygon",
    value: function getTwoClickPolygon(coord1, coord2, modeConfig) {
      // Default turf value for circle is 64
      var _ref = modeConfig || {},
          _ref$steps = _ref.steps,
          steps = _ref$steps === void 0 ? 64 : _ref$steps;

      var options = {
        steps: steps
      };

      if (steps < 4) {
        console.warn("Minimum steps to draw a circle is 4 "); // eslint-disable-line no-console,no-undef

        options.steps = 4;
      }

      var centerCoordinates = (0, _geojsonEditMode.getIntermediatePosition)(coord1, coord2);
      var radius = Math.max((0, _distance.default)(coord1, centerCoordinates), 0.001);
      return (0, _circle.default)(centerCoordinates, radius, options);
    }
  }]);

  return DrawCircleByDiameterMode;
}(_twoClickPolygonMode.TwoClickPolygonMode);

exports.DrawCircleByDiameterMode = DrawCircleByDiameterMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZHJhdy1jaXJjbGUtYnktZGlhbWV0ZXItbW9kZS5qcyJdLCJuYW1lcyI6WyJEcmF3Q2lyY2xlQnlEaWFtZXRlck1vZGUiLCJjb29yZDEiLCJjb29yZDIiLCJtb2RlQ29uZmlnIiwic3RlcHMiLCJvcHRpb25zIiwiY29uc29sZSIsIndhcm4iLCJjZW50ZXJDb29yZGluYXRlcyIsInJhZGl1cyIsIk1hdGgiLCJtYXgiLCJUd29DbGlja1BvbHlnb25Nb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFYUEsd0I7Ozs7Ozs7Ozs7Ozs7dUNBQ1FDLE0sRUFBa0JDLE0sRUFBa0JDLFUsRUFBcUM7QUFDMUY7QUFEMEYsaUJBRW5FQSxVQUFVLElBQUksRUFGcUQ7QUFBQSw0QkFFbEZDLEtBRmtGO0FBQUEsVUFFbEZBLEtBRmtGLDJCQUUxRSxFQUYwRTs7QUFHMUYsVUFBTUMsT0FBTyxHQUFHO0FBQUVELFFBQUFBLEtBQUssRUFBTEE7QUFBRixPQUFoQjs7QUFFQSxVQUFJQSxLQUFLLEdBQUcsQ0FBWixFQUFlO0FBQ2JFLFFBQUFBLE9BQU8sQ0FBQ0MsSUFBUix5Q0FEYSxDQUN5Qzs7QUFDdERGLFFBQUFBLE9BQU8sQ0FBQ0QsS0FBUixHQUFnQixDQUFoQjtBQUNEOztBQUVELFVBQU1JLGlCQUFpQixHQUFHLDhDQUF3QlAsTUFBeEIsRUFBZ0NDLE1BQWhDLENBQTFCO0FBQ0EsVUFBTU8sTUFBTSxHQUFHQyxJQUFJLENBQUNDLEdBQUwsQ0FBUyx1QkFBU1YsTUFBVCxFQUFpQk8saUJBQWpCLENBQVQsRUFBOEMsS0FBOUMsQ0FBZjtBQUVBLGFBQU8scUJBQU9BLGlCQUFQLEVBQTBCQyxNQUExQixFQUFrQ0osT0FBbEMsQ0FBUDtBQUNEOzs7O0VBZjJDTyx3QyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBjaXJjbGUgZnJvbSAnQHR1cmYvY2lyY2xlJztcbmltcG9ydCBkaXN0YW5jZSBmcm9tICdAdHVyZi9kaXN0YW5jZSc7XG5pbXBvcnQgdHlwZSB7IFBvc2l0aW9uLCBQb2x5Z29uLCBGZWF0dXJlT2YgfSBmcm9tICcuLi9nZW9qc29uLXR5cGVzLmpzJztcbmltcG9ydCB7IGdldEludGVybWVkaWF0ZVBvc2l0aW9uIH0gZnJvbSAnLi9nZW9qc29uLWVkaXQtbW9kZS5qcyc7XG5pbXBvcnQgeyBUd29DbGlja1BvbHlnb25Nb2RlIH0gZnJvbSAnLi90d28tY2xpY2stcG9seWdvbi1tb2RlLmpzJztcblxuZXhwb3J0IGNsYXNzIERyYXdDaXJjbGVCeURpYW1ldGVyTW9kZSBleHRlbmRzIFR3b0NsaWNrUG9seWdvbk1vZGUge1xuICBnZXRUd29DbGlja1BvbHlnb24oY29vcmQxOiBQb3NpdGlvbiwgY29vcmQyOiBQb3NpdGlvbiwgbW9kZUNvbmZpZzogYW55KTogRmVhdHVyZU9mPFBvbHlnb24+IHtcbiAgICAvLyBEZWZhdWx0IHR1cmYgdmFsdWUgZm9yIGNpcmNsZSBpcyA2NFxuICAgIGNvbnN0IHsgc3RlcHMgPSA2NCB9ID0gbW9kZUNvbmZpZyB8fCB7fTtcbiAgICBjb25zdCBvcHRpb25zID0geyBzdGVwcyB9O1xuXG4gICAgaWYgKHN0ZXBzIDwgNCkge1xuICAgICAgY29uc29sZS53YXJuKGBNaW5pbXVtIHN0ZXBzIHRvIGRyYXcgYSBjaXJjbGUgaXMgNCBgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlLG5vLXVuZGVmXG4gICAgICBvcHRpb25zLnN0ZXBzID0gNDtcbiAgICB9XG5cbiAgICBjb25zdCBjZW50ZXJDb29yZGluYXRlcyA9IGdldEludGVybWVkaWF0ZVBvc2l0aW9uKGNvb3JkMSwgY29vcmQyKTtcbiAgICBjb25zdCByYWRpdXMgPSBNYXRoLm1heChkaXN0YW5jZShjb29yZDEsIGNlbnRlckNvb3JkaW5hdGVzKSwgMC4wMDEpO1xuXG4gICAgcmV0dXJuIGNpcmNsZShjZW50ZXJDb29yZGluYXRlcywgcmFkaXVzLCBvcHRpb25zKTtcbiAgfVxufVxuIl19