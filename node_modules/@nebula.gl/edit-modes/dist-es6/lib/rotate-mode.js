"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RotateMode = void 0;

var _centroid = _interopRequireDefault(require("@turf/centroid"));

var _bearing = _interopRequireDefault(require("@turf/bearing"));

var _transformRotate = _interopRequireDefault(require("@turf/transform-rotate"));

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _immutableFeatureCollection = require("./immutable-feature-collection.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RotateMode =
/*#__PURE__*/
function (_BaseGeoJsonEditMode) {
  _inherits(RotateMode, _BaseGeoJsonEditMode);

  function RotateMode() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, RotateMode);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RotateMode)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_isRotatable", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_geometryBeingRotated", void 0);

    return _this;
  }

  _createClass(RotateMode, [{
    key: "handleDragging",
    value: function handleDragging(event, props) {
      if (!this._isRotatable) {
        // Nothing to do
        return;
      }

      if (this._geometryBeingRotated) {
        // Rotate the geometry
        props.onEdit(this.getRotateAction(event.pointerDownMapCoords, event.mapCoords, 'rotating', props));
      } // cancel map panning


      event.cancelPan();
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event, props) {
      this._isRotatable = this.isSelectionPicked(event.pointerDownPicks || event.picks, props);
      this.updateCursor(props);
    }
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event, props) {
      if (!this._isRotatable) {
        return;
      }

      this._geometryBeingRotated = this.getSelectedFeaturesAsFeatureCollection(props);
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event, props) {
      if (this._geometryBeingRotated) {
        // Rotate the geometry
        props.onEdit(this.getRotateAction(event.pointerDownMapCoords, event.mapCoords, 'rotated', props));
        this._geometryBeingRotated = null;
      }
    }
  }, {
    key: "updateCursor",
    value: function updateCursor(props) {
      if (this._isRotatable) {
        // TODO: look at doing SVG cursors to get a better "rotate" cursor
        props.onUpdateCursor('move');
      } else {
        props.onUpdateCursor(null);
      }
    }
  }, {
    key: "getRotateAction",
    value: function getRotateAction(startDragPoint, currentPoint, editType, props) {
      var startPosition = startDragPoint;
      var centroid = (0, _centroid.default)(this._geometryBeingRotated);
      var angle = getRotationAngle(centroid, startPosition, currentPoint);
      var rotatedFeatures = (0, _transformRotate.default)(this._geometryBeingRotated, angle);
      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data);
      var selectedIndexes = props.selectedIndexes;

      for (var i = 0; i < selectedIndexes.length; i++) {
        var selectedIndex = selectedIndexes[i];
        var movedFeature = rotatedFeatures.features[i];
        updatedData = updatedData.replaceGeometry(selectedIndex, movedFeature.geometry);
      }

      return {
        updatedData: updatedData.getObject(),
        editType: editType,
        editContext: {
          featureIndexes: selectedIndexes
        }
      };
    }
  }]);

  return RotateMode;
}(_geojsonEditMode.BaseGeoJsonEditMode);

exports.RotateMode = RotateMode;

function getRotationAngle(centroid, startDragPoint, currentPoint) {
  var bearing1 = (0, _bearing.default)(centroid, startDragPoint);
  var bearing2 = (0, _bearing.default)(centroid, currentPoint);
  return bearing2 - bearing1;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,