"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNumeric = isNumeric;
exports.parseEventElement = parseEventElement;
exports.getScreenCoords = getScreenCoords;
exports.findClosestPointOnLineSegment = findClosestPointOnLineSegment;
exports.getFeatureCoordinates = getFeatureCoordinates;
exports.updateRectanglePosition = updateRectanglePosition;

var _constants = require("../constants");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function isNumeric(val) {
  return !Array.isArray(val) && !isNaN(parseFloat(val)) && isFinite(val);
}

function parseEventElement(evt) {
  var elem = evt.target;

  if (!elem || !elem.dataset || !elem.dataset.type) {
    return null;
  }

  var type = elem.dataset.type;
  var featureIndex = elem.dataset.featureIndex;
  var index = elem.dataset.index;
  return {
    object: {
      type: type,
      index: isNumeric(index) ? Number(index) : undefined,
      featureIndex: isNumeric(featureIndex) ? Number(featureIndex) : undefined
    },
    index: index
  };
}

function getScreenCoords(evt) {
  var _evt$offsetCenter = evt.offsetCenter,
      x = _evt$offsetCenter.x,
      y = _evt$offsetCenter.y;
  return [Number(x), Number(y)];
}

function findClosestPointOnLineSegment(p1, p2, p) {
  // line
  var k = (p2[1] - p1[1]) / (p2[0] - p1[0]);
  var b = p1[1] - k * p1[0]; // vertical line

  if (!isFinite(k)) {
    var q = [p1[0], p[1]];
    return inBounds(p1, p2, q) ? q : null;
  } // p is on line [p1, p2]


  if (p[0] * k + b - p[1] === 0) {
    return inBounds(p1, p2, p) ? p : null;
  }

  var qx = (k * p[1] + p[0] - k * b) / (k * k + 1);
  var qy = k * qx + b;
  return inBounds(p1, p2, [qx, qy]) ? [qx, qy] : null;
}

function getFeatureCoordinates(feature) {
  var coordinates = feature && feature.geometry && feature.geometry.coordinates;

  if (!coordinates) {
    return null;
  }

  var isPolygonal = feature.geometry.type === _constants.GEOJSON_TYPE.POLYGON;
  return isPolygonal ? coordinates[0] : coordinates;
}

function updateRectanglePosition(feature, editHandleIndex, mapCoords) {
  var coordinates = getFeatureCoordinates(feature);

  if (!coordinates) {
    return null;
  }

  var points = coordinates.slice(0, 4);
  points[editHandleIndex % 4] = mapCoords;
  /*
  *   p0.x, p0.y (p0) ------ p2.x, p0.y (p1)
  *       |                      |
  *       |                      |
  *   p0.x, p2.y (p3) ----- p2.x, p2.y (p2)
  */

  var p0 = points[(editHandleIndex + 2) % 4];
  var p2 = points[editHandleIndex % 4];
  points[(editHandleIndex + 1) % 4] = [p2[0], p0[1]];
  points[(editHandleIndex + 3) % 4] = [p0[0], p2[1]];
  return feature.geometry.type === _constants.GEOJSON_TYPE.POLYGON ? [_toConsumableArray(points).concat([points[0]])] : points;
}

function inBounds(p1, p2, p) {
  var bounds = [Math.min(p1[0], p2[0]), Math.max(p1[0], p2[0]), Math.min(p1[1], p2[1]), Math.max(p1[1], p2[1])];
  return p[0] >= bounds[0] && p[0] <= bounds[1] && p[1] >= bounds[2] && p[1] <= bounds[3];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,