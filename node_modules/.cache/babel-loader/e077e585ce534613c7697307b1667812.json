{"ast":null,"code":"var hat = require('hat');\n\nvar Constants = require('../constants');\n\nvar Feature = function Feature(ctx, geojson) {\n  this.ctx = ctx;\n  this.properties = geojson.properties || {};\n  this.coordinates = geojson.geometry.coordinates;\n  this.id = geojson.id || hat();\n  this.type = geojson.geometry.type;\n};\n\nFeature.prototype.changed = function () {\n  this.ctx.store.featureChanged(this.id);\n};\n\nFeature.prototype.incomingCoords = function (coords) {\n  this.setCoordinates(coords);\n};\n\nFeature.prototype.setCoordinates = function (coords) {\n  this.coordinates = coords;\n  this.changed();\n};\n\nFeature.prototype.getCoordinates = function () {\n  return JSON.parse(JSON.stringify(this.coordinates));\n};\n\nFeature.prototype.setProperty = function (property, value) {\n  this.properties[property] = value;\n};\n\nFeature.prototype.toGeoJSON = function () {\n  return JSON.parse(JSON.stringify({\n    id: this.id,\n    type: Constants.geojsonTypes.FEATURE,\n    properties: this.properties,\n    geometry: {\n      coordinates: this.getCoordinates(),\n      type: this.type\n    }\n  }));\n};\n\nFeature.prototype.internal = function (mode) {\n  var properties = {\n    id: this.id,\n    meta: Constants.meta.FEATURE,\n    'meta:type': this.type,\n    active: Constants.activeStates.INACTIVE,\n    mode: mode\n  };\n\n  if (this.ctx.options.userProperties) {\n    for (var name in this.properties) {\n      properties[\"user_\".concat(name)] = this.properties[name];\n    }\n  }\n\n  return {\n    type: Constants.geojsonTypes.FEATURE,\n    properties: properties,\n    geometry: {\n      coordinates: this.getCoordinates(),\n      type: this.type\n    }\n  };\n};\n\nmodule.exports = Feature;","map":{"version":3,"sources":["C:/Users/michele/Desktop/IT/Code/react/aboutmi/node_modules/@mapbox/mapbox-gl-draw/src/feature_types/feature.js"],"names":["hat","require","Constants","Feature","ctx","geojson","properties","coordinates","geometry","id","type","prototype","changed","store","featureChanged","incomingCoords","coords","setCoordinates","getCoordinates","JSON","parse","stringify","setProperty","property","value","toGeoJSON","geojsonTypes","FEATURE","internal","mode","meta","active","activeStates","INACTIVE","options","userProperties","name","module","exports"],"mappings":"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","sourcesContent":["const hat = require('hat');\r\nconst Constants = require('../constants');\r\n\r\nconst Feature = function(ctx, geojson) {\r\n  this.ctx = ctx;\r\n  this.properties = geojson.properties || {};\r\n  this.coordinates = geojson.geometry.coordinates;\r\n  this.id = geojson.id || hat();\r\n  this.type = geojson.geometry.type;\r\n};\r\n\r\nFeature.prototype.changed = function() {\r\n  this.ctx.store.featureChanged(this.id);\r\n};\r\n\r\nFeature.prototype.incomingCoords = function(coords) {\r\n  this.setCoordinates(coords);\r\n};\r\n\r\nFeature.prototype.setCoordinates = function(coords) {\r\n  this.coordinates = coords;\r\n  this.changed();\r\n};\r\n\r\nFeature.prototype.getCoordinates = function() {\r\n  return JSON.parse(JSON.stringify(this.coordinates));\r\n};\r\n\r\nFeature.prototype.setProperty = function(property, value) {\r\n  this.properties[property] = value;\r\n};\r\n\r\nFeature.prototype.toGeoJSON = function() {\r\n  return JSON.parse(JSON.stringify({\r\n    id: this.id,\r\n    type: Constants.geojsonTypes.FEATURE,\r\n    properties: this.properties,\r\n    geometry: {\r\n      coordinates: this.getCoordinates(),\r\n      type: this.type\r\n    }\r\n  }));\r\n};\r\n\r\nFeature.prototype.internal = function(mode) {\r\n  const properties = {\r\n    id: this.id,\r\n    meta: Constants.meta.FEATURE,\r\n    'meta:type': this.type,\r\n    active: Constants.activeStates.INACTIVE,\r\n    mode: mode\r\n  };\r\n\r\n  if (this.ctx.options.userProperties) {\r\n    for (const name in this.properties) {\r\n      properties[`user_${name}`] = this.properties[name];\r\n    }\r\n  }\r\n\r\n  return {\r\n    type: Constants.geojsonTypes.FEATURE,\r\n    properties: properties,\r\n    geometry: {\r\n      coordinates: this.getCoordinates(),\r\n      type: this.type\r\n    }\r\n  };\r\n};\r\n\r\nmodule.exports = Feature;\r\n"]},"metadata":{},"sourceType":"script"}