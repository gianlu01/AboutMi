{"ast":null,"code":"var setupModeHandler = require('./lib/mode_handler');\n\nvar getFeaturesAndSetCursor = require('./lib/get_features_and_set_cursor');\n\nvar featuresAt = require('./lib/features_at');\n\nvar isClick = require('./lib/is_click');\n\nvar isTap = require('./lib/is_tap');\n\nvar Constants = require('./constants');\n\nvar objectToMode = require('./modes/object_to_mode');\n\nmodule.exports = function (ctx) {\n  var modes = Object.keys(ctx.options.modes).reduce(function (m, k) {\n    m[k] = objectToMode(ctx.options.modes[k]);\n    return m;\n  }, {});\n  var mouseDownInfo = {};\n  var touchStartInfo = {};\n  var events = {};\n  var _currentModeName = null;\n  var currentMode = null;\n\n  events.drag = function (event, isDrag) {\n    if (isDrag({\n      point: event.point,\n      time: new Date().getTime()\n    })) {\n      ctx.ui.queueMapClasses({\n        mouse: Constants.cursors.DRAG\n      });\n      currentMode.drag(event);\n    } else {\n      event.originalEvent.stopPropagation();\n    }\n  };\n\n  events.mousedrag = function (event) {\n    events.drag(event, function (endInfo) {\n      return !isClick(mouseDownInfo, endInfo);\n    });\n  };\n\n  events.touchdrag = function (event) {\n    events.drag(event, function (endInfo) {\n      return !isTap(touchStartInfo, endInfo);\n    });\n  };\n\n  events.mousemove = function (event) {\n    var button = event.originalEvent.buttons !== undefined ? event.originalEvent.buttons : event.originalEvent.which;\n\n    if (button === 1) {\n      return events.mousedrag(event);\n    }\n\n    var target = getFeaturesAndSetCursor(event, ctx);\n    event.featureTarget = target;\n    currentMode.mousemove(event);\n  };\n\n  events.mousedown = function (event) {\n    mouseDownInfo = {\n      time: new Date().getTime(),\n      point: event.point\n    };\n    var target = getFeaturesAndSetCursor(event, ctx);\n    event.featureTarget = target;\n    currentMode.mousedown(event);\n  };\n\n  events.mouseup = function (event) {\n    var target = getFeaturesAndSetCursor(event, ctx);\n    event.featureTarget = target;\n\n    if (isClick(mouseDownInfo, {\n      point: event.point,\n      time: new Date().getTime()\n    })) {\n      currentMode.click(event);\n    } else {\n      currentMode.mouseup(event);\n    }\n  };\n\n  events.mouseout = function (event) {\n    currentMode.mouseout(event);\n  };\n\n  events.touchstart = function (event) {\n    // Prevent emulated mouse events because we will fully handle the touch here.\n    // This does not stop the touch events from propogating to mapbox though.\n    event.originalEvent.preventDefault();\n\n    if (!ctx.options.touchEnabled) {\n      return;\n    }\n\n    touchStartInfo = {\n      time: new Date().getTime(),\n      point: event.point\n    };\n    var target = featuresAt.touch(event, null, ctx)[0];\n    event.featureTarget = target;\n    currentMode.touchstart(event);\n  };\n\n  events.touchmove = function (event) {\n    event.originalEvent.preventDefault();\n\n    if (!ctx.options.touchEnabled) {\n      return;\n    }\n\n    currentMode.touchmove(event);\n    return events.touchdrag(event);\n  };\n\n  events.touchend = function (event) {\n    event.originalEvent.preventDefault();\n\n    if (!ctx.options.touchEnabled) {\n      return;\n    }\n\n    var target = featuresAt.touch(event, null, ctx)[0];\n    event.featureTarget = target;\n\n    if (isTap(touchStartInfo, {\n      time: new Date().getTime(),\n      point: event.point\n    })) {\n      currentMode.tap(event);\n    } else {\n      currentMode.touchend(event);\n    }\n  }; // 8 - Backspace\n  // 46 - Delete\n\n\n  var isKeyModeValid = function isKeyModeValid(code) {\n    return !(code === 8 || code === 46 || code >= 48 && code <= 57);\n  };\n\n  events.keydown = function (event) {\n    if ((event.srcElement || event.target).classList[0] !== 'mapboxgl-canvas') return; // we only handle events on the map\n\n    if ((event.keyCode === 8 || event.keyCode === 46) && ctx.options.controls.trash) {\n      event.preventDefault();\n      currentMode.trash();\n    } else if (isKeyModeValid(event.keyCode)) {\n      currentMode.keydown(event);\n    } else if (event.keyCode === 49 && ctx.options.controls.point) {\n      changeMode(Constants.modes.DRAW_POINT);\n    } else if (event.keyCode === 50 && ctx.options.controls.line_string) {\n      changeMode(Constants.modes.DRAW_LINE_STRING);\n    } else if (event.keyCode === 51 && ctx.options.controls.polygon) {\n      changeMode(Constants.modes.DRAW_POLYGON);\n    }\n  };\n\n  events.keyup = function (event) {\n    if (isKeyModeValid(event.keyCode)) {\n      currentMode.keyup(event);\n    }\n  };\n\n  events.zoomend = function () {\n    ctx.store.changeZoom();\n  };\n\n  events.data = function (event) {\n    if (event.dataType === 'style') {\n      var setup = ctx.setup,\n          map = ctx.map,\n          options = ctx.options,\n          store = ctx.store;\n      var hasLayers = options.styles.some(function (style) {\n        return map.getLayer(style.id);\n      });\n\n      if (!hasLayers) {\n        setup.addLayers();\n        store.setDirty();\n        store.render();\n      }\n    }\n  };\n\n  function changeMode(modename, nextModeOptions) {\n    var eventOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    currentMode.stop();\n    var modebuilder = modes[modename];\n\n    if (modebuilder === undefined) {\n      throw new Error(\"\".concat(modename, \" is not valid\"));\n    }\n\n    _currentModeName = modename;\n    var mode = modebuilder(ctx, nextModeOptions);\n    currentMode = setupModeHandler(mode, ctx);\n\n    if (!eventOptions.silent) {\n      ctx.map.fire(Constants.events.MODE_CHANGE, {\n        mode: modename\n      });\n    }\n\n    ctx.store.setDirty();\n    ctx.store.render();\n  }\n\n  var actionState = {\n    trash: false,\n    combineFeatures: false,\n    uncombineFeatures: false\n  };\n\n  function actionable(actions) {\n    var changed = false;\n    Object.keys(actions).forEach(function (action) {\n      if (actionState[action] === undefined) throw new Error('Invalid action type');\n      if (actionState[action] !== actions[action]) changed = true;\n      actionState[action] = actions[action];\n    });\n    if (changed) ctx.map.fire(Constants.events.ACTIONABLE, {\n      actions: actionState\n    });\n  }\n\n  var api = {\n    start: function start() {\n      _currentModeName = ctx.options.defaultMode;\n      currentMode = setupModeHandler(modes[_currentModeName](ctx), ctx);\n    },\n    changeMode: changeMode,\n    actionable: actionable,\n    currentModeName: function currentModeName() {\n      return _currentModeName;\n    },\n    currentModeRender: function currentModeRender(geojson, push) {\n      return currentMode.render(geojson, push);\n    },\n    fire: function fire(name, event) {\n      if (events[name]) {\n        events[name](event);\n      }\n    },\n    addEventListeners: function addEventListeners() {\n      ctx.map.on('mousemove', events.mousemove);\n      ctx.map.on('mousedown', events.mousedown);\n      ctx.map.on('mouseup', events.mouseup);\n      ctx.map.on('data', events.data);\n      ctx.map.on('touchmove', events.touchmove);\n      ctx.map.on('touchstart', events.touchstart);\n      ctx.map.on('touchend', events.touchend);\n      ctx.container.addEventListener('mouseout', events.mouseout);\n\n      if (ctx.options.keybindings) {\n        ctx.container.addEventListener('keydown', events.keydown);\n        ctx.container.addEventListener('keyup', events.keyup);\n      }\n    },\n    removeEventListeners: function removeEventListeners() {\n      ctx.map.off('mousemove', events.mousemove);\n      ctx.map.off('mousedown', events.mousedown);\n      ctx.map.off('mouseup', events.mouseup);\n      ctx.map.off('data', events.data);\n      ctx.map.off('touchmove', events.touchmove);\n      ctx.map.off('touchstart', events.touchstart);\n      ctx.map.off('touchend', events.touchend);\n      ctx.container.removeEventListener('mouseout', events.mouseout);\n\n      if (ctx.options.keybindings) {\n        ctx.container.removeEventListener('keydown', events.keydown);\n        ctx.container.removeEventListener('keyup', events.keyup);\n      }\n    },\n    trash: function trash(options) {\n      currentMode.trash(options);\n    },\n    combineFeatures: function combineFeatures() {\n      currentMode.combineFeatures();\n    },\n    uncombineFeatures: function uncombineFeatures() {\n      currentMode.uncombineFeatures();\n    },\n    getMode: function getMode() {\n      return _currentModeName;\n    }\n  };\n  return api;\n};","map":null,"metadata":{},"sourceType":"script"}