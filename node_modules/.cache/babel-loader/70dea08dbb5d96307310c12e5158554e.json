{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/source/Source\r\n */\n\n\nimport { abstract } from '../util.js';\nimport BaseObject from '../Object.js';\nimport { get as getProjection } from '../proj.js';\nimport SourceState from './State.js';\n/**\r\n * A function that returns a string or an array of strings representing source\r\n * attributions.\r\n *\r\n * @typedef {function(import(\"../PluggableMap.js\").FrameState): (string|Array<string>)} Attribution\r\n */\n\n/**\r\n * A type that can be used to provide attribution information for data sources.\r\n *\r\n * It represents either\r\n * * a simple string (e.g. `'© Acme Inc.'`)\r\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\r\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\r\n *\r\n * @typedef {string|Array<string>|Attribution} AttributionLike\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {AttributionLike} [attributions]\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {SourceState} [state='ready']\r\n * @property {boolean} [wrapX=false]\r\n */\n\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\r\n *\r\n * A generic `change` event is triggered when the state of the source changes.\r\n * @abstract\r\n * @api\r\n */\n\nvar Source =\n/** @class */\nfunction (_super) {\n  __extends(Source, _super);\n  /**\r\n   * @param {Options} options Source options.\r\n   */\n\n\n  function Source(options) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * @private\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\n\n\n    _this.projection_ = getProjection(options.projection);\n    /**\r\n     * @private\r\n     * @type {?Attribution}\r\n     */\n\n    _this.attributions_ = adaptAttributions(options.attributions);\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n\n    _this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ? options.attributionsCollapsible : true;\n    /**\r\n     * This source is currently loading data. Sources that defer loading to the\r\n     * map's tile queue never set this to `true`.\r\n     * @type {boolean}\r\n     */\n\n    _this.loading = false;\n    /**\r\n     * @private\r\n     * @type {SourceState}\r\n     */\n\n    _this.state_ = options.state !== undefined ? options.state : SourceState.READY;\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n\n    _this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n    return _this;\n  }\n  /**\r\n   * Get the attribution function for the source.\r\n   * @return {?Attribution} Attribution function.\r\n   */\n\n\n  Source.prototype.getAttributions = function () {\n    return this.attributions_;\n  };\n  /**\r\n   * @return {boolean} Attributions are collapsible.\r\n   */\n\n\n  Source.prototype.getAttributionsCollapsible = function () {\n    return this.attributionsCollapsible_;\n  };\n  /**\r\n   * Get the projection of the source.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   * @api\r\n   */\n\n\n  Source.prototype.getProjection = function () {\n    return this.projection_;\n  };\n  /**\r\n   * @abstract\r\n   * @return {Array<number>|undefined} Resolutions.\r\n   */\n\n\n  Source.prototype.getResolutions = function () {\n    return abstract();\n  };\n  /**\r\n   * Get the state of the source, see {@link module:ol/source/State~State} for possible states.\r\n   * @return {SourceState} State.\r\n   * @api\r\n   */\n\n\n  Source.prototype.getState = function () {\n    return this.state_;\n  };\n  /**\r\n   * @return {boolean|undefined} Wrap X.\r\n   */\n\n\n  Source.prototype.getWrapX = function () {\n    return this.wrapX_;\n  };\n  /**\r\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\r\n   * @api\r\n   */\n\n\n  Source.prototype.refresh = function () {\n    this.changed();\n  };\n  /**\r\n   * Set the attributions of the source.\r\n   * @param {AttributionLike|undefined} attributions Attributions.\r\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\r\n   *     or `undefined`.\r\n   * @api\r\n   */\n\n\n  Source.prototype.setAttributions = function (attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  };\n  /**\r\n   * Set the state of the source.\r\n   * @param {SourceState} state State.\r\n   * @protected\r\n   */\n\n\n  Source.prototype.setState = function (state) {\n    this.state_ = state;\n    this.changed();\n  };\n\n  return Source;\n}(BaseObject);\n/**\r\n * Turns the attributions option into an attributions function.\r\n * @param {AttributionLike|undefined} attributionLike The attribution option.\r\n * @return {?Attribution} An attribution function (or null).\r\n */\n\n\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\n\nexport default Source;","map":null,"metadata":{},"sourceType":"module"}