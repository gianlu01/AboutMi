{"ast":null,"code":"var ModeInterface = module.exports = require('./mode_interface_accessors');\n/**\r\n * Triggered while a mode is being transitioned into.\r\n * @param opts {Object} - this is the object passed via `draw.changeMode('mode', opts)`;\r\n * @name MODE.onSetup\r\n * @returns {Object} - this object will be passed to all other life cycle functions\r\n */\n\n\nModeInterface.prototype.onSetup = function () {};\n/**\r\n * Triggered when a drag event is detected on the map\r\n * @name MODE.onDrag\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\n\n\nModeInterface.prototype.onDrag = function () {};\n/**\r\n * Triggered when the mouse is clicked\r\n * @name MODE.onClick\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\n\n\nModeInterface.prototype.onClick = function () {};\n/**\r\n * Triggered with the mouse is moved\r\n * @name MODE.onMouseMove\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\n\n\nModeInterface.prototype.onMouseMove = function () {};\n/**\r\n * Triggered when the mouse button is pressed down\r\n * @name MODE.onMouseDown\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\n\n\nModeInterface.prototype.onMouseDown = function () {};\n/**\r\n * Triggered when the mouse button is released\r\n * @name MODE.onMouseUp\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\n\n\nModeInterface.prototype.onMouseUp = function () {};\n/**\r\n * Triggered when the mouse leaves the map's container\r\n * @name MODE.onMouseOut\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\n\n\nModeInterface.prototype.onMouseOut = function () {};\n/**\r\n * Triggered when a key up event is detected\r\n * @name MODE.onKeyUp\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\n\n\nModeInterface.prototype.onKeyUp = function () {};\n/**\r\n * Triggered when a key down event is detected\r\n * @name MODE.onKeyDown\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\n\n\nModeInterface.prototype.onKeyDown = function () {};\n/**\r\n * Triggered when a touch event is started\r\n * @name MODE.onTouchStart\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\n\n\nModeInterface.prototype.onTouchStart = function () {};\n/**\r\n * Triggered when one drags thier finger on a mobile device\r\n * @name MODE.onTouchMove\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\n\n\nModeInterface.prototype.onTouchMove = function () {};\n/**\r\n * Triggered when one removes their finger from the map\r\n * @name MODE.onTouchEnd\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\n\n\nModeInterface.prototype.onTouchEnd = function () {};\n/**\r\n * Triggered when one quicly taps the map\r\n * @name MODE.onTap\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\n\n\nModeInterface.prototype.onTap = function () {};\n/**\r\n * Triggered when the mode is being exited, to be used for cleaning up artifacts such as invalid features\r\n * @name MODE.onStop\r\n * @param state {Object} - a mutible state object created by onSetup\r\n */\n\n\nModeInterface.prototype.onStop = function () {};\n/**\r\n * Triggered when [draw.trash()](https://github.com/mapbox/mapbox-gl-draw/blob/master/API.md#trash-draw) is called.\r\n * @name MODE.onTrash\r\n * @param state {Object} - a mutible state object created by onSetup\r\n */\n\n\nModeInterface.prototype.onTrash = function () {};\n/**\r\n * Triggered when [draw.combineFeatures()](https://github.com/mapbox/mapbox-gl-draw/blob/master/API.md#combinefeatures-draw) is called.\r\n * @name MODE.onCombineFeature\r\n * @param state {Object} - a mutible state object created by onSetup\r\n */\n\n\nModeInterface.prototype.onCombineFeature = function () {};\n/**\r\n * Triggered when [draw.uncombineFeatures()](https://github.com/mapbox/mapbox-gl-draw/blob/master/API.md#uncombinefeatures-draw) is called.\r\n * @name MODE.onUncombineFeature\r\n * @param state {Object} - a mutible state object created by onSetup\r\n */\n\n\nModeInterface.prototype.onUncombineFeature = function () {};\n/**\r\n * Triggered per feature on render to convert raw features into set of features for display on the map\r\n * See [styling draw](https://github.com/mapbox/mapbox-gl-draw/blob/master/API.md#styling-draw) for information about what geojson properties Draw uses as part of rendering.\r\n * @name MODE.toDisplayFeatures\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param geojson {Object} - a geojson being evaulated. To render, pass to `display`.\r\n * @param display {Function} - all geojson objects passed to this be rendered onto the map\r\n */\n\n\nModeInterface.prototype.toDisplayFeatures = function () {\n  throw new Error('You must overwrite toDisplayFeatures');\n};","map":{"version":3,"sources":["C:/Users/michele/Desktop/IT/Code/react/aboutmi/node_modules/@mapbox/mapbox-gl-draw/src/modes/mode_interface.js"],"names":["ModeInterface","module","exports","require","prototype","onSetup","onDrag","onClick","onMouseMove","onMouseDown","onMouseUp","onMouseOut","onKeyUp","onKeyDown","onTouchStart","onTouchMove","onTouchEnd","onTap","onStop","onTrash","onCombineFeature","onUncombineFeature","toDisplayFeatures","Error"],"mappings":"AAAA,IAAMA,aAAa,GAAGC,MAAM,CAACC,OAAP,GAAiBC,OAAO,CAAC,4BAAD,CAA9C;AAEA;;;;;;;;AAMAH,aAAa,CAACI,SAAd,CAAwBC,OAAxB,GAAkC,YAAW,CAAE,CAA/C;AAEA;;;;;;;;AAMAL,aAAa,CAACI,SAAd,CAAwBE,MAAxB,GAAiC,YAAW,CAAE,CAA9C;AAEA;;;;;;;;AAMAN,aAAa,CAACI,SAAd,CAAwBG,OAAxB,GAAkC,YAAW,CAAE,CAA/C;AAEA;;;;;;;;AAMAP,aAAa,CAACI,SAAd,CAAwBI,WAAxB,GAAsC,YAAW,CAAE,CAAnD;AAEA;;;;;;;;AAMAR,aAAa,CAACI,SAAd,CAAwBK,WAAxB,GAAsC,YAAW,CAAE,CAAnD;AAEA;;;;;;;;AAMAT,aAAa,CAACI,SAAd,CAAwBM,SAAxB,GAAoC,YAAW,CAAE,CAAjD;AAEA;;;;;;;;AAMAV,aAAa,CAACI,SAAd,CAAwBO,UAAxB,GAAqC,YAAW,CAAE,CAAlD;AAEA;;;;;;;;AAMAX,aAAa,CAACI,SAAd,CAAwBQ,OAAxB,GAAkC,YAAW,CAAE,CAA/C;AAEA;;;;;;;;AAMAZ,aAAa,CAACI,SAAd,CAAwBS,SAAxB,GAAoC,YAAW,CAAE,CAAjD;AAEA;;;;;;;;AAMAb,aAAa,CAACI,SAAd,CAAwBU,YAAxB,GAAuC,YAAW,CAAE,CAApD;AAEA;;;;;;;;AAMAd,aAAa,CAACI,SAAd,CAAwBW,WAAxB,GAAsC,YAAW,CAAE,CAAnD;AAEA;;;;;;;;AAMAf,aAAa,CAACI,SAAd,CAAwBY,UAAxB,GAAqC,YAAW,CAAE,CAAlD;AAEA;;;;;;;;AAMAhB,aAAa,CAACI,SAAd,CAAwBa,KAAxB,GAAgC,YAAW,CAAE,CAA7C;AAEA;;;;;;;AAKAjB,aAAa,CAACI,SAAd,CAAwBc,MAAxB,GAAiC,YAAW,CAAE,CAA9C;AAEA;;;;;;;AAKAlB,aAAa,CAACI,SAAd,CAAwBe,OAAxB,GAAkC,YAAW,CAAE,CAA/C;AAEA;;;;;;;AAKAnB,aAAa,CAACI,SAAd,CAAwBgB,gBAAxB,GAA2C,YAAW,CAAE,CAAxD;AAEA;;;;;;;AAKApB,aAAa,CAACI,SAAd,CAAwBiB,kBAAxB,GAA6C,YAAW,CAAE,CAA1D;AAEA;;;;;;;;;;AAQArB,aAAa,CAACI,SAAd,CAAwBkB,iBAAxB,GAA4C,YAAW;AACrD,QAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD,CAFD","sourcesContent":["const ModeInterface = module.exports = require('./mode_interface_accessors');\r\n\r\n/**\r\n * Triggered while a mode is being transitioned into.\r\n * @param opts {Object} - this is the object passed via `draw.changeMode('mode', opts)`;\r\n * @name MODE.onSetup\r\n * @returns {Object} - this object will be passed to all other life cycle functions\r\n */\r\nModeInterface.prototype.onSetup = function() {};\r\n\r\n/**\r\n * Triggered when a drag event is detected on the map\r\n * @name MODE.onDrag\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\r\nModeInterface.prototype.onDrag = function() {};\r\n\r\n/**\r\n * Triggered when the mouse is clicked\r\n * @name MODE.onClick\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\r\nModeInterface.prototype.onClick = function() {};\r\n\r\n/**\r\n * Triggered with the mouse is moved\r\n * @name MODE.onMouseMove\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\r\nModeInterface.prototype.onMouseMove = function() {};\r\n\r\n/**\r\n * Triggered when the mouse button is pressed down\r\n * @name MODE.onMouseDown\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\r\nModeInterface.prototype.onMouseDown = function() {};\r\n\r\n/**\r\n * Triggered when the mouse button is released\r\n * @name MODE.onMouseUp\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\r\nModeInterface.prototype.onMouseUp = function() {};\r\n\r\n/**\r\n * Triggered when the mouse leaves the map's container\r\n * @name MODE.onMouseOut\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\r\nModeInterface.prototype.onMouseOut = function() {};\r\n\r\n/**\r\n * Triggered when a key up event is detected\r\n * @name MODE.onKeyUp\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\r\nModeInterface.prototype.onKeyUp = function() {};\r\n\r\n/**\r\n * Triggered when a key down event is detected\r\n * @name MODE.onKeyDown\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\r\nModeInterface.prototype.onKeyDown = function() {};\r\n\r\n/**\r\n * Triggered when a touch event is started\r\n * @name MODE.onTouchStart\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\r\nModeInterface.prototype.onTouchStart = function() {};\r\n\r\n/**\r\n * Triggered when one drags thier finger on a mobile device\r\n * @name MODE.onTouchMove\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\r\nModeInterface.prototype.onTouchMove = function() {};\r\n\r\n/**\r\n * Triggered when one removes their finger from the map\r\n * @name MODE.onTouchEnd\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\r\nModeInterface.prototype.onTouchEnd = function() {};\r\n\r\n/**\r\n * Triggered when one quicly taps the map\r\n * @name MODE.onTap\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param e {Object} - the captured event that is triggering this life cycle event\r\n */\r\nModeInterface.prototype.onTap = function() {};\r\n\r\n/**\r\n * Triggered when the mode is being exited, to be used for cleaning up artifacts such as invalid features\r\n * @name MODE.onStop\r\n * @param state {Object} - a mutible state object created by onSetup\r\n */\r\nModeInterface.prototype.onStop = function() {};\r\n\r\n/**\r\n * Triggered when [draw.trash()](https://github.com/mapbox/mapbox-gl-draw/blob/master/API.md#trash-draw) is called.\r\n * @name MODE.onTrash\r\n * @param state {Object} - a mutible state object created by onSetup\r\n */\r\nModeInterface.prototype.onTrash = function() {};\r\n\r\n/**\r\n * Triggered when [draw.combineFeatures()](https://github.com/mapbox/mapbox-gl-draw/blob/master/API.md#combinefeatures-draw) is called.\r\n * @name MODE.onCombineFeature\r\n * @param state {Object} - a mutible state object created by onSetup\r\n */\r\nModeInterface.prototype.onCombineFeature = function() {};\r\n\r\n/**\r\n * Triggered when [draw.uncombineFeatures()](https://github.com/mapbox/mapbox-gl-draw/blob/master/API.md#uncombinefeatures-draw) is called.\r\n * @name MODE.onUncombineFeature\r\n * @param state {Object} - a mutible state object created by onSetup\r\n */\r\nModeInterface.prototype.onUncombineFeature = function() {};\r\n\r\n/**\r\n * Triggered per feature on render to convert raw features into set of features for display on the map\r\n * See [styling draw](https://github.com/mapbox/mapbox-gl-draw/blob/master/API.md#styling-draw) for information about what geojson properties Draw uses as part of rendering.\r\n * @name MODE.toDisplayFeatures\r\n * @param state {Object} - a mutible state object created by onSetup\r\n * @param geojson {Object} - a geojson being evaulated. To render, pass to `display`.\r\n * @param display {Function} - all geojson objects passed to this be rendered onto the map\r\n */\r\nModeInterface.prototype.toDisplayFeatures = function() {\r\n  throw new Error('You must overwrite toDisplayFeatures');\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"script"}