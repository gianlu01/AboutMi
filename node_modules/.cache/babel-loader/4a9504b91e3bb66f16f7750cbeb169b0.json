{"ast":null,"code":"/**\r\n * @module ol/string\r\n */\n\n/**\r\n * @param {number} number Number to be formatted\r\n * @param {number} width The desired width\r\n * @param {number=} opt_precision Precision of the output string (i.e. number of decimal places)\r\n * @returns {string} Formatted string\r\n */\nexport function padNumber(number, width, opt_precision) {\n  var numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;\n  var decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;\n}\n/**\r\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\r\n * @param {string|number} v1 First version\r\n * @param {string|number} v2 Second version\r\n * @returns {number} Value\r\n */\n\nexport function compareVersions(v1, v2) {\n  var s1 = ('' + v1).split('.');\n  var s2 = ('' + v2).split('.');\n\n  for (var i = 0; i < Math.max(s1.length, s2.length); i++) {\n    var n1 = parseInt(s1[i] || '0', 10);\n    var n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}","map":null,"metadata":{},"sourceType":"module"}