{"ast":null,"code":"/**\r\n * @module ol/interaction/DragAndDrop\r\n */\n// FIXME should handle all geo-referenced data, not just vector data\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { TRUE } from '../functions.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Interaction from './Interaction.js';\nimport { get as getProjection } from '../proj.js';\n/**\r\n * @typedef {Object} Options\r\n * @property {Array<typeof import(\"../format/Feature.js\").default>} [formatConstructors] Format constructors.\r\n * @property {import(\"../source/Vector.js\").default} [source] Optional vector source where features will be added.  If a source is provided\r\n * all existing features will be removed and new features will be added when\r\n * they are dropped on the target.  If you want to add features to a vector\r\n * source without removing the existing features (append only), instead of\r\n * providing the source option listen for the \"addfeatures\" event.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\r\n * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.\r\n */\n\n/**\r\n * @enum {string}\r\n */\n\nvar DragAndDropEventType = {\n  /**\r\n   * Triggered when features are added\r\n   * @event DragAndDropEvent#addfeatures\r\n   * @api\r\n   */\n  ADD_FEATURES: 'addfeatures'\n};\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\r\n * of this type.\r\n */\n\nvar DragAndDropEvent =\n/** @class */\nfunction (_super) {\n  __extends(DragAndDropEvent, _super);\n  /**\r\n   * @param {DragAndDropEventType} type Type.\r\n   * @param {File} file File.\r\n   * @param {Array<import(\"../Feature.js\").default>=} opt_features Features.\r\n   * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\r\n   */\n\n\n  function DragAndDropEvent(type, file, opt_features, opt_projection) {\n    var _this = _super.call(this, type) || this;\n    /**\r\n     * The features parsed from dropped data.\r\n     * @type {Array<import(\"../Feature.js\").FeatureLike>|undefined}\r\n     * @api\r\n     */\n\n\n    _this.features = opt_features;\n    /**\r\n     * The dropped file.\r\n     * @type {File}\r\n     * @api\r\n     */\n\n    _this.file = file;\n    /**\r\n     * The feature projection.\r\n     * @type {import(\"../proj/Projection.js\").default|undefined}\r\n     * @api\r\n     */\n\n    _this.projection = opt_projection;\n    return _this;\n  }\n\n  return DragAndDropEvent;\n}(Event);\n/**\r\n * @classdesc\r\n * Handles input of vector data by drag and drop.\r\n * @api\r\n *\r\n * @fires DragAndDropEvent\r\n */\n\n\nvar DragAndDrop =\n/** @class */\nfunction (_super) {\n  __extends(DragAndDrop, _super);\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\n\n\n  function DragAndDrop(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      handleEvent: TRUE\n    }) || this;\n    /**\r\n     * @private\r\n     * @type {Array<typeof import(\"../format/Feature.js\").default>}\r\n     */\n\n    _this.formatConstructors_ = options.formatConstructors ? options.formatConstructors : [];\n    /**\r\n     * @private\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\n\n    _this.projection_ = options.projection ? getProjection(options.projection) : null;\n    /**\r\n     * @private\r\n     * @type {?Array<import(\"../events.js\").EventsKey>}\r\n     */\n\n    _this.dropListenKeys_ = null;\n    /**\r\n     * @private\r\n     * @type {import(\"../source/Vector.js\").default}\r\n     */\n\n    _this.source_ = options.source || null;\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\n\n    _this.target = options.target ? options.target : null;\n    return _this;\n  }\n  /**\r\n   * @param {File} file File.\r\n   * @param {Event} event Load event.\r\n   * @private\r\n   */\n\n\n  DragAndDrop.prototype.handleResult_ = function (file, event) {\n    var result = event.target.result;\n    var map = this.getMap();\n    var projection = this.projection_;\n\n    if (!projection) {\n      var view = map.getView();\n      projection = view.getProjection();\n    }\n\n    var formatConstructors = this.formatConstructors_;\n    var features = [];\n\n    for (var i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      var format = new formatConstructors[i]();\n      features = this.tryReadFeatures_(format, result, {\n        featureProjection: projection\n      });\n\n      if (features && features.length > 0) {\n        break;\n      }\n    }\n\n    if (this.source_) {\n      this.source_.clear();\n      this.source_.addFeatures(features);\n    }\n\n    this.dispatchEvent(new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES, file, features, projection));\n  };\n  /**\r\n   * @private\r\n   */\n\n\n  DragAndDrop.prototype.registerListeners_ = function () {\n    var map = this.getMap();\n\n    if (map) {\n      var dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [listen(dropArea, EventType.DROP, handleDrop, this), listen(dropArea, EventType.DRAGENTER, handleStop, this), listen(dropArea, EventType.DRAGOVER, handleStop, this), listen(dropArea, EventType.DROP, handleStop, this)];\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DragAndDrop.prototype.setActive = function (active) {\n    if (!this.getActive() && active) {\n      this.registerListeners_();\n    }\n\n    if (this.getActive() && !active) {\n      this.unregisterListeners_();\n    }\n\n    _super.prototype.setActive.call(this, active);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DragAndDrop.prototype.setMap = function (map) {\n    this.unregisterListeners_();\n\n    _super.prototype.setMap.call(this, map);\n\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  };\n  /**\r\n   * @param {import(\"../format/Feature.js\").default} format Format.\r\n   * @param {string} text Text.\r\n   * @param {import(\"../format/Feature.js\").ReadOptions} options Read options.\r\n   * @private\r\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\r\n   */\n\n\n  DragAndDrop.prototype.tryReadFeatures_ = function (format, text, options) {\n    try {\n      return format.readFeatures(text, options);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\r\n   * @private\r\n   */\n\n\n  DragAndDrop.prototype.unregisterListeners_ = function () {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  };\n\n  return DragAndDrop;\n}(Interaction);\n/**\r\n * @param {DragEvent} event Event.\r\n * @this {DragAndDrop}\r\n */\n\n\nfunction handleDrop(event) {\n  var files = event.dataTransfer.files;\n\n  for (var i = 0, ii = files.length; i < ii; ++i) {\n    var file = files.item(i);\n    var reader = new FileReader();\n    reader.addEventListener(EventType.LOAD, this.handleResult_.bind(this, file));\n    reader.readAsText(file);\n  }\n}\n/**\r\n * @param {DragEvent} event Event.\r\n */\n\n\nfunction handleStop(event) {\n  event.stopPropagation();\n  event.preventDefault();\n  event.dataTransfer.dropEffect = 'copy';\n}\n\nexport default DragAndDrop;","map":null,"metadata":{},"sourceType":"module"}