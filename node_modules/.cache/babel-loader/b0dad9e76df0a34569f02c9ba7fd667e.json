{"ast":null,"code":"/**\r\n * @module ol/MapBrowserEventHandler\r\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport '@openlayers/pepjs';\nimport { DEVICE_PIXEL_RATIO } from './has.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapBrowserPointerEvent from './MapBrowserPointerEvent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport EventTarget from './events/Target.js';\nimport PointerEventType from './pointer/EventType.js';\n\nvar MapBrowserEventHandler =\n/** @class */\nfunction (_super) {\n  __extends(MapBrowserEventHandler, _super);\n  /**\r\n   * @param {import(\"./PluggableMap.js\").default} map The map with the viewport to listen to events on.\r\n   * @param {number=} moveTolerance The minimal distance the pointer must travel to trigger a move.\r\n   */\n\n\n  function MapBrowserEventHandler(map, moveTolerance) {\n    var _this = _super.call(this, map) || this;\n    /**\r\n     * This is the element that we will listen to the real events on.\r\n     * @type {import(\"./PluggableMap.js\").default}\r\n     * @private\r\n     */\n\n\n    _this.map_ = map;\n    /**\r\n     * @type {any}\r\n     * @private\r\n     */\n\n    _this.clickTimeoutId_;\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\n\n    _this.dragging_ = false;\n    /**\r\n     * @type {!Array<import(\"./events.js\").EventsKey>}\r\n     * @private\r\n     */\n\n    _this.dragListenerKeys_ = [];\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\n\n    _this.moveTolerance_ = moveTolerance ? moveTolerance * DEVICE_PIXEL_RATIO : DEVICE_PIXEL_RATIO;\n    /**\r\n     * The most recent \"down\" type event (or null if none have occurred).\r\n     * Set on pointerdown.\r\n     * @type {PointerEvent}\r\n     * @private\r\n     */\n\n    _this.down_ = null;\n\n    var element = _this.map_.getViewport();\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\n\n\n    _this.activePointers_ = 0;\n    /**\r\n     * @type {!Object<number, boolean>}\r\n     * @private\r\n     */\n\n    _this.trackedTouches_ = {};\n    _this.element_ = element;\n    /**\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     * @private\r\n     */\n\n    _this.pointerdownListenerKey_ = listen(element, PointerEventType.POINTERDOWN, _this.handlePointerDown_, _this);\n    /**\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     * @private\r\n     */\n\n    _this.relayedListenerKey_ = listen(element, PointerEventType.POINTERMOVE, _this.relayEvent_, _this);\n    return _this;\n  }\n  /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */\n\n\n  MapBrowserEventHandler.prototype.emulateClick_ = function (pointerEvent) {\n    var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.CLICK, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent);\n\n    if (this.clickTimeoutId_ !== undefined) {\n      // double-click\n      clearTimeout(this.clickTimeoutId_);\n      this.clickTimeoutId_ = undefined;\n      newEvent = new MapBrowserPointerEvent(MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);\n      this.dispatchEvent(newEvent);\n    } else {\n      // click\n      this.clickTimeoutId_ = setTimeout(function () {\n        this.clickTimeoutId_ = undefined;\n        var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);\n        this.dispatchEvent(newEvent);\n      }.bind(this), 250);\n    }\n  };\n  /**\r\n   * Keeps track on how many pointers are currently active.\r\n   *\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */\n\n\n  MapBrowserEventHandler.prototype.updateActivePointers_ = function (pointerEvent) {\n    var event = pointerEvent;\n\n    if (event.type == MapBrowserEventType.POINTERUP || event.type == MapBrowserEventType.POINTERCANCEL) {\n      delete this.trackedTouches_[event.pointerId];\n    } else if (event.type == MapBrowserEventType.POINTERDOWN) {\n      this.trackedTouches_[event.pointerId] = true;\n    }\n\n    this.activePointers_ = Object.keys(this.trackedTouches_).length;\n  };\n  /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */\n\n\n  MapBrowserEventHandler.prototype.handlePointerUp_ = function (pointerEvent) {\n    this.updateActivePointers_(pointerEvent);\n    var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.POINTERUP, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent); // We emulate click events on left mouse button click, touch contact, and pen\n    // contact. isMouseActionButton returns true in these cases (evt.button is set\n    // to 0).\n    // See http://www.w3.org/TR/pointerevents/#button-states\n    // We only fire click, singleclick, and doubleclick if nobody has called\n    // event.stopPropagation() or event.preventDefault().\n\n    if (!newEvent.propagationStopped && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) {\n      this.emulateClick_(this.down_);\n    }\n\n    if (this.activePointers_ === 0) {\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n      this.dragging_ = false;\n      this.down_ = null;\n    }\n  };\n  /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @return {boolean} If the left mouse button was pressed.\r\n   * @private\r\n   */\n\n\n  MapBrowserEventHandler.prototype.isMouseActionButton_ = function (pointerEvent) {\n    return pointerEvent.button === 0;\n  };\n  /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */\n\n\n  MapBrowserEventHandler.prototype.handlePointerDown_ = function (pointerEvent) {\n    this.updateActivePointers_(pointerEvent);\n    var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent);\n    this.down_ = pointerEvent;\n\n    if (this.dragListenerKeys_.length === 0) {\n      this.dragListenerKeys_.push(listen(document, MapBrowserEventType.POINTERMOVE, this.handlePointerMove_, this), listen(document, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this),\n      /* Note that the listener for `pointercancel is set up on\r\n       * `pointerEventHandler_` and not `documentPointerEventHandler_` like\r\n       * the `pointerup` and `pointermove` listeners.\r\n       *\r\n       * The reason for this is the following: `TouchSource.vacuumTouches_()`\r\n       * issues `pointercancel` events, when there was no `touchend` for a\r\n       * `touchstart`. Now, let's say a first `touchstart` is registered on\r\n       * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\r\n       * But `documentPointerEventHandler_` doesn't know about the first\r\n       * `touchstart`. If there is no `touchend` for the `touchstart`, we can\r\n       * only receive a `touchcancel` from `pointerEventHandler_`, because it is\r\n       * only registered there.\r\n       */\n      listen(this.element_, MapBrowserEventType.POINTERCANCEL, this.handlePointerUp_, this));\n    }\n  };\n  /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */\n\n\n  MapBrowserEventHandler.prototype.handlePointerMove_ = function (pointerEvent) {\n    // Between pointerdown and pointerup, pointermove events are triggered.\n    // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n    // moved a significant distance.\n    if (this.isMoving_(pointerEvent)) {\n      this.dragging_ = true;\n      var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent, this.dragging_);\n      this.dispatchEvent(newEvent);\n    }\n  };\n  /**\r\n   * Wrap and relay a pointer event.  Note that this requires that the type\r\n   * string for the MapBrowserPointerEvent matches the PointerEvent type.\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */\n\n\n  MapBrowserEventHandler.prototype.relayEvent_ = function (pointerEvent) {\n    var dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n    this.dispatchEvent(new MapBrowserPointerEvent(pointerEvent.type, this.map_, pointerEvent, dragging));\n  };\n  /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @return {boolean} Is moving.\r\n   * @private\r\n   */\n\n\n  MapBrowserEventHandler.prototype.isMoving_ = function (pointerEvent) {\n    return this.dragging_ || Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ || Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  MapBrowserEventHandler.prototype.disposeInternal = function () {\n    if (this.relayedListenerKey_) {\n      unlistenByKey(this.relayedListenerKey_);\n      this.relayedListenerKey_ = null;\n    }\n\n    if (this.pointerdownListenerKey_) {\n      unlistenByKey(this.pointerdownListenerKey_);\n      this.pointerdownListenerKey_ = null;\n    }\n\n    this.dragListenerKeys_.forEach(unlistenByKey);\n    this.dragListenerKeys_.length = 0;\n    this.element_ = null;\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return MapBrowserEventHandler;\n}(EventTarget);\n\nexport default MapBrowserEventHandler;","map":null,"metadata":{},"sourceType":"module"}