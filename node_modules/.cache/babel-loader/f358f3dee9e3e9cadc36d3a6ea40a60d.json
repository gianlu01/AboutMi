{"ast":null,"code":"const xtend = require('xtend');\n\nconst Constants = require('./constants');\n\nconst classTypes = ['mode', 'feature', 'mouse'];\n\nmodule.exports = function (ctx) {\n  const buttonElements = {};\n  let activeButton = null;\n  let currentMapClasses = {\n    mode: null,\n    // e.g. mode-direct_select\n    feature: null,\n    // e.g. feature-vertex\n    mouse: null // e.g. mouse-move\n\n  };\n  let nextMapClasses = {\n    mode: null,\n    feature: null,\n    mouse: null\n  };\n\n  function clearMapClasses() {\n    queueMapClasses({\n      mode: null,\n      feature: null,\n      mouse: null\n    });\n    updateMapClasses();\n  }\n\n  function queueMapClasses(options) {\n    nextMapClasses = xtend(nextMapClasses, options);\n  }\n\n  function updateMapClasses() {\n    if (!ctx.container) return;\n    const classesToRemove = [];\n    const classesToAdd = [];\n    classTypes.forEach(type => {\n      if (nextMapClasses[type] === currentMapClasses[type]) return;\n      classesToRemove.push(`${type}-${currentMapClasses[type]}`);\n\n      if (nextMapClasses[type] !== null) {\n        classesToAdd.push(`${type}-${nextMapClasses[type]}`);\n      }\n    });\n\n    if (classesToRemove.length > 0) {\n      ctx.container.classList.remove.apply(ctx.container.classList, classesToRemove);\n    }\n\n    if (classesToAdd.length > 0) {\n      ctx.container.classList.add.apply(ctx.container.classList, classesToAdd);\n    }\n\n    currentMapClasses = xtend(currentMapClasses, nextMapClasses);\n  }\n\n  function createControlButton(id, options = {}) {\n    const button = document.createElement('button');\n    button.className = `${Constants.classes.CONTROL_BUTTON} ${options.className}`;\n    button.setAttribute('title', options.title);\n    options.container.appendChild(button);\n    button.addEventListener('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      const clickedButton = e.target;\n\n      if (clickedButton === activeButton) {\n        deactivateButtons();\n        return;\n      }\n\n      setActiveButton(id);\n      options.onActivate();\n    }, true);\n    return button;\n  }\n\n  function deactivateButtons() {\n    if (!activeButton) return;\n    activeButton.classList.remove(Constants.classes.ACTIVE_BUTTON);\n    activeButton = null;\n  }\n\n  function setActiveButton(id) {\n    deactivateButtons();\n    const button = buttonElements[id];\n    if (!button) return;\n\n    if (button && id !== 'trash') {\n      button.classList.add(Constants.classes.ACTIVE_BUTTON);\n      activeButton = button;\n    }\n  }\n\n  function addButtons() {\n    const controls = ctx.options.controls;\n    const controlGroup = document.createElement('div');\n    controlGroup.className = `${Constants.classes.CONTROL_GROUP} ${Constants.classes.CONTROL_BASE}`;\n    if (!controls) return controlGroup;\n\n    if (controls[Constants.types.LINE]) {\n      buttonElements[Constants.types.LINE] = createControlButton(Constants.types.LINE, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_LINE,\n        title: `LineString tool ${ctx.options.keybindings ? '(l)' : ''}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_LINE_STRING)\n      });\n    }\n\n    if (controls[Constants.types.POLYGON]) {\n      buttonElements[Constants.types.POLYGON] = createControlButton(Constants.types.POLYGON, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_POLYGON,\n        title: `Polygon tool ${ctx.options.keybindings ? '(p)' : ''}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_POLYGON)\n      });\n    }\n\n    if (controls[Constants.types.POINT]) {\n      buttonElements[Constants.types.POINT] = createControlButton(Constants.types.POINT, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_POINT,\n        title: `Marker tool ${ctx.options.keybindings ? '(m)' : ''}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_POINT)\n      });\n    }\n\n    if (controls.trash) {\n      buttonElements.trash = createControlButton('trash', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_TRASH,\n        title: 'Delete',\n        onActivate: () => {\n          ctx.events.trash();\n        }\n      });\n    }\n\n    if (controls.combine_features) {\n      buttonElements.combine_features = createControlButton('combineFeatures', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_COMBINE_FEATURES,\n        title: 'Combine',\n        onActivate: () => {\n          ctx.events.combineFeatures();\n        }\n      });\n    }\n\n    if (controls.uncombine_features) {\n      buttonElements.uncombine_features = createControlButton('uncombineFeatures', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_UNCOMBINE_FEATURES,\n        title: 'Uncombine',\n        onActivate: () => {\n          ctx.events.uncombineFeatures();\n        }\n      });\n    }\n\n    return controlGroup;\n  }\n\n  function removeButtons() {\n    Object.keys(buttonElements).forEach(buttonId => {\n      const button = buttonElements[buttonId];\n\n      if (button.parentNode) {\n        button.parentNode.removeChild(button);\n      }\n\n      delete buttonElements[buttonId];\n    });\n  }\n\n  return {\n    setActiveButton,\n    queueMapClasses,\n    updateMapClasses,\n    clearMapClasses,\n    addButtons,\n    removeButtons\n  };\n};","map":{"version":3,"sources":["C:/Users/michele/Desktop/IT/Code/react/aboutmi/node_modules/@mapbox/mapbox-gl-draw/src/ui.js"],"names":["xtend","require","Constants","classTypes","module","exports","ctx","buttonElements","activeButton","currentMapClasses","mode","feature","mouse","nextMapClasses","clearMapClasses","queueMapClasses","updateMapClasses","options","container","classesToRemove","classesToAdd","forEach","type","push","length","classList","remove","apply","add","createControlButton","id","button","document","createElement","className","classes","CONTROL_BUTTON","setAttribute","title","appendChild","addEventListener","e","preventDefault","stopPropagation","clickedButton","target","deactivateButtons","setActiveButton","onActivate","ACTIVE_BUTTON","addButtons","controls","controlGroup","CONTROL_GROUP","CONTROL_BASE","types","LINE","CONTROL_BUTTON_LINE","keybindings","events","changeMode","modes","DRAW_LINE_STRING","POLYGON","CONTROL_BUTTON_POLYGON","DRAW_POLYGON","POINT","CONTROL_BUTTON_POINT","DRAW_POINT","trash","CONTROL_BUTTON_TRASH","combine_features","CONTROL_BUTTON_COMBINE_FEATURES","combineFeatures","uncombine_features","CONTROL_BUTTON_UNCOMBINE_FEATURES","uncombineFeatures","removeButtons","Object","keys","buttonId","parentNode","removeChild"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AAEA,MAAME,UAAU,GAAG,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,CAAnB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAc;AAG7B,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,YAAY,GAAG,IAAnB;AAEA,MAAIC,iBAAiB,GAAG;AACtBC,IAAAA,IAAI,EAAE,IADgB;AACV;AACZC,IAAAA,OAAO,EAAE,IAFa;AAEP;AACfC,IAAAA,KAAK,EAAE,IAHe,CAGV;;AAHU,GAAxB;AAMA,MAAIC,cAAc,GAAG;AACnBH,IAAAA,IAAI,EAAE,IADa;AAEnBC,IAAAA,OAAO,EAAE,IAFU;AAGnBC,IAAAA,KAAK,EAAE;AAHY,GAArB;;AAMA,WAASE,eAAT,GAA2B;AACzBC,IAAAA,eAAe,CAAC;AAACL,MAAAA,IAAI,EAAC,IAAN;AAAYC,MAAAA,OAAO,EAAC,IAApB;AAA0BC,MAAAA,KAAK,EAAC;AAAhC,KAAD,CAAf;AACAI,IAAAA,gBAAgB;AACjB;;AAED,WAASD,eAAT,CAAyBE,OAAzB,EAAkC;AAChCJ,IAAAA,cAAc,GAAGb,KAAK,CAACa,cAAD,EAAiBI,OAAjB,CAAtB;AACD;;AAED,WAASD,gBAAT,GAA4B;AAC1B,QAAI,CAACV,GAAG,CAACY,SAAT,EAAoB;AAEpB,UAAMC,eAAe,GAAG,EAAxB;AACA,UAAMC,YAAY,GAAG,EAArB;AAEAjB,IAAAA,UAAU,CAACkB,OAAX,CAAoBC,IAAD,IAAU;AAC3B,UAAIT,cAAc,CAACS,IAAD,CAAd,KAAyBb,iBAAiB,CAACa,IAAD,CAA9C,EAAsD;AAEtDH,MAAAA,eAAe,CAACI,IAAhB,CAAsB,GAAED,IAAK,IAAGb,iBAAiB,CAACa,IAAD,CAAO,EAAxD;;AACA,UAAIT,cAAc,CAACS,IAAD,CAAd,KAAyB,IAA7B,EAAmC;AACjCF,QAAAA,YAAY,CAACG,IAAb,CAAmB,GAAED,IAAK,IAAGT,cAAc,CAACS,IAAD,CAAO,EAAlD;AACD;AACF,KAPD;;AASA,QAAIH,eAAe,CAACK,MAAhB,GAAyB,CAA7B,EAAgC;AAC9BlB,MAAAA,GAAG,CAACY,SAAJ,CAAcO,SAAd,CAAwBC,MAAxB,CAA+BC,KAA/B,CAAqCrB,GAAG,CAACY,SAAJ,CAAcO,SAAnD,EAA8DN,eAA9D;AACD;;AAED,QAAIC,YAAY,CAACI,MAAb,GAAsB,CAA1B,EAA6B;AAC3BlB,MAAAA,GAAG,CAACY,SAAJ,CAAcO,SAAd,CAAwBG,GAAxB,CAA4BD,KAA5B,CAAkCrB,GAAG,CAACY,SAAJ,CAAcO,SAAhD,EAA2DL,YAA3D;AACD;;AAEDX,IAAAA,iBAAiB,GAAGT,KAAK,CAACS,iBAAD,EAAoBI,cAApB,CAAzB;AACD;;AAED,WAASgB,mBAAT,CAA6BC,EAA7B,EAAiCb,OAAO,GAAG,EAA3C,EAA+C;AAC7C,UAAMc,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,IAAAA,MAAM,CAACG,SAAP,GAAoB,GAAEhC,SAAS,CAACiC,OAAV,CAAkBC,cAAe,IAAGnB,OAAO,CAACiB,SAAU,EAA5E;AACAH,IAAAA,MAAM,CAACM,YAAP,CAAoB,OAApB,EAA6BpB,OAAO,CAACqB,KAArC;AACArB,IAAAA,OAAO,CAACC,SAAR,CAAkBqB,WAAlB,CAA8BR,MAA9B;AAEAA,IAAAA,MAAM,CAACS,gBAAP,CAAwB,OAAxB,EAAkCC,CAAD,IAAO;AACtCA,MAAAA,CAAC,CAACC,cAAF;AACAD,MAAAA,CAAC,CAACE,eAAF;AAEA,YAAMC,aAAa,GAAGH,CAAC,CAACI,MAAxB;;AACA,UAAID,aAAa,KAAKpC,YAAtB,EAAoC;AAClCsC,QAAAA,iBAAiB;AACjB;AACD;;AAEDC,MAAAA,eAAe,CAACjB,EAAD,CAAf;AACAb,MAAAA,OAAO,CAAC+B,UAAR;AACD,KAZD,EAYG,IAZH;AAcA,WAAOjB,MAAP;AACD;;AAED,WAASe,iBAAT,GAA6B;AAC3B,QAAI,CAACtC,YAAL,EAAmB;AACnBA,IAAAA,YAAY,CAACiB,SAAb,CAAuBC,MAAvB,CAA8BxB,SAAS,CAACiC,OAAV,CAAkBc,aAAhD;AACAzC,IAAAA,YAAY,GAAG,IAAf;AACD;;AAED,WAASuC,eAAT,CAAyBjB,EAAzB,EAA6B;AAC3BgB,IAAAA,iBAAiB;AAEjB,UAAMf,MAAM,GAAGxB,cAAc,CAACuB,EAAD,CAA7B;AACA,QAAI,CAACC,MAAL,EAAa;;AAEb,QAAIA,MAAM,IAAID,EAAE,KAAK,OAArB,EAA8B;AAC5BC,MAAAA,MAAM,CAACN,SAAP,CAAiBG,GAAjB,CAAqB1B,SAAS,CAACiC,OAAV,CAAkBc,aAAvC;AACAzC,MAAAA,YAAY,GAAGuB,MAAf;AACD;AACF;;AAED,WAASmB,UAAT,GAAsB;AACpB,UAAMC,QAAQ,GAAG7C,GAAG,CAACW,OAAJ,CAAYkC,QAA7B;AACA,UAAMC,YAAY,GAAGpB,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAArB;AACAmB,IAAAA,YAAY,CAAClB,SAAb,GAA0B,GAAEhC,SAAS,CAACiC,OAAV,CAAkBkB,aAAc,IAAGnD,SAAS,CAACiC,OAAV,CAAkBmB,YAAa,EAA9F;AAEA,QAAI,CAACH,QAAL,EAAe,OAAOC,YAAP;;AAEf,QAAID,QAAQ,CAACjD,SAAS,CAACqD,KAAV,CAAgBC,IAAjB,CAAZ,EAAoC;AAClCjD,MAAAA,cAAc,CAACL,SAAS,CAACqD,KAAV,CAAgBC,IAAjB,CAAd,GAAuC3B,mBAAmB,CAAC3B,SAAS,CAACqD,KAAV,CAAgBC,IAAjB,EAAuB;AAC/EtC,QAAAA,SAAS,EAAEkC,YADoE;AAE/ElB,QAAAA,SAAS,EAAEhC,SAAS,CAACiC,OAAV,CAAkBsB,mBAFkD;AAG/EnB,QAAAA,KAAK,EAAG,mBAAkBhC,GAAG,CAACW,OAAJ,CAAYyC,WAAZ,GAA0B,KAA1B,GAAkC,EAAG,EAHgB;AAI/EV,QAAAA,UAAU,EAAE,MAAM1C,GAAG,CAACqD,MAAJ,CAAWC,UAAX,CAAsB1D,SAAS,CAAC2D,KAAV,CAAgBC,gBAAtC;AAJ6D,OAAvB,CAA1D;AAMD;;AAED,QAAIX,QAAQ,CAACjD,SAAS,CAACqD,KAAV,CAAgBQ,OAAjB,CAAZ,EAAuC;AACrCxD,MAAAA,cAAc,CAACL,SAAS,CAACqD,KAAV,CAAgBQ,OAAjB,CAAd,GAA0ClC,mBAAmB,CAAC3B,SAAS,CAACqD,KAAV,CAAgBQ,OAAjB,EAA0B;AACrF7C,QAAAA,SAAS,EAAEkC,YAD0E;AAErFlB,QAAAA,SAAS,EAAEhC,SAAS,CAACiC,OAAV,CAAkB6B,sBAFwD;AAGrF1B,QAAAA,KAAK,EAAG,gBAAehC,GAAG,CAACW,OAAJ,CAAYyC,WAAZ,GAA0B,KAA1B,GAAkC,EAAG,EAHyB;AAIrFV,QAAAA,UAAU,EAAE,MAAM1C,GAAG,CAACqD,MAAJ,CAAWC,UAAX,CAAsB1D,SAAS,CAAC2D,KAAV,CAAgBI,YAAtC;AAJmE,OAA1B,CAA7D;AAMD;;AAED,QAAId,QAAQ,CAACjD,SAAS,CAACqD,KAAV,CAAgBW,KAAjB,CAAZ,EAAqC;AACnC3D,MAAAA,cAAc,CAACL,SAAS,CAACqD,KAAV,CAAgBW,KAAjB,CAAd,GAAwCrC,mBAAmB,CAAC3B,SAAS,CAACqD,KAAV,CAAgBW,KAAjB,EAAwB;AACjFhD,QAAAA,SAAS,EAAEkC,YADsE;AAEjFlB,QAAAA,SAAS,EAAEhC,SAAS,CAACiC,OAAV,CAAkBgC,oBAFoD;AAGjF7B,QAAAA,KAAK,EAAG,eAAchC,GAAG,CAACW,OAAJ,CAAYyC,WAAZ,GAA0B,KAA1B,GAAkC,EAAG,EAHsB;AAIjFV,QAAAA,UAAU,EAAE,MAAM1C,GAAG,CAACqD,MAAJ,CAAWC,UAAX,CAAsB1D,SAAS,CAAC2D,KAAV,CAAgBO,UAAtC;AAJ+D,OAAxB,CAA3D;AAMD;;AAED,QAAIjB,QAAQ,CAACkB,KAAb,EAAoB;AAClB9D,MAAAA,cAAc,CAAC8D,KAAf,GAAuBxC,mBAAmB,CAAC,OAAD,EAAU;AAClDX,QAAAA,SAAS,EAAEkC,YADuC;AAElDlB,QAAAA,SAAS,EAAEhC,SAAS,CAACiC,OAAV,CAAkBmC,oBAFqB;AAGlDhC,QAAAA,KAAK,EAAE,QAH2C;AAIlDU,QAAAA,UAAU,EAAE,MAAM;AAChB1C,UAAAA,GAAG,CAACqD,MAAJ,CAAWU,KAAX;AACD;AANiD,OAAV,CAA1C;AAQD;;AAED,QAAIlB,QAAQ,CAACoB,gBAAb,EAA+B;AAC7BhE,MAAAA,cAAc,CAACgE,gBAAf,GAAkC1C,mBAAmB,CAAC,iBAAD,EAAoB;AACvEX,QAAAA,SAAS,EAAEkC,YAD4D;AAEvElB,QAAAA,SAAS,EAAEhC,SAAS,CAACiC,OAAV,CAAkBqC,+BAF0C;AAGvElC,QAAAA,KAAK,EAAE,SAHgE;AAIvEU,QAAAA,UAAU,EAAE,MAAM;AAChB1C,UAAAA,GAAG,CAACqD,MAAJ,CAAWc,eAAX;AACD;AANsE,OAApB,CAArD;AAQD;;AAED,QAAItB,QAAQ,CAACuB,kBAAb,EAAiC;AAC/BnE,MAAAA,cAAc,CAACmE,kBAAf,GAAoC7C,mBAAmB,CAAC,mBAAD,EAAsB;AAC3EX,QAAAA,SAAS,EAAEkC,YADgE;AAE3ElB,QAAAA,SAAS,EAAEhC,SAAS,CAACiC,OAAV,CAAkBwC,iCAF8C;AAG3ErC,QAAAA,KAAK,EAAE,WAHoE;AAI3EU,QAAAA,UAAU,EAAE,MAAM;AAChB1C,UAAAA,GAAG,CAACqD,MAAJ,CAAWiB,iBAAX;AACD;AAN0E,OAAtB,CAAvD;AAQD;;AAED,WAAOxB,YAAP;AACD;;AAED,WAASyB,aAAT,GAAyB;AACvBC,IAAAA,MAAM,CAACC,IAAP,CAAYxE,cAAZ,EAA4Bc,OAA5B,CAAoC2D,QAAQ,IAAI;AAC9C,YAAMjD,MAAM,GAAGxB,cAAc,CAACyE,QAAD,CAA7B;;AACA,UAAIjD,MAAM,CAACkD,UAAX,EAAuB;AACrBlD,QAAAA,MAAM,CAACkD,UAAP,CAAkBC,WAAlB,CAA8BnD,MAA9B;AACD;;AACD,aAAOxB,cAAc,CAACyE,QAAD,CAArB;AACD,KAND;AAOD;;AAED,SAAO;AACLjC,IAAAA,eADK;AAELhC,IAAAA,eAFK;AAGLC,IAAAA,gBAHK;AAILF,IAAAA,eAJK;AAKLoC,IAAAA,UALK;AAML2B,IAAAA;AANK,GAAP;AAQD,CAtLD","sourcesContent":["const xtend = require('xtend');\r\nconst Constants = require('./constants');\r\n\r\nconst classTypes = ['mode', 'feature', 'mouse'];\r\n\r\nmodule.exports = function(ctx) {\r\n\r\n\r\n  const buttonElements = {};\r\n  let activeButton = null;\r\n\r\n  let currentMapClasses = {\r\n    mode: null, // e.g. mode-direct_select\r\n    feature: null, // e.g. feature-vertex\r\n    mouse: null // e.g. mouse-move\r\n  };\r\n\r\n  let nextMapClasses = {\r\n    mode: null,\r\n    feature: null,\r\n    mouse: null\r\n  };\r\n\r\n  function clearMapClasses() {\r\n    queueMapClasses({mode:null, feature:null, mouse:null});\r\n    updateMapClasses();\r\n  }\r\n\r\n  function queueMapClasses(options) {\r\n    nextMapClasses = xtend(nextMapClasses, options);\r\n  }\r\n\r\n  function updateMapClasses() {\r\n    if (!ctx.container) return;\r\n\r\n    const classesToRemove = [];\r\n    const classesToAdd = [];\r\n\r\n    classTypes.forEach((type) => {\r\n      if (nextMapClasses[type] === currentMapClasses[type]) return;\r\n\r\n      classesToRemove.push(`${type}-${currentMapClasses[type]}`);\r\n      if (nextMapClasses[type] !== null) {\r\n        classesToAdd.push(`${type}-${nextMapClasses[type]}`);\r\n      }\r\n    });\r\n\r\n    if (classesToRemove.length > 0) {\r\n      ctx.container.classList.remove.apply(ctx.container.classList, classesToRemove);\r\n    }\r\n\r\n    if (classesToAdd.length > 0) {\r\n      ctx.container.classList.add.apply(ctx.container.classList, classesToAdd);\r\n    }\r\n\r\n    currentMapClasses = xtend(currentMapClasses, nextMapClasses);\r\n  }\r\n\r\n  function createControlButton(id, options = {}) {\r\n    const button = document.createElement('button');\r\n    button.className = `${Constants.classes.CONTROL_BUTTON} ${options.className}`;\r\n    button.setAttribute('title', options.title);\r\n    options.container.appendChild(button);\r\n\r\n    button.addEventListener('click', (e) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      const clickedButton = e.target;\r\n      if (clickedButton === activeButton) {\r\n        deactivateButtons();\r\n        return;\r\n      }\r\n\r\n      setActiveButton(id);\r\n      options.onActivate();\r\n    }, true);\r\n\r\n    return button;\r\n  }\r\n\r\n  function deactivateButtons() {\r\n    if (!activeButton) return;\r\n    activeButton.classList.remove(Constants.classes.ACTIVE_BUTTON);\r\n    activeButton = null;\r\n  }\r\n\r\n  function setActiveButton(id) {\r\n    deactivateButtons();\r\n\r\n    const button = buttonElements[id];\r\n    if (!button) return;\r\n\r\n    if (button && id !== 'trash') {\r\n      button.classList.add(Constants.classes.ACTIVE_BUTTON);\r\n      activeButton = button;\r\n    }\r\n  }\r\n\r\n  function addButtons() {\r\n    const controls = ctx.options.controls;\r\n    const controlGroup = document.createElement('div');\r\n    controlGroup.className = `${Constants.classes.CONTROL_GROUP} ${Constants.classes.CONTROL_BASE}`;\r\n\r\n    if (!controls) return controlGroup;\r\n\r\n    if (controls[Constants.types.LINE]) {\r\n      buttonElements[Constants.types.LINE] = createControlButton(Constants.types.LINE, {\r\n        container: controlGroup,\r\n        className: Constants.classes.CONTROL_BUTTON_LINE,\r\n        title: `LineString tool ${ctx.options.keybindings ? '(l)' : ''}`,\r\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_LINE_STRING)\r\n      });\r\n    }\r\n\r\n    if (controls[Constants.types.POLYGON]) {\r\n      buttonElements[Constants.types.POLYGON] = createControlButton(Constants.types.POLYGON, {\r\n        container: controlGroup,\r\n        className: Constants.classes.CONTROL_BUTTON_POLYGON,\r\n        title: `Polygon tool ${ctx.options.keybindings ? '(p)' : ''}`,\r\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_POLYGON)\r\n      });\r\n    }\r\n\r\n    if (controls[Constants.types.POINT]) {\r\n      buttonElements[Constants.types.POINT] = createControlButton(Constants.types.POINT, {\r\n        container: controlGroup,\r\n        className: Constants.classes.CONTROL_BUTTON_POINT,\r\n        title: `Marker tool ${ctx.options.keybindings ? '(m)' : ''}`,\r\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_POINT)\r\n      });\r\n    }\r\n\r\n    if (controls.trash) {\r\n      buttonElements.trash = createControlButton('trash', {\r\n        container: controlGroup,\r\n        className: Constants.classes.CONTROL_BUTTON_TRASH,\r\n        title: 'Delete',\r\n        onActivate: () => {\r\n          ctx.events.trash();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (controls.combine_features) {\r\n      buttonElements.combine_features = createControlButton('combineFeatures', {\r\n        container: controlGroup,\r\n        className: Constants.classes.CONTROL_BUTTON_COMBINE_FEATURES,\r\n        title: 'Combine',\r\n        onActivate: () => {\r\n          ctx.events.combineFeatures();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (controls.uncombine_features) {\r\n      buttonElements.uncombine_features = createControlButton('uncombineFeatures', {\r\n        container: controlGroup,\r\n        className: Constants.classes.CONTROL_BUTTON_UNCOMBINE_FEATURES,\r\n        title: 'Uncombine',\r\n        onActivate: () => {\r\n          ctx.events.uncombineFeatures();\r\n        }\r\n      });\r\n    }\r\n\r\n    return controlGroup;\r\n  }\r\n\r\n  function removeButtons() {\r\n    Object.keys(buttonElements).forEach(buttonId => {\r\n      const button = buttonElements[buttonId];\r\n      if (button.parentNode) {\r\n        button.parentNode.removeChild(button);\r\n      }\r\n      delete buttonElements[buttonId];\r\n    });\r\n  }\r\n\r\n  return {\r\n    setActiveButton,\r\n    queueMapClasses,\r\n    updateMapClasses,\r\n    clearMapClasses,\r\n    addButtons,\r\n    removeButtons\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}