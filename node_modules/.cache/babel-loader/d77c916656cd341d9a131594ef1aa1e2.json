{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/layer/Base\r\n */\n\n\nimport { abstract } from '../util.js';\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport { clamp } from '../math.js';\nimport { assign } from '../obj.js';\nimport { assert } from '../asserts.js';\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n */\n\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in\r\n * the options is set as a {@link module:ol/Object} property on the layer object, so\r\n * is observable, and has get/set accessors.\r\n *\r\n * @api\r\n */\n\nvar BaseLayer =\n/** @class */\nfunction (_super) {\n  __extends(BaseLayer, _super);\n  /**\r\n   * @param {Options} options Layer options.\r\n   */\n\n\n  function BaseLayer(options) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * @type {Object<string, *>}\r\n     */\n\n\n    var properties = assign({}, options);\n    properties[LayerProperty.OPACITY] = options.opacity !== undefined ? options.opacity : 1;\n    assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number\n\n    properties[LayerProperty.VISIBLE] = options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;\n    properties[LayerProperty.MIN_ZOOM] = options.minZoom !== undefined ? options.minZoom : -Infinity;\n    properties[LayerProperty.MAX_ZOOM] = options.maxZoom !== undefined ? options.maxZoom : Infinity;\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\n\n    _this.className_ = properties.className !== undefined ? options.className : 'ol-layer';\n    delete properties.className;\n\n    _this.setProperties(properties);\n    /**\r\n     * @type {import(\"./Layer.js\").State}\r\n     * @private\r\n     */\n\n\n    _this.state_ = null;\n    return _this;\n  }\n  /**\r\n   * @return {string} CSS class name.\r\n   */\n\n\n  BaseLayer.prototype.getClassName = function () {\n    return this.className_;\n  };\n  /**\r\n   * This method is not meant to be called by layers or layer renderers because the state\r\n   * is incorrect if the layer is included in a layer group.\r\n   *\r\n   * @param {boolean=} opt_managed Layer is managed.\r\n   * @return {import(\"./Layer.js\").State} Layer state.\r\n   */\n\n\n  BaseLayer.prototype.getLayerState = function (opt_managed) {\n    /** @type {import(\"./Layer.js\").State} */\n    var state = this.state_ ||\n    /** @type {?} */\n    {\n      layer: this,\n      managed: opt_managed === undefined ? true : opt_managed\n    };\n    var zIndex = this.getZIndex();\n    state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n    state.sourceState = this.getSourceState();\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = zIndex !== undefined ? zIndex : state.managed === false ? Infinity : 0;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    state.minZoom = this.getMinZoom();\n    state.maxZoom = this.getMaxZoom();\n    this.state_ = state;\n    return state;\n  };\n  /**\r\n   * @abstract\r\n   * @param {Array<import(\"./Layer.js\").default>=} opt_array Array of layers (to be\r\n   *     modified in place).\r\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\r\n   */\n\n\n  BaseLayer.prototype.getLayersArray = function (opt_array) {\n    return abstract();\n  };\n  /**\r\n   * @abstract\r\n   * @param {Array<import(\"./Layer.js\").State>=} opt_states Optional list of layer\r\n   *     states (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\r\n   */\n\n\n  BaseLayer.prototype.getLayerStatesArray = function (opt_states) {\n    return abstract();\n  };\n  /**\r\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\r\n   * will be visible regardless of extent.\r\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.getExtent = function () {\n    return (\n      /** @type {import(\"../extent.js\").Extent|undefined} */\n      this.get(LayerProperty.EXTENT)\n    );\n  };\n  /**\r\n   * Return the maximum resolution of the layer.\r\n   * @return {number} The maximum resolution of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.getMaxResolution = function () {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.MAX_RESOLUTION)\n    );\n  };\n  /**\r\n   * Return the minimum resolution of the layer.\r\n   * @return {number} The minimum resolution of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.getMinResolution = function () {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.MIN_RESOLUTION)\n    );\n  };\n  /**\r\n   * Return the minimum zoom level of the layer.\r\n   * @return {number} The minimum zoom level of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.getMinZoom = function () {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.MIN_ZOOM)\n    );\n  };\n  /**\r\n   * Return the maximum zoom level of the layer.\r\n   * @return {number} The maximum zoom level of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.getMaxZoom = function () {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.MAX_ZOOM)\n    );\n  };\n  /**\r\n   * Return the opacity of the layer (between 0 and 1).\r\n   * @return {number} The opacity of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.getOpacity = function () {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.OPACITY)\n    );\n  };\n  /**\r\n   * @abstract\r\n   * @return {import(\"../source/State.js\").default} Source state.\r\n   */\n\n\n  BaseLayer.prototype.getSourceState = function () {\n    return abstract();\n  };\n  /**\r\n   * Return the visibility of the layer (`true` or `false`).\r\n   * @return {boolean} The visibility of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.getVisible = function () {\n    return (\n      /** @type {boolean} */\n      this.get(LayerProperty.VISIBLE)\n    );\n  };\n  /**\r\n   * Return the Z-index of the layer, which is used to order layers before\r\n   * rendering. The default Z-index is 0.\r\n   * @return {number} The Z-index of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.getZIndex = function () {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.Z_INDEX)\n    );\n  };\n  /**\r\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\r\n   * will be visible at all extents.\r\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.setExtent = function (extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  };\n  /**\r\n   * Set the maximum resolution at which the layer is visible.\r\n   * @param {number} maxResolution The maximum resolution of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.setMaxResolution = function (maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  };\n  /**\r\n   * Set the minimum resolution at which the layer is visible.\r\n   * @param {number} minResolution The minimum resolution of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.setMinResolution = function (minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  };\n  /**\r\n   * Set the maximum zoom (exclusive) at which the layer is visible.\r\n   * Note that the zoom levels for layer visibility are based on the\r\n   * view zoom level, which may be different from a tile source zoom level.\r\n   * @param {number} maxZoom The maximum zoom of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.setMaxZoom = function (maxZoom) {\n    this.set(LayerProperty.MAX_ZOOM, maxZoom);\n  };\n  /**\r\n   * Set the minimum zoom (inclusive) at which the layer is visible.\r\n   * Note that the zoom levels for layer visibility are based on the\r\n   * view zoom level, which may be different from a tile source zoom level.\r\n   * @param {number} minZoom The minimum zoom of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.setMinZoom = function (minZoom) {\n    this.set(LayerProperty.MIN_ZOOM, minZoom);\n  };\n  /**\r\n   * Set the opacity of the layer, allowed values range from 0 to 1.\r\n   * @param {number} opacity The opacity of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.setOpacity = function (opacity) {\n    assert(typeof opacity === 'number', 64); // Layer opacity must be a number\n\n    this.set(LayerProperty.OPACITY, opacity);\n  };\n  /**\r\n   * Set the visibility of the layer (`true` or `false`).\r\n   * @param {boolean} visible The visibility of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.setVisible = function (visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  };\n  /**\r\n   * Set Z-index of the layer, which is used to order layers before rendering.\r\n   * The default Z-index is 0.\r\n   * @param {number} zindex The z-index of the layer.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  BaseLayer.prototype.setZIndex = function (zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  BaseLayer.prototype.disposeInternal = function () {\n    if (this.state_) {\n      this.state_.layer = null;\n      this.state_ = null;\n    }\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return BaseLayer;\n}(BaseObject);\n\nexport default BaseLayer;","map":null,"metadata":{},"sourceType":"module"}