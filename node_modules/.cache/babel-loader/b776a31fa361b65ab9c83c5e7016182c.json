{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { getUid } from '../../util.js';\nimport LRUCache from '../../structs/LRUCache.js';\n/**\n * @module ol/render/canvas/LabelCache\n */\n\n/**\n * @classdesc\n * Cache of pre-rendered labels.\n */\n\nvar LabelCache =\n/** @class */\nfunction (_super) {\n  __extends(LabelCache, _super);\n  /**\n   * @inheritDoc\n   */\n\n\n  function LabelCache(opt_highWaterMark) {\n    var _this = _super.call(this, opt_highWaterMark) || this;\n\n    _this.consumers = {};\n    return _this;\n  }\n\n  LabelCache.prototype.clear = function () {\n    this.consumers = {};\n\n    _super.prototype.clear.call(this);\n  };\n  /**\n   * @override\n   * @param {string} key Label key.\n   * @param {import(\"./Executor.js\").default} consumer Label consumer.\n   * @return {HTMLCanvasElement} Label.\n   */\n\n\n  LabelCache.prototype.get = function (key, consumer) {\n    var canvas = _super.prototype.get.call(this, key);\n\n    var consumerId = getUid(consumer);\n\n    if (!(consumerId in this.consumers)) {\n      this.consumers[consumerId] = {};\n    }\n\n    this.consumers[consumerId][key] = true;\n    return canvas;\n  };\n\n  LabelCache.prototype.prune = function () {\n    outer: while (this.canExpireCache()) {\n      var key = this.peekLastKey();\n\n      for (var consumerId in this.consumers) {\n        if (key in this.consumers[consumerId]) {\n          break outer;\n        }\n      }\n\n      var canvas = this.pop();\n      canvas.width = 0;\n      canvas.height = 0;\n\n      for (var consumerId in this.consumers) {\n        delete this.consumers[consumerId][key];\n      }\n    }\n  };\n  /**\n   * @param {import(\"./Executor.js\").default} consumer Label consumer.\n   */\n\n\n  LabelCache.prototype.release = function (consumer) {\n    delete this.consumers[getUid(consumer)];\n  };\n\n  return LabelCache;\n}(LRUCache);\n\nexport default LabelCache;","map":null,"metadata":{},"sourceType":"module"}