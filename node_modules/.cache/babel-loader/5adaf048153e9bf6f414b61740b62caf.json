{"ast":null,"code":"/**\r\n * GeoJSON BBox\r\n *\r\n * @private\r\n * @typedef {[number, number, number, number]} BBox\r\n */\n\n/**\r\n * GeoJSON Id\r\n *\r\n * @private\r\n * @typedef {(number|string)} Id\r\n */\n\n/**\r\n * GeoJSON FeatureCollection\r\n *\r\n * @private\r\n * @typedef {Object} FeatureCollection\r\n * @property {string} type\r\n * @property {?Id} id\r\n * @property {?BBox} bbox\r\n * @property {Feature[]} features\r\n */\n\n/**\r\n * GeoJSON Feature\r\n *\r\n * @private\r\n * @typedef {Object} Feature\r\n * @property {string} type\r\n * @property {?Id} id\r\n * @property {?BBox} bbox\r\n * @property {*} properties\r\n * @property {Geometry} geometry\r\n */\n\n/**\r\n * GeoJSON Geometry\r\n *\r\n * @private\r\n * @typedef {Object} Geometry\r\n * @property {string} type\r\n * @property {any[]} coordinates\r\n */\n\n/**\r\n * Callback for coordEach\r\n *\r\n * @callback coordEachCallback\r\n * @param {Array<number>} currentCoord The current coordinate being processed.\r\n * @param {number} coordIndex The current index of the coordinate being processed.\r\n * Starts at index 0.\r\n * @param {number} featureIndex The current index of the feature being processed.\r\n * @param {number} featureSubIndex The current subIndex of the feature being processed.\r\n */\n\n/**\r\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\r\n *\r\n * @name coordEach\r\n * @param {(FeatureCollection|Feature|Geometry)} geojson any GeoJSON object\r\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, featureSubIndex)\r\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\r\n * @example\r\n * var features = turf.featureCollection([\r\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\r\n *   turf.point([36, 53], {\"hello\": \"world\"})\r\n * ]);\r\n *\r\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, featureSubIndex) {\r\n *   //=currentCoord\r\n *   //=coordIndex\r\n *   //=featureIndex\r\n *   //=featureSubIndex\r\n * });\r\n */\nexport function coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var featureIndex,\n      geometryIndex,\n      j,\n      k,\n      l,\n      geometry,\n      stopG,\n      coords,\n      geometryMaybeCollection,\n      wrapShrink = 0,\n      coordIndex = 0,\n      isGeometryCollection,\n      type = geojson.type,\n      isFeatureCollection = type === 'FeatureCollection',\n      isFeature = type === 'Feature',\n      stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n\n  for (featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;\n    isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n    for (geometryIndex = 0; geometryIndex < stopG; geometryIndex++) {\n      var featureSubIndex = 0;\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geometryIndex] : geometryMaybeCollection; // Handles null Geometry -- Skips this geometry\n\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n      wrapShrink = excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon') ? 1 : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n\n        case 'Point':\n          callback(coords, coordIndex, featureIndex, featureSubIndex);\n          coordIndex++;\n          featureSubIndex++;\n          break;\n\n        case 'LineString':\n        case 'MultiPoint':\n          for (j = 0; j < coords.length; j++) {\n            callback(coords[j], coordIndex, featureIndex, featureSubIndex);\n            coordIndex++;\n            if (geomType === 'MultiPoint') featureSubIndex++;\n          }\n\n          if (geomType === 'LineString') featureSubIndex++;\n          break;\n\n        case 'Polygon':\n        case 'MultiLineString':\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              callback(coords[j][k], coordIndex, featureIndex, featureSubIndex);\n              coordIndex++;\n            }\n\n            if (geomType === 'MultiLineString') featureSubIndex++;\n          }\n\n          if (geomType === 'Polygon') featureSubIndex++;\n          break;\n\n        case 'MultiPolygon':\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                callback(coords[j][k][l], coordIndex, featureIndex, featureSubIndex);\n                coordIndex++;\n              }\n            }\n\n            featureSubIndex++;\n          }\n\n          break;\n\n        case 'GeometryCollection':\n          for (j = 0; j < geometry.geometries.length; j++) {\n            coordEach(geometry.geometries[j], callback, excludeWrapCoord);\n          }\n\n          break;\n\n        default:\n          throw new Error('Unknown Geometry Type');\n      }\n    }\n  }\n}\n/**\r\n * Callback for coordReduce\r\n *\r\n * The first time the callback function is called, the values provided as arguments depend\r\n * on whether the reduce method has an initialValue argument.\r\n *\r\n * If an initialValue is provided to the reduce method:\r\n *  - The previousValue argument is initialValue.\r\n *  - The currentValue argument is the value of the first element present in the array.\r\n *\r\n * If an initialValue is not provided:\r\n *  - The previousValue argument is the value of the first element present in the array.\r\n *  - The currentValue argument is the value of the second element present in the array.\r\n *\r\n * @callback coordReduceCallback\r\n * @param {*} previousValue The accumulated value previously returned in the last invocation\r\n * of the callback, or initialValue, if supplied.\r\n * @param {Array<number>} currentCoord The current coordinate being processed.\r\n * @param {number} coordIndex The current index of the coordinate being processed.\r\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\r\n * @param {number} featureIndex The current index of the feature being processed.\r\n * @param {number} featureSubIndex The current subIndex of the feature being processed.\r\n */\n\n/**\r\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\r\n *\r\n * @name coordReduce\r\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\r\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\r\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\r\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\r\n * @returns {*} The value that results from the reduction.\r\n * @example\r\n * var features = turf.featureCollection([\r\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\r\n *   turf.point([36, 53], {\"hello\": \"world\"})\r\n * ]);\r\n *\r\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, featureSubIndex) {\r\n *   //=previousValue\r\n *   //=currentCoord\r\n *   //=coordIndex\r\n *   //=featureIndex\r\n *   //=featureSubIndex\r\n *   return currentCoord;\r\n * });\r\n */\n\nexport function coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(geojson, function (currentCoord, coordIndex, featureIndex, featureSubIndex) {\n    if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, featureSubIndex);\n  }, excludeWrapCoord);\n  return previousValue;\n}\n/**\r\n * Callback for propEach\r\n *\r\n * @callback propEachCallback\r\n * @param {Object} currentProperties The current properties being processed.\r\n * @param {number} featureIndex The index of the current element being processed in the\r\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\r\n */\n\n/**\r\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\r\n *\r\n * @name propEach\r\n * @param {(FeatureCollection|Feature)} geojson any GeoJSON object\r\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\r\n * @example\r\n * var features = turf.featureCollection([\r\n *     turf.point([26, 37], {foo: 'bar'}),\r\n *     turf.point([36, 53], {hello: 'world'})\r\n * ]);\r\n *\r\n * turf.propEach(features, function (currentProperties, featureIndex) {\r\n *   //=currentProperties\r\n *   //=featureIndex\r\n * });\r\n */\n\nexport function propEach(geojson, callback) {\n  var i;\n\n  switch (geojson.type) {\n    case 'FeatureCollection':\n      for (i = 0; i < geojson.features.length; i++) {\n        callback(geojson.features[i].properties, i);\n      }\n\n      break;\n\n    case 'Feature':\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n/**\r\n * Callback for propReduce\r\n *\r\n * The first time the callback function is called, the values provided as arguments depend\r\n * on whether the reduce method has an initialValue argument.\r\n *\r\n * If an initialValue is provided to the reduce method:\r\n *  - The previousValue argument is initialValue.\r\n *  - The currentValue argument is the value of the first element present in the array.\r\n *\r\n * If an initialValue is not provided:\r\n *  - The previousValue argument is the value of the first element present in the array.\r\n *  - The currentValue argument is the value of the second element present in the array.\r\n *\r\n * @callback propReduceCallback\r\n * @param {*} previousValue The accumulated value previously returned in the last invocation\r\n * of the callback, or initialValue, if supplied.\r\n * @param {*} currentProperties The current properties being processed.\r\n * @param {number} featureIndex The index of the current element being processed in the\r\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\r\n */\n\n/**\r\n * Reduce properties in any GeoJSON object into a single value,\r\n * similar to how Array.reduce works. However, in this case we lazily run\r\n * the reduction, so an array of all properties is unnecessary.\r\n *\r\n * @name propReduce\r\n * @param {(FeatureCollection|Feature)} geojson any GeoJSON object\r\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\r\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\r\n * @returns {*} The value that results from the reduction.\r\n * @example\r\n * var features = turf.featureCollection([\r\n *     turf.point([26, 37], {foo: 'bar'}),\r\n *     turf.point([36, 53], {hello: 'world'})\r\n * ]);\r\n *\r\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\r\n *   //=previousValue\r\n *   //=currentProperties\r\n *   //=featureIndex\r\n *   return currentProperties\r\n * });\r\n */\n\nexport function propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;else previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n/**\r\n * Callback for featureEach\r\n *\r\n * @callback featureEachCallback\r\n * @param {Feature<any>} currentFeature The current feature being processed.\r\n * @param {number} featureIndex The index of the current element being processed in the\r\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\r\n */\n\n/**\r\n * Iterate over features in any GeoJSON object, similar to\r\n * Array.forEach.\r\n *\r\n * @name featureEach\r\n * @param {(FeatureCollection|Feature|Geometry)} geojson any GeoJSON object\r\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\r\n * @example\r\n * var features = turf.featureCollection([\r\n *   turf.point([26, 37], {foo: 'bar'}),\r\n *   turf.point([36, 53], {hello: 'world'})\r\n * ]);\r\n *\r\n * turf.featureEach(features, function (currentFeature, featureIndex) {\r\n *   //=currentFeature\r\n *   //=featureIndex\r\n * });\r\n */\n\nexport function featureEach(geojson, callback) {\n  if (geojson.type === 'Feature') {\n    callback(geojson, 0);\n  } else if (geojson.type === 'FeatureCollection') {\n    for (var i = 0; i < geojson.features.length; i++) {\n      callback(geojson.features[i], i);\n    }\n  }\n}\n/**\r\n * Callback for featureReduce\r\n *\r\n * The first time the callback function is called, the values provided as arguments depend\r\n * on whether the reduce method has an initialValue argument.\r\n *\r\n * If an initialValue is provided to the reduce method:\r\n *  - The previousValue argument is initialValue.\r\n *  - The currentValue argument is the value of the first element present in the array.\r\n *\r\n * If an initialValue is not provided:\r\n *  - The previousValue argument is the value of the first element present in the array.\r\n *  - The currentValue argument is the value of the second element present in the array.\r\n *\r\n * @callback featureReduceCallback\r\n * @param {*} previousValue The accumulated value previously returned in the last invocation\r\n * of the callback, or initialValue, if supplied.\r\n * @param {Feature} currentFeature The current Feature being processed.\r\n * @param {number} featureIndex The index of the current element being processed in the\r\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\r\n */\n\n/**\r\n * Reduce features in any GeoJSON object, similar to Array.reduce().\r\n *\r\n * @name featureReduce\r\n * @param {(FeatureCollection|Feature|Geometry)} geojson any GeoJSON object\r\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\r\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\r\n * @returns {*} The value that results from the reduction.\r\n * @example\r\n * var features = turf.featureCollection([\r\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\r\n *   turf.point([36, 53], {\"hello\": \"world\"})\r\n * ]);\r\n *\r\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\r\n *   //=previousValue\r\n *   //=currentFeature\r\n *   //=featureIndex\r\n *   return currentFeature\r\n * });\r\n */\n\nexport function featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n/**\r\n * Get all coordinates from any GeoJSON object.\r\n *\r\n * @name coordAll\r\n * @param {(FeatureCollection|Feature|Geometry)} geojson any GeoJSON object\r\n * @returns {Array<Array<number>>} coordinate position array\r\n * @example\r\n * var features = turf.featureCollection([\r\n *   turf.point([26, 37], {foo: 'bar'}),\r\n *   turf.point([36, 53], {hello: 'world'})\r\n * ]);\r\n *\r\n * var coords = turf.coordAll(features);\r\n * //= [[26, 37], [36, 53]]\r\n */\n\nexport function coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n/**\r\n * Callback for geomEach\r\n *\r\n * @callback geomEachCallback\r\n * @param {Geometry} currentGeometry The current geometry being processed.\r\n * @param {number} currentIndex The index of the current element being processed in the\r\n * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\r\n * @param {number} currentProperties The current feature properties being processed.\r\n */\n\n/**\r\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\r\n *\r\n * @name geomEach\r\n * @param {(FeatureCollection|Feature|Geometry)} geojson any GeoJSON object\r\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, currentProperties)\r\n * @example\r\n * var features = turf.featureCollection([\r\n *     turf.point([26, 37], {foo: 'bar'}),\r\n *     turf.point([36, 53], {hello: 'world'})\r\n * ]);\r\n *\r\n * turf.geomEach(features, function (currentGeometry, featureIndex, currentProperties) {\r\n *   //=currentGeometry\r\n *   //=featureIndex\r\n *   //=currentProperties\r\n * });\r\n */\n\nexport function geomEach(geojson, callback) {\n  var i,\n      j,\n      g,\n      geometry,\n      stopG,\n      geometryMaybeCollection,\n      isGeometryCollection,\n      geometryProperties,\n      featureIndex = 0,\n      isFeatureCollection = geojson.type === 'FeatureCollection',\n      isFeature = geojson.type === 'Feature',\n      stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;\n    geometryProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};\n    isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection; // Handle null Geometry\n\n      if (geometry === null) {\n        callback(null, featureIndex, geometryProperties);\n        continue;\n      }\n\n      switch (geometry.type) {\n        case 'Point':\n        case 'LineString':\n        case 'MultiPoint':\n        case 'Polygon':\n        case 'MultiLineString':\n        case 'MultiPolygon':\n          {\n            callback(geometry, featureIndex, geometryProperties);\n            break;\n          }\n\n        case 'GeometryCollection':\n          {\n            for (j = 0; j < geometry.geometries.length; j++) {\n              callback(geometry.geometries[j], featureIndex, geometryProperties);\n            }\n\n            break;\n          }\n\n        default:\n          throw new Error('Unknown Geometry Type');\n      }\n    } // Only increase `featureIndex` per each feature\n\n\n    featureIndex++;\n  }\n}\n/**\r\n * Callback for geomReduce\r\n *\r\n * The first time the callback function is called, the values provided as arguments depend\r\n * on whether the reduce method has an initialValue argument.\r\n *\r\n * If an initialValue is provided to the reduce method:\r\n *  - The previousValue argument is initialValue.\r\n *  - The currentValue argument is the value of the first element present in the array.\r\n *\r\n * If an initialValue is not provided:\r\n *  - The previousValue argument is the value of the first element present in the array.\r\n *  - The currentValue argument is the value of the second element present in the array.\r\n *\r\n * @callback geomReduceCallback\r\n * @param {*} previousValue The accumulated value previously returned in the last invocation\r\n * of the callback, or initialValue, if supplied.\r\n * @param {Geometry} currentGeometry The current Feature being processed.\r\n * @param {number} currentIndex The index of the current element being processed in the\r\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\r\n * @param {Object} currentProperties The current feature properties being processed.\r\n */\n\n/**\r\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\r\n *\r\n * @name geomReduce\r\n * @param {(FeatureCollection|Feature|Geometry)} geojson any GeoJSON object\r\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, currentProperties)\r\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\r\n * @returns {*} The value that results from the reduction.\r\n * @example\r\n * var features = turf.featureCollection([\r\n *     turf.point([26, 37], {foo: 'bar'}),\r\n *     turf.point([36, 53], {hello: 'world'})\r\n * ]);\r\n *\r\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, currentProperties) {\r\n *   //=previousValue\r\n *   //=currentGeometry\r\n *   //=featureIndex\r\n *   //=currentProperties\r\n *   return currentGeometry\r\n * });\r\n */\n\nexport function geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(geojson, function (currentGeometry, currentIndex, currentProperties) {\n    if (currentIndex === 0 && initialValue === undefined) previousValue = currentGeometry;else previousValue = callback(previousValue, currentGeometry, currentIndex, currentProperties);\n  });\n  return previousValue;\n}\n/**\r\n * Callback for flattenEach\r\n *\r\n * @callback flattenEachCallback\r\n * @param {Feature} currentFeature The current flattened feature being processed.\r\n * @param {number} featureIndex The index of the current element being processed in the\r\n * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\r\n * @param {number} featureSubIndex The subindex of the current element being processed in the\r\n * array. Starts at index 0 and increases if the flattened feature was a multi-geometry.\r\n */\n\n/**\r\n * Iterate over flattened features in any GeoJSON object, similar to\r\n * Array.forEach.\r\n *\r\n * @name flattenEach\r\n * @param {(FeatureCollection|Feature|Geometry)} geojson any GeoJSON object\r\n * @param {Function} callback a method that takes (currentFeature, featureIndex, featureSubIndex)\r\n * @example\r\n * var features = turf.featureCollection([\r\n *     turf.point([26, 37], {foo: 'bar'}),\r\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\r\n * ]);\r\n *\r\n * turf.flattenEach(features, function (currentFeature, featureIndex, featureSubIndex) {\r\n *   //=currentFeature\r\n *   //=featureIndex\r\n *   //=featureSubIndex\r\n * });\r\n */\n\nexport function flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n\n    switch (type) {\n      case null:\n      case 'Point':\n      case 'LineString':\n      case 'Polygon':\n        callback(feature(geometry, properties), featureIndex, 0);\n        return;\n    }\n\n    var geomType; // Callback for multi-geometry\n\n    switch (type) {\n      case 'MultiPoint':\n        geomType = 'Point';\n        break;\n\n      case 'MultiLineString':\n        geomType = 'LineString';\n        break;\n\n      case 'MultiPolygon':\n        geomType = 'Polygon';\n        break;\n    }\n\n    geometry.coordinates.forEach(function (coordinate, featureSubIndex) {\n      var geom = {\n        type: geomType,\n        coordinates: coordinate\n      };\n      callback(feature(geom, properties), featureIndex, featureSubIndex);\n    });\n  });\n}\n/**\r\n * Callback for flattenReduce\r\n *\r\n * The first time the callback function is called, the values provided as arguments depend\r\n * on whether the reduce method has an initialValue argument.\r\n *\r\n * If an initialValue is provided to the reduce method:\r\n *  - The previousValue argument is initialValue.\r\n *  - The currentValue argument is the value of the first element present in the array.\r\n *\r\n * If an initialValue is not provided:\r\n *  - The previousValue argument is the value of the first element present in the array.\r\n *  - The currentValue argument is the value of the second element present in the array.\r\n *\r\n * @callback flattenReduceCallback\r\n * @param {*} previousValue The accumulated value previously returned in the last invocation\r\n * of the callback, or initialValue, if supplied.\r\n * @param {Feature} currentFeature The current Feature being processed.\r\n * @param {number} featureIndex The index of the current element being processed in the\r\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\r\n * @param {number} featureSubIndex The subindex of the current element being processed in the\r\n * array. Starts at index 0 and increases if the flattened feature was a multi-geometry.\r\n */\n\n/**\r\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\r\n *\r\n * @name flattenReduce\r\n * @param {(FeatureCollection|Feature|Geometry)} geojson any GeoJSON object\r\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, featureSubIndex)\r\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\r\n * @returns {*} The value that results from the reduction.\r\n * @example\r\n * var features = turf.featureCollection([\r\n *     turf.point([26, 37], {foo: 'bar'}),\r\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\r\n * ]);\r\n *\r\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, featureSubIndex) {\r\n *   //=previousValue\r\n *   //=currentFeature\r\n *   //=featureIndex\r\n *   //=featureSubIndex\r\n *   return currentFeature\r\n * });\r\n */\n\nexport function flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(geojson, function (currentFeature, featureIndex, featureSubIndex) {\n    if (featureIndex === 0 && featureSubIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex, featureSubIndex);\n  });\n  return previousValue;\n}\n/**\r\n * Callback for segmentEach\r\n *\r\n * @callback segmentEachCallback\r\n * @param {Feature<LineString>} currentSegment The current segment being processed.\r\n * @param {number} featureIndex The featureIndex currently being processed, starts at index 0.\r\n * @param {number} featureSubIndex The featureSubIndex currently being processed, starts at index 0.\r\n * @param {number} segmentIndex The segmentIndex currently being processed, starts at index 0.\r\n * @returns {void}\r\n */\n\n/**\r\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\r\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\r\n *\r\n * @param {(FeatureCollection|Feature|Geometry)} geojson any GeoJSON\r\n * @param {Function} callback a method that takes (currentSegment, featureIndex, featureSubIndex)\r\n * @returns {void}\r\n * @example\r\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\r\n *\r\n * // Iterate over GeoJSON by 2-vertex segments\r\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, featureSubIndex, segmentIndex) {\r\n *   //= currentSegment\r\n *   //= featureIndex\r\n *   //= featureSubIndex\r\n *   //= segmentIndex\r\n * });\r\n *\r\n * // Calculate the total number of segments\r\n * var total = 0;\r\n * turf.segmentEach(polygon, function () {\r\n *     total++;\r\n * });\r\n */\n\nexport function segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, featureSubIndex) {\n    var segmentIndex = 0; // Exclude null Geometries\n\n    if (!feature.geometry) return; // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n    var type = feature.geometry.type;\n    if (type === 'Point' || type === 'MultiPoint') return; // Generate 2-vertex line segments\n\n    coordReduce(feature, function (previousCoords, currentCoord) {\n      var currentSegment = lineString([previousCoords, currentCoord], feature.properties);\n      callback(currentSegment, featureIndex, featureSubIndex, segmentIndex);\n      segmentIndex++;\n      return currentCoord;\n    });\n  });\n}\n/**\r\n * Callback for segmentReduce\r\n *\r\n * The first time the callback function is called, the values provided as arguments depend\r\n * on whether the reduce method has an initialValue argument.\r\n *\r\n * If an initialValue is provided to the reduce method:\r\n *  - The previousValue argument is initialValue.\r\n *  - The currentValue argument is the value of the first element present in the array.\r\n *\r\n * If an initialValue is not provided:\r\n *  - The previousValue argument is the value of the first element present in the array.\r\n *  - The currentValue argument is the value of the second element present in the array.\r\n *\r\n * @callback segmentReduceCallback\r\n * @param {*} [previousValue] The accumulated value previously returned in the last invocation\r\n * of the callback, or initialValue, if supplied.\r\n * @param {Feature<LineString>} [currentSegment] The current segment being processed.\r\n * @param {number} featureIndex The featureIndex currently being processed, starts at index 0.\r\n * @param {number} featureSubIndex The featureSubIndex currently being processed, starts at index 0.\r\n * @param {number} segmentIndex The segmentIndex currently being processed, starts at index 0.\r\n */\n\n/**\r\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\r\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\r\n *\r\n * @param {(FeatureCollection|Feature|Geometry)} geojson any GeoJSON\r\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\r\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\r\n * @returns {void}\r\n * @example\r\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\r\n *\r\n * // Iterate over GeoJSON by 2-vertex segments\r\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, featureSubIndex, segmentIndex) {\r\n *   //= previousSegment\r\n *   //= currentSegment\r\n *   //= featureIndex\r\n *   //= featureSubIndex\r\n *   //= segmentInex\r\n *   return currentSegment\r\n * });\r\n *\r\n * // Calculate the total number of segments\r\n * var initialValue = 0\r\n * var total = turf.segmentReduce(polygon, function (previousValue) {\r\n *     previousValue++;\r\n *     return previousValue;\r\n * }, initialValue);\r\n */\n\nexport function segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(geojson, function (currentSegment, featureIndex, featureSubIndex, segmentIndex) {\n    if (started === false && initialValue === undefined) previousValue = currentSegment;else previousValue = callback(previousValue, currentSegment, featureIndex, featureSubIndex, segmentIndex);\n    started = true;\n  });\n  return previousValue;\n}\n/**\r\n * Create Feature\r\n *\r\n * @private\r\n * @param {Geometry} geometry GeoJSON Geometry\r\n * @param {Object} properties Properties\r\n * @returns {Feature} GeoJSON Feature\r\n */\n\nexport function feature(geometry, properties) {\n  if (geometry === undefined) throw new Error('No geometry passed');\n  return {\n    type: 'Feature',\n    properties: properties || {},\n    geometry: geometry\n  };\n}\n/**\r\n * Create LineString\r\n *\r\n * @private\r\n * @param {Array<Array<number>>} coordinates Line Coordinates\r\n * @param {Object} properties Properties\r\n * @returns {Feature<LineString>} GeoJSON LineString Feature\r\n */\n\nexport function lineString(coordinates, properties) {\n  if (!coordinates) throw new Error('No coordinates passed');\n  if (coordinates.length < 2) throw new Error('Coordinates must be an array of two or more positions');\n  return {\n    type: 'Feature',\n    properties: properties || {},\n    geometry: {\n      type: 'LineString',\n      coordinates: coordinates\n    }\n  };\n}\n/**\r\n * Callback for lineEach\r\n *\r\n * @callback lineEachCallback\r\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\r\n * @param {number} lineIndex The index of the current element being processed in the array, starts at index 0.\r\n * @param {number} lineSubIndex The sub-index of the current line being processed at index 0\r\n */\n\n/**\r\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\r\n * similar to Array.forEach.\r\n *\r\n * @name lineEach\r\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\r\n * @param {Function} callback a method that takes (currentLine, lineIndex, lineSubIndex)\r\n * @example\r\n * var mtLn = turf.multiLineString([\r\n *   turf.lineString([[26, 37], [35, 45]]),\r\n *   turf.lineString([[36, 53], [38, 50], [41, 55]])\r\n * ]);\r\n *\r\n * turf.lineEach(mtLn, function (currentLine, lineIndex) {\r\n *   //=currentLine\r\n *   //=lineIndex\r\n * });\r\n */\n\nexport function lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error('geojson is required');\n  var type = geojson.geometry ? geojson.geometry.type : geojson.type;\n  if (!type) throw new Error('invalid geojson');\n  if (type === 'FeatureCollection') throw new Error('FeatureCollection is not supported');\n  if (type === 'GeometryCollection') throw new Error('GeometryCollection is not supported');\n  var coordinates = geojson.geometry ? geojson.geometry.coordinates : geojson.coordinates;\n  if (!coordinates) throw new Error('geojson must contain coordinates');\n\n  switch (type) {\n    case 'LineString':\n      callback(coordinates, 0, 0);\n      return;\n\n    case 'Polygon':\n    case 'MultiLineString':\n      var subIndex = 0;\n\n      for (var line = 0; line < coordinates.length; line++) {\n        if (type === 'MultiLineString') subIndex = line;\n        callback(coordinates[line], line, subIndex);\n      }\n\n      return;\n\n    case 'MultiPolygon':\n      for (var multi = 0; multi < coordinates.length; multi++) {\n        for (var ring = 0; ring < coordinates[multi].length; ring++) {\n          callback(coordinates[multi][ring], ring, multi);\n        }\n      }\n\n      return;\n\n    default:\n      throw new Error(type + ' geometry not supported');\n  }\n}\n/**\r\n * Callback for lineReduce\r\n *\r\n * The first time the callback function is called, the values provided as arguments depend\r\n * on whether the reduce method has an initialValue argument.\r\n *\r\n * If an initialValue is provided to the reduce method:\r\n *  - The previousValue argument is initialValue.\r\n *  - The currentValue argument is the value of the first element present in the array.\r\n *\r\n * If an initialValue is not provided:\r\n *  - The previousValue argument is the value of the first element present in the array.\r\n *  - The currentValue argument is the value of the second element present in the array.\r\n *\r\n * @callback lineReduceCallback\r\n * @param {*} previousValue The accumulated value previously returned in the last invocation\r\n * of the callback, or initialValue, if supplied.\r\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\r\n * @param {number} lineIndex The index of the current element being processed in the\r\n * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\r\n * @param {number} lineSubIndex The sub-index of the current line being processed at index 0\r\n */\n\n/**\r\n * Reduce features in any GeoJSON object, similar to Array.reduce().\r\n *\r\n * @name lineReduce\r\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\r\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\r\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\r\n * @returns {*} The value that results from the reduction.\r\n * @example\r\n * var mtp = turf.multiPolygon([\r\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\r\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\r\n * ]);\r\n *\r\n * turf.lineReduce(mtp, function (previousValue, currentLine, lineIndex, lineSubIndex) {\r\n *   //=previousValue\r\n *   //=currentLine\r\n *   //=lineIndex\r\n *   //=lineSubIndex\r\n *   return currentLine\r\n * }, 2);\r\n */\n\nexport function lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(geojson, function (currentLine, lineIndex, lineSubIndex) {\n    if (lineIndex === 0 && initialValue === undefined) previousValue = currentLine;else previousValue = callback(previousValue, currentLine, lineIndex, lineSubIndex);\n  });\n  return previousValue;\n}","map":null,"metadata":{},"sourceType":"module"}