{"ast":null,"code":"const Feature = require('./feature');\n\nconst Polygon = function (ctx, geojson) {\n  Feature.call(this, ctx, geojson);\n  this.coordinates = this.coordinates.map(ring => ring.slice(0, -1));\n};\n\nPolygon.prototype = Object.create(Feature.prototype);\n\nPolygon.prototype.isValid = function () {\n  if (this.coordinates.length === 0) return false;\n  return this.coordinates.every(ring => ring.length > 2);\n}; // Expects valid geoJSON polygon geometry: first and last positions must be equivalent.\n\n\nPolygon.prototype.incomingCoords = function (coords) {\n  this.coordinates = coords.map(ring => ring.slice(0, -1));\n  this.changed();\n}; // Does NOT expect valid geoJSON polygon geometry: first and last positions should not be equivalent.\n\n\nPolygon.prototype.setCoordinates = function (coords) {\n  this.coordinates = coords;\n  this.changed();\n};\n\nPolygon.prototype.addCoordinate = function (path, lng, lat) {\n  this.changed();\n  const ids = path.split('.').map(x => parseInt(x, 10));\n  const ring = this.coordinates[ids[0]];\n  ring.splice(ids[1], 0, [lng, lat]);\n};\n\nPolygon.prototype.removeCoordinate = function (path) {\n  this.changed();\n  const ids = path.split('.').map(x => parseInt(x, 10));\n  const ring = this.coordinates[ids[0]];\n\n  if (ring) {\n    ring.splice(ids[1], 1);\n\n    if (ring.length < 3) {\n      this.coordinates.splice(ids[0], 1);\n    }\n  }\n};\n\nPolygon.prototype.getCoordinate = function (path) {\n  const ids = path.split('.').map(x => parseInt(x, 10));\n  const ring = this.coordinates[ids[0]];\n  return JSON.parse(JSON.stringify(ring[ids[1]]));\n};\n\nPolygon.prototype.getCoordinates = function () {\n  return this.coordinates.map(coords => coords.concat([coords[0]]));\n};\n\nPolygon.prototype.updateCoordinate = function (path, lng, lat) {\n  this.changed();\n  const parts = path.split('.');\n  const ringId = parseInt(parts[0], 10);\n  const coordId = parseInt(parts[1], 10);\n\n  if (this.coordinates[ringId] === undefined) {\n    this.coordinates[ringId] = [];\n  }\n\n  this.coordinates[ringId][coordId] = [lng, lat];\n};\n\nmodule.exports = Polygon;","map":{"version":3,"sources":["/home/gianluca/Documenti/Scuola/Informatica/Progetto/AboutMi/node_modules/@mapbox/mapbox-gl-draw/src/feature_types/polygon.js"],"names":["Feature","require","Polygon","ctx","geojson","call","coordinates","map","ring","slice","prototype","Object","create","isValid","length","every","incomingCoords","coords","changed","setCoordinates","addCoordinate","path","lng","lat","ids","split","x","parseInt","splice","removeCoordinate","getCoordinate","JSON","parse","stringify","getCoordinates","concat","updateCoordinate","parts","ringId","coordId","undefined","module","exports"],"mappings":"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","sourcesContent":["const Feature = require('./feature');\n\nconst Polygon = function(ctx, geojson) {\n  Feature.call(this, ctx, geojson);\n  this.coordinates = this.coordinates.map(ring => ring.slice(0, -1));\n};\n\nPolygon.prototype = Object.create(Feature.prototype);\n\nPolygon.prototype.isValid = function() {\n  if (this.coordinates.length === 0) return false;\n  return this.coordinates.every(ring => ring.length > 2);\n};\n\n// Expects valid geoJSON polygon geometry: first and last positions must be equivalent.\nPolygon.prototype.incomingCoords = function(coords) {\n  this.coordinates = coords.map(ring => ring.slice(0, -1));\n  this.changed();\n};\n\n// Does NOT expect valid geoJSON polygon geometry: first and last positions should not be equivalent.\nPolygon.prototype.setCoordinates = function(coords) {\n  this.coordinates = coords;\n  this.changed();\n};\n\nPolygon.prototype.addCoordinate = function(path, lng, lat) {\n  this.changed();\n  const ids = path.split('.').map(x => parseInt(x, 10));\n\n  const ring = this.coordinates[ids[0]];\n\n  ring.splice(ids[1], 0, [lng, lat]);\n};\n\nPolygon.prototype.removeCoordinate = function(path) {\n  this.changed();\n  const ids = path.split('.').map(x => parseInt(x, 10));\n  const ring = this.coordinates[ids[0]];\n  if (ring) {\n    ring.splice(ids[1], 1);\n    if (ring.length < 3) {\n      this.coordinates.splice(ids[0], 1);\n    }\n  }\n};\n\nPolygon.prototype.getCoordinate = function(path) {\n  const ids = path.split('.').map(x => parseInt(x, 10));\n  const ring = this.coordinates[ids[0]];\n  return JSON.parse(JSON.stringify(ring[ids[1]]));\n};\n\nPolygon.prototype.getCoordinates = function() {\n  return this.coordinates.map(coords => coords.concat([coords[0]]));\n};\n\nPolygon.prototype.updateCoordinate = function(path, lng, lat) {\n  this.changed();\n  const parts = path.split('.');\n  const ringId = parseInt(parts[0], 10);\n  const coordId = parseInt(parts[1], 10);\n\n  if (this.coordinates[ringId] === undefined) {\n    this.coordinates[ringId] = [];\n  }\n\n  this.coordinates[ringId][coordId] = [lng, lat];\n};\n\nmodule.exports = Polygon;\n"]},"metadata":{},"sourceType":"script"}