{"ast":null,"code":"/**\n * Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.\n * ~3-5x faster than the common JSON.parse + JSON.stringify combo method.\n *\n * @name clone\n * @param {GeoJSON} geojson GeoJSON Object\n * @returns {GeoJSON} cloned GeoJSON Object\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});\n *\n * var lineCloned = turf.clone(line);\n */\nfunction clone(geojson) {\n  if (!geojson) throw new Error('geojson is required');\n\n  switch (geojson.type) {\n    case 'Feature':\n      return cloneFeature(geojson);\n\n    case 'FeatureCollection':\n      return cloneFeatureCollection(geojson);\n\n    case 'Point':\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiPoint':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n    case 'GeometryCollection':\n      return cloneGeometry(geojson);\n\n    default:\n      throw new Error('unknown GeoJSON type');\n  }\n}\n/**\n * Clone Feature\n *\n * @private\n * @param {Feature<any>} geojson GeoJSON Feature\n * @returns {Feature<any>} cloned Feature\n */\n\n\nfunction cloneFeature(geojson) {\n  var cloned = {\n    type: 'Feature'\n  }; // Preserve Foreign Members\n\n  Object.keys(geojson).forEach(function (key) {\n    switch (key) {\n      case 'type':\n      case 'properties':\n      case 'geometry':\n        return;\n\n      default:\n        cloned[key] = geojson[key];\n    }\n  }); // Add properties & geometry last\n\n  cloned.properties = cloneProperties(geojson.properties);\n  cloned.geometry = cloneGeometry(geojson.geometry);\n  return cloned;\n}\n/**\n * Clone Properties\n *\n * @private\n * @param {Object} properties GeoJSON Properties\n * @returns {Object} cloned Properties\n */\n\n\nfunction cloneProperties(properties) {\n  var cloned = {};\n  if (!properties) return cloned;\n  Object.keys(properties).forEach(function (key) {\n    var value = properties[key];\n\n    if (typeof value === 'object') {\n      if (value === null) {\n        // handle null\n        cloned[key] = null;\n      } else if (value.length) {\n        // handle Array\n        cloned[key] = value.map(function (item) {\n          return item;\n        });\n      } else {\n        // handle generic Object\n        cloned[key] = cloneProperties(value);\n      }\n    } else cloned[key] = value;\n  });\n  return cloned;\n}\n/**\n * Clone Feature Collection\n *\n * @private\n * @param {FeatureCollection<any>} geojson GeoJSON Feature Collection\n * @returns {FeatureCollection<any>} cloned Feature Collection\n */\n\n\nfunction cloneFeatureCollection(geojson) {\n  var cloned = {\n    type: 'FeatureCollection'\n  }; // Preserve Foreign Members\n\n  Object.keys(geojson).forEach(function (key) {\n    switch (key) {\n      case 'type':\n      case 'features':\n        return;\n\n      default:\n        cloned[key] = geojson[key];\n    }\n  }); // Add features\n\n  cloned.features = geojson.features.map(function (feature) {\n    return cloneFeature(feature);\n  });\n  return cloned;\n}\n/**\n * Clone Geometry\n *\n * @private\n * @param {Geometry<any>} geometry GeoJSON Geometry\n * @returns {Geometry<any>} cloned Geometry\n */\n\n\nfunction cloneGeometry(geometry) {\n  var geom = {\n    type: geometry.type\n  };\n  if (geometry.bbox) geom.bbox = geometry.bbox;\n\n  if (geometry.type === 'GeometryCollection') {\n    geom.geometries = geometry.geometries.map(function (geom) {\n      return cloneGeometry(geom);\n    });\n    return geom;\n  }\n\n  geom.coordinates = deepSlice(geometry.coordinates);\n  return geom;\n}\n/**\n * Deep Slice coordinates\n *\n * @private\n * @param {Coordinates} coords Coordinates\n * @returns {Coordinates} all coordinates sliced\n */\n\n\nfunction deepSlice(coords) {\n  if (typeof coords[0] !== 'object') {\n    return coords.slice();\n  }\n\n  return coords.map(function (coord) {\n    return deepSlice(coord);\n  });\n}\n\nexport default clone;","map":null,"metadata":{},"sourceType":"module"}