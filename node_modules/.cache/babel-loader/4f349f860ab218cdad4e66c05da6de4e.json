{"ast":null,"code":"const Constants = require('../constants');\n\nconst featuresAt = require('../lib/features_at');\n\nconst Point = require('../feature_types/point');\n\nconst LineString = require('../feature_types/line_string');\n\nconst Polygon = require('../feature_types/polygon');\n\nconst MultiFeature = require('../feature_types/multi_feature');\n\nconst ModeInterface = module.exports = function (ctx) {\n  this.map = ctx.map;\n  this.drawConfig = JSON.parse(JSON.stringify(ctx.options || {}));\n  this._ctx = ctx;\n};\n/**\r\n * Sets Draw's interal selected state\r\n * @name this.setSelected\r\n * @param {DrawFeature[]} - whats selected as a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js)\r\n */\n\n\nModeInterface.prototype.setSelected = function (features) {\n  return this._ctx.store.setSelected(features);\n};\n/**\r\n * Sets Draw's internal selected coordinate state\r\n * @name this.setSelectedCoordinates\r\n * @param {Object[]} coords - a array of {coord_path: 'string', featureId: 'string'}\r\n */\n\n\nModeInterface.prototype.setSelectedCoordinates = function (coords) {\n  this._ctx.store.setSelectedCoordinates(coords);\n\n  coords.reduce((m, c) => {\n    if (m[c.feature_id] === undefined) {\n      m[c.feature_id] = true;\n\n      this._ctx.store.get(c.feature_id).changed();\n    }\n\n    return m;\n  }, {});\n};\n/**\r\n * Get all selected features as a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js)\r\n * @name this.getSelected\r\n * @returns {DrawFeature[]}\r\n */\n\n\nModeInterface.prototype.getSelected = function () {\n  return this._ctx.store.getSelected();\n};\n/**\r\n * Get the ids of all currently selected features\r\n * @name this.getSelectedIds\r\n * @returns {String[]}\r\n */\n\n\nModeInterface.prototype.getSelectedIds = function () {\n  return this._ctx.store.getSelectedIds();\n};\n/**\r\n * Check if a feature is selected\r\n * @name this.isSelected\r\n * @param {String} id - a feature id\r\n * @returns {Boolean}\r\n */\n\n\nModeInterface.prototype.isSelected = function (id) {\n  return this._ctx.store.isSelected(id);\n};\n/**\r\n * Get a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js) by its id\r\n * @name this.getFeature\r\n * @param {String} id - a feature id\r\n * @returns {DrawFeature}\r\n */\n\n\nModeInterface.prototype.getFeature = function (id) {\n  return this._ctx.store.get(id);\n};\n/**\r\n * Add a feature to draw's internal selected state\r\n * @name this.select\r\n * @param {String} id\r\n */\n\n\nModeInterface.prototype.select = function (id) {\n  return this._ctx.store.select(id);\n};\n/**\r\n * Remove a feature from draw's internal selected state\r\n * @name this.delete\r\n * @param {String} id\r\n */\n\n\nModeInterface.prototype.deselect = function (id) {\n  return this._ctx.store.deselect(id);\n};\n/**\r\n * Delete a feature from draw\r\n * @name this.deleteFeature\r\n * @param {String} id - a feature id\r\n */\n\n\nModeInterface.prototype.deleteFeature = function (id, opts = {}) {\n  return this._ctx.store.delete(id, opts);\n};\n/**\r\n * Add a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js) to draw.\r\n * See `this.newFeature` for converting geojson into a DrawFeature\r\n * @name this.addFeature\r\n * @param {DrawFeature} feature - the feature to add\r\n */\n\n\nModeInterface.prototype.addFeature = function (feature) {\n  return this._ctx.store.add(feature);\n};\n/**\r\n * Clear all selected features\r\n */\n\n\nModeInterface.prototype.clearSelectedFeatures = function () {\n  return this._ctx.store.clearSelected();\n};\n/**\r\n * Clear all selected coordinates\r\n */\n\n\nModeInterface.prototype.clearSelectedCoordinates = function () {\n  return this._ctx.store.clearSelectedCoordinates();\n};\n/**\r\n * Indicate if the different action are currently possible with your mode\r\n * See [draw.actionalbe](https://github.com/mapbox/mapbox-gl-draw/blob/master/API.md#drawactionable) for a list of possible actions. All undefined actions are set to **false** by default\r\n * @name this.setActionableState\r\n * @param {Object} actions\r\n */\n\n\nModeInterface.prototype.setActionableState = function (actions = {}) {\n  const newSet = {\n    trash: actions.trash || false,\n    combineFeatures: actions.combineFeatures || false,\n    uncombineFeatures: actions.uncombineFeatures || false\n  };\n  return this._ctx.events.actionable(newSet);\n};\n/**\r\n * Trigger a mode change\r\n * @name this.changeMode\r\n * @param {String} mode - the mode to transition into\r\n * @param {Object} opts - the options object to pass to the new mode\r\n * @param {Object} eventOpts - used to control what kind of events are emitted.\r\n */\n\n\nModeInterface.prototype.changeMode = function (mode, opts = {}, eventOpts = {}) {\n  return this._ctx.events.changeMode(mode, opts, eventOpts);\n};\n/**\r\n * Update the state of draw map classes\r\n * @name this.updateUIClasses\r\n * @param {Object} opts\r\n */\n\n\nModeInterface.prototype.updateUIClasses = function (opts) {\n  return this._ctx.ui.queueMapClasses(opts);\n};\n/**\r\n * If a name is provided it makes that button active, else if makes all buttons inactive\r\n * @name this.activateUIButton\r\n * @param {String?} name - name of the button to make active, leave as undefined to set buttons to be inactive\r\n */\n\n\nModeInterface.prototype.activateUIButton = function (name) {\n  return this._ctx.ui.setActiveButton(name);\n};\n/**\r\n * Get the features at the location of an event object or in a bbox\r\n * @name this.featuresAt\r\n * @param {Event||NULL} event - a mapbox-gl event object\r\n * @param {BBOX||NULL} bbox - the area to get features from\r\n * @param {String} bufferType - is this `click` or `tap` event, defaults to click\r\n */\n\n\nModeInterface.prototype.featuresAt = function (event, bbox, bufferType = 'click') {\n  if (bufferType !== 'click' && bufferType !== 'touch') throw new Error('invalid buffer type');\n  return featuresAt[bufferType](event, bbox, this._ctx);\n};\n/**\r\n * Create a new [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js) from geojson\r\n * @name this.newFeature\r\n * @param {GeoJSONFeature} geojson\r\n * @returns {DrawFeature}\r\n */\n\n\nModeInterface.prototype.newFeature = function (geojson) {\n  const type = geojson.geometry.type;\n  if (type === Constants.geojsonTypes.POINT) return new Point(this._ctx, geojson);\n  if (type === Constants.geojsonTypes.LINE_STRING) return new LineString(this._ctx, geojson);\n  if (type === Constants.geojsonTypes.POLYGON) return new Polygon(this._ctx, geojson);\n  return new MultiFeature(this._ctx, geojson);\n};\n/**\r\n * Check is an object is an instance of a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js)\r\n * @name this.isInstanceOf\r\n * @param {String} type - `Point`, `LineString`, `Polygon`, `MultiFeature`\r\n * @param {Object} feature - the object that needs to be checked\r\n * @returns {Boolean}\r\n */\n\n\nModeInterface.prototype.isInstanceOf = function (type, feature) {\n  if (type === Constants.geojsonTypes.POINT) return feature instanceof Point;\n  if (type === Constants.geojsonTypes.LINE_STRING) return feature instanceof LineString;\n  if (type === Constants.geojsonTypes.POLYGON) return feature instanceof Polygon;\n  if (type === 'MultiFeature') return feature instanceof MultiFeature;\n  throw new Error(\"Unknown feature class: \".concat(type));\n};\n/**\r\n * Force draw to rerender the feature of the provided id\r\n * @name this.doRender\r\n * @param {String} id - a feature id\r\n */\n\n\nModeInterface.prototype.doRender = function (id) {\n  return this._ctx.store.featureChanged(id);\n};","map":null,"metadata":{},"sourceType":"script"}