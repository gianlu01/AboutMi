{"ast":null,"code":"function rad(x) {\n  return x * Math.PI / 180;\n}\n\nfunction isRingClockwise(coords) {\n  var area = 0;\n\n  if (coords.length > 2) {\n    var p1, p2;\n\n    for (var i = 0; i < coords.length - 1; i++) {\n      p1 = coords[i];\n      p2 = coords[i + 1];\n      area += rad(p2[0] - p1[0]) * (2 + Math.sin(rad(p1[1])) + Math.sin(rad(p2[1])));\n    }\n  }\n\n  return area >= 0;\n}\n\nfunction isPolyRHR(coords) {\n  if (coords && coords.length > 0) {\n    if (isRingClockwise(coords[0])) return false;\n    var interiorCoords = coords.slice(1, coords.length);\n    if (!interiorCoords.every(isRingClockwise)) return false;\n  }\n\n  return true;\n}\n\nfunction rightHandRule(geometry) {\n  if (geometry.type === 'Polygon') {\n    return isPolyRHR(geometry.coordinates);\n  } else if (geometry.type === 'MultiPolygon') {\n    return geometry.coordinates.every(isPolyRHR);\n  }\n}\n\nmodule.exports = function validateRightHandRule(geometry, errors) {\n  if (!rightHandRule(geometry)) {\n    errors.push({\n      message: 'Polygons and MultiPolygons should follow the right-hand rule',\n      level: 'message',\n      line: geometry.__line__\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Gianluca/Documents/Scuola/Informatica/AboutMi/Sito/AboutMi/node_modules/@mapbox/geojsonhint/lib/rhr.js"],"names":["rad","x","Math","PI","isRingClockwise","coords","area","length","p1","p2","i","sin","isPolyRHR","interiorCoords","slice","every","rightHandRule","geometry","type","coordinates","module","exports","validateRightHandRule","errors","push","message","level","line","__line__"],"mappings":"AAAA,SAASA,GAAT,CAAaC,CAAb,EAAgB;AACZ,SAAOA,CAAC,GAAGC,IAAI,CAACC,EAAT,GAAc,GAArB;AACH;;AAED,SAASC,eAAT,CAA0BC,MAA1B,EAAkC;AAC9B,MAAIC,IAAI,GAAG,CAAX;;AACA,MAAID,MAAM,CAACE,MAAP,GAAgB,CAApB,EAAuB;AACnB,QAAIC,EAAJ,EAAQC,EAAR;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACE,MAAP,GAAgB,CAApC,EAAuCG,CAAC,EAAxC,EAA4C;AACxCF,MAAAA,EAAE,GAAGH,MAAM,CAACK,CAAD,CAAX;AACAD,MAAAA,EAAE,GAAGJ,MAAM,CAACK,CAAC,GAAG,CAAL,CAAX;AACAJ,MAAAA,IAAI,IAAIN,GAAG,CAACS,EAAE,CAAC,CAAD,CAAF,GAAQD,EAAE,CAAC,CAAD,CAAX,CAAH,IAAsB,IAAIN,IAAI,CAACS,GAAL,CAASX,GAAG,CAACQ,EAAE,CAAC,CAAD,CAAH,CAAZ,CAAJ,GAA2BN,IAAI,CAACS,GAAL,CAASX,GAAG,CAACS,EAAE,CAAC,CAAD,CAAH,CAAZ,CAAjD,CAAR;AACH;AACJ;;AAED,SAAOH,IAAI,IAAI,CAAf;AACH;;AAED,SAASM,SAAT,CAAoBP,MAApB,EAA4B;AACxB,MAAIA,MAAM,IAAIA,MAAM,CAACE,MAAP,GAAgB,CAA9B,EAAiC;AAC7B,QAAIH,eAAe,CAACC,MAAM,CAAC,CAAD,CAAP,CAAnB,EACI,OAAO,KAAP;AACJ,QAAIQ,cAAc,GAAGR,MAAM,CAACS,KAAP,CAAa,CAAb,EAAgBT,MAAM,CAACE,MAAvB,CAArB;AACA,QAAI,CAACM,cAAc,CAACE,KAAf,CAAqBX,eAArB,CAAL,EACI,OAAO,KAAP;AACP;;AACD,SAAO,IAAP;AACH;;AAED,SAASY,aAAT,CAAwBC,QAAxB,EAAkC;AAC9B,MAAIA,QAAQ,CAACC,IAAT,KAAkB,SAAtB,EAAiC;AAC7B,WAAON,SAAS,CAACK,QAAQ,CAACE,WAAV,CAAhB;AACH,GAFD,MAEO,IAAIF,QAAQ,CAACC,IAAT,KAAkB,cAAtB,EAAsC;AACzC,WAAOD,QAAQ,CAACE,WAAT,CAAqBJ,KAArB,CAA2BH,SAA3B,CAAP;AACH;AACJ;;AAEDQ,MAAM,CAACC,OAAP,GAAiB,SAASC,qBAAT,CAA+BL,QAA/B,EAAyCM,MAAzC,EAAiD;AAC9D,MAAI,CAACP,aAAa,CAACC,QAAD,CAAlB,EAA8B;AAC1BM,IAAAA,MAAM,CAACC,IAAP,CAAY;AACRC,MAAAA,OAAO,EAAE,8DADD;AAERC,MAAAA,KAAK,EAAE,SAFC;AAGRC,MAAAA,IAAI,EAAEV,QAAQ,CAACW;AAHP,KAAZ;AAKH;AACJ,CARD","sourcesContent":["function rad(x) {\n    return x * Math.PI / 180;\n}\n\nfunction isRingClockwise (coords) {\n    var area = 0;\n    if (coords.length > 2) {\n        var p1, p2;\n        for (var i = 0; i < coords.length - 1; i++) {\n            p1 = coords[i];\n            p2 = coords[i + 1];\n            area += rad(p2[0] - p1[0]) * (2 + Math.sin(rad(p1[1])) + Math.sin(rad(p2[1])));\n        }\n    }\n\n    return area >= 0;\n}\n\nfunction isPolyRHR (coords) {\n    if (coords && coords.length > 0) {\n        if (isRingClockwise(coords[0]))\n            return false;\n        var interiorCoords = coords.slice(1, coords.length);\n        if (!interiorCoords.every(isRingClockwise))\n            return false;\n    }\n    return true;\n}\n\nfunction rightHandRule (geometry) {\n    if (geometry.type === 'Polygon') {\n        return isPolyRHR(geometry.coordinates);\n    } else if (geometry.type === 'MultiPolygon') {\n        return geometry.coordinates.every(isPolyRHR);\n    }\n}\n\nmodule.exports = function validateRightHandRule(geometry, errors) {\n    if (!rightHandRule(geometry)) {\n        errors.push({\n            message: 'Polygons and MultiPolygons should follow the right-hand rule',\n            level: 'message',\n            line: geometry.__line__\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"script"}