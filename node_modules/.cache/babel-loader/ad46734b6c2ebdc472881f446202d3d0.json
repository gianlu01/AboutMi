{"ast":null,"code":"/**\r\n * @module ol/style/Circle\r\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport RegularShape from './RegularShape.js';\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} radius Circle radius.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n */\n\n/**\r\n * @classdesc\r\n * Set circle style for vector features.\r\n * @api\r\n */\n\nvar CircleStyle =\n/** @class */\nfunction (_super) {\n  __extends(CircleStyle, _super);\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\n\n\n  function CircleStyle(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke\n    }) || this;\n    return _this;\n  }\n  /**\r\n  * Clones the style.\r\n  * @return {CircleStyle} The cloned style.\r\n  * @override\r\n  * @api\r\n  */\n\n\n  CircleStyle.prototype.clone = function () {\n    var style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius()\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  };\n  /**\r\n   * Set the circle radius.\r\n   *\r\n   * @param {number} radius Circle radius.\r\n   * @api\r\n   */\n\n\n  CircleStyle.prototype.setRadius = function (radius) {\n    this.radius_ = radius;\n    this.render();\n  };\n\n  return CircleStyle;\n}(RegularShape);\n\nexport default CircleStyle;","map":null,"metadata":{},"sourceType":"module"}