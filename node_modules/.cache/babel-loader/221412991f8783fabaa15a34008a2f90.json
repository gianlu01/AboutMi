{"ast":null,"code":"/**\r\n * @module ol/style/IconImageCache\r\n */\nimport { asString } from '../color.js';\n/**\r\n * @classdesc\r\n * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.\r\n */\n\nvar IconImageCache =\n/** @class */\nfunction () {\n  function IconImageCache() {\n    /**\r\n    * @type {!Object<string, import(\"./IconImage.js\").default>}\r\n    * @private\r\n    */\n    this.cache_ = {};\n    /**\r\n    * @type {number}\r\n    * @private\r\n    */\n\n    this.cacheSize_ = 0;\n    /**\r\n    * @type {number}\r\n    * @private\r\n    */\n\n    this.maxCacheSize_ = 32;\n  }\n  /**\r\n  * FIXME empty description for jsdoc\r\n  */\n\n\n  IconImageCache.prototype.clear = function () {\n    this.cache_ = {};\n    this.cacheSize_ = 0;\n  };\n  /**\r\n   * @return {boolean} Can expire cache.\r\n   */\n\n\n  IconImageCache.prototype.canExpireCache = function () {\n    return this.cacheSize_ > this.maxCacheSize_;\n  };\n  /**\r\n  * FIXME empty description for jsdoc\r\n  */\n\n\n  IconImageCache.prototype.expire = function () {\n    if (this.canExpireCache()) {\n      var i = 0;\n\n      for (var key in this.cache_) {\n        var iconImage = this.cache_[key];\n\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n          delete this.cache_[key];\n          --this.cacheSize_;\n        }\n      }\n    }\n  };\n  /**\r\n  * @param {string} src Src.\r\n  * @param {?string} crossOrigin Cross origin.\r\n  * @param {import(\"../color.js\").Color} color Color.\r\n  * @return {import(\"./IconImage.js\").default} Icon image.\r\n  */\n\n\n  IconImageCache.prototype.get = function (src, crossOrigin, color) {\n    var key = getKey(src, crossOrigin, color);\n    return key in this.cache_ ? this.cache_[key] : null;\n  };\n  /**\r\n  * @param {string} src Src.\r\n  * @param {?string} crossOrigin Cross origin.\r\n  * @param {import(\"../color.js\").Color} color Color.\r\n  * @param {import(\"./IconImage.js\").default} iconImage Icon image.\r\n  */\n\n\n  IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {\n    var key = getKey(src, crossOrigin, color);\n    this.cache_[key] = iconImage;\n    ++this.cacheSize_;\n  };\n  /**\r\n  * Set the cache size of the icon cache. Default is `32`. Change this value when\r\n  * your map uses more than 32 different icon images and you are not caching icon\r\n  * styles on the application level.\r\n  * @param {number} maxCacheSize Cache max size.\r\n  * @api\r\n  */\n\n\n  IconImageCache.prototype.setSize = function (maxCacheSize) {\n    this.maxCacheSize_ = maxCacheSize;\n    this.expire();\n  };\n\n  return IconImageCache;\n}();\n/**\r\n * @param {string} src Src.\r\n * @param {?string} crossOrigin Cross origin.\r\n * @param {import(\"../color.js\").Color} color Color.\r\n * @return {string} Cache key.\r\n */\n\n\nfunction getKey(src, crossOrigin, color) {\n  var colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\n\nexport default IconImageCache;\n/**\r\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\r\n * {@link module:ol/style/Icon~Icon} images.\r\n * @api\r\n */\n\nexport var shared = new IconImageCache();","map":null,"metadata":{},"sourceType":"module"}