{"ast":null,"code":"/**\r\n * @module ol/style/Fill\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color=null] A color, gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n */\n\n/**\r\n * @classdesc\r\n * Set fill style for vector features.\r\n * @api\r\n */\nvar Fill =\n/** @class */\nfunction () {\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\n  function Fill(opt_options) {\n    var options = opt_options || {};\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\r\n     */\n\n    this.color_ = options.color !== undefined ? options.color : null;\n  }\n  /**\r\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\r\n   * @return {Fill} The cloned style.\r\n   * @api\r\n   */\n\n\n  Fill.prototype.clone = function () {\n    var color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined\n    });\n  };\n  /**\r\n   * Get the fill color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\r\n   * @api\r\n   */\n\n\n  Fill.prototype.getColor = function () {\n    return this.color_;\n  };\n  /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\r\n   * @api\r\n   */\n\n\n  Fill.prototype.setColor = function (color) {\n    this.color_ = color;\n  };\n\n  return Fill;\n}();\n\nexport default Fill;","map":null,"metadata":{},"sourceType":"module"}