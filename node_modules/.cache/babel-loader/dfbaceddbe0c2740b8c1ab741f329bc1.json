{"ast":null,"code":"import { getCoord } from '@turf/invariant';\nimport { degreesToRadians, isObject, radiansToDegrees } from '@turf/helpers'; // https://en.wikipedia.org/wiki/Rhumb_line\n\n/**\n * Takes two {@link Point|points} and finds the bearing angle between them along a Rhumb line\n * i.e. the angle measured in degrees start the north line (0 degrees)\n *\n * @name rhumbBearing\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.final=false] calculates the final bearing if true\n * @returns {number} bearing from north in decimal degrees, between -180 and 180 degrees (positive clockwise)\n * @example\n * var point1 = turf.point([-75.343, 39.984], {\"marker-color\": \"#F00\"});\n * var point2 = turf.point([-75.534, 39.123], {\"marker-color\": \"#00F\"});\n *\n * var bearing = turf.rhumbBearing(point1, point2);\n *\n * //addToMap\n * var addToMap = [point1, point2];\n * point1.properties.bearing = bearing;\n * point2.properties.bearing = bearing;\n */\n\nfunction rhumbBearing(start, end, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error('options is invalid');\n  var final = options.final; // validation\n\n  if (!start) throw new Error('start point is required');\n  if (!end) throw new Error('end point is required');\n  var bear360;\n  if (final) bear360 = calculateRhumbBearing(getCoord(end), getCoord(start));else bear360 = calculateRhumbBearing(getCoord(start), getCoord(end));\n  var bear180 = bear360 > 180 ? -(360 - bear360) : bear360;\n  return bear180;\n}\n/**\n * Returns the bearing from ‘this’ point to destination point along a rhumb line.\n * Adapted from Geodesy: https://github.com/chrisveness/geodesy/blob/master/latlon-spherical.js\n *\n * @private\n * @param   {Array<number>} from - origin point.\n * @param   {Array<number>} to - destination point.\n * @returns {number} Bearing in degrees from north.\n * @example\n * var p1 = new LatLon(51.127, 1.338);\n * var p2 = new LatLon(50.964, 1.853);\n * var d = p1.rhumbBearingTo(p2); // 116.7 m\n */\n\n\nfunction calculateRhumbBearing(from, to) {\n  // φ => phi\n  // Δλ => deltaLambda\n  // Δψ => deltaPsi\n  // θ => theta\n  var phi1 = degreesToRadians(from[1]);\n  var phi2 = degreesToRadians(to[1]);\n  var deltaLambda = degreesToRadians(to[0] - from[0]); // if deltaLambdaon over 180° take shorter rhumb line across the anti-meridian:\n\n  if (deltaLambda > Math.PI) deltaLambda -= 2 * Math.PI;\n  if (deltaLambda < -Math.PI) deltaLambda += 2 * Math.PI;\n  var deltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));\n  var theta = Math.atan2(deltaLambda, deltaPsi);\n  return (radiansToDegrees(theta) + 360) % 360;\n}\n\nexport default rhumbBearing;","map":null,"metadata":{},"sourceType":"module"}