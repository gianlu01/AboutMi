{"ast":null,"code":"/**\r\n * @module ol/style/Style\r\n */\nimport { assert } from '../asserts.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\n/**\r\n * A function that takes an {@link module:ol/Feature} and a `{number}`\r\n * representing the view's resolution. The function should return a\r\n * {@link module:ol/style/Style} or an array of them. This way e.g. a\r\n * vector layer can be styled.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>)} StyleFunction\r\n */\n\n/**\r\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\r\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\r\n */\n\n/**\r\n * A function that takes an {@link module:ol/Feature} as argument and returns an\r\n * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\r\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\r\n */\n\n/**\r\n * Custom renderer function. Takes two arguments:\r\n *\r\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\r\n * 2. The {@link module:ol/render~State} of the layer renderer.\r\n *\r\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State): void}\r\n * RenderFunction\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\r\n * or function returning a geometry to render for this style.\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {import(\"./Image.js\").default} [image] Image style.\r\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\r\n * ignored, and the provided function will be called with each render frame for each geometry.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Text.js\").default} [text] Text style.\r\n * @property {number} [zIndex] Z index.\r\n */\n\n/**\r\n * @classdesc\r\n * Container for vector feature rendering styles. Any changes made to the style\r\n * or its children through `set*()` methods will not take effect until the\r\n * feature or layer that uses the style is re-rendered.\r\n *\r\n * ## Feature styles\r\n *\r\n * If no style is defined, the following default style is used:\r\n * ```js\r\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\r\n *\r\n *  var fill = new Fill({\r\n *    color: 'rgba(255,255,255,0.4)'\r\n *  });\r\n *  var stroke = new Stroke({\r\n *    color: '#3399CC',\r\n *    width: 1.25\r\n *  });\r\n *  var styles = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        fill: fill,\r\n *        stroke: stroke,\r\n *        radius: 5\r\n *      }),\r\n *      fill: fill,\r\n *      stroke: stroke\r\n *    })\r\n *  ];\r\n * ```\r\n *\r\n * A separate editing style has the following defaults:\r\n * ```js\r\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\r\n *  import GeometryType from 'ol/geom/GeometryType';\r\n *\r\n *  var white = [255, 255, 255, 1];\r\n *  var blue = [0, 153, 255, 1];\r\n *  var width = 3;\r\n *  styles[GeometryType.POLYGON] = [\r\n *    new Style({\r\n *      fill: new Fill({\r\n *        color: [255, 255, 255, 0.5]\r\n *      })\r\n *    })\r\n *  ];\r\n *  styles[GeometryType.MULTI_POLYGON] =\r\n *      styles[GeometryType.POLYGON];\r\n *  styles[GeometryType.LINE_STRING] = [\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: white,\r\n *        width: width + 2\r\n *      })\r\n *    }),\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: blue,\r\n *        width: width\r\n *      })\r\n *    })\r\n *  ];\r\n *  styles[GeometryType.MULTI_LINE_STRING] =\r\n *      styles[GeometryType.LINE_STRING];\r\n *  styles[GeometryType.POINT] = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        radius: width * 2,\r\n *        fill: new Fill({\r\n *          color: blue\r\n *        }),\r\n *        stroke: new Stroke({\r\n *          color: white,\r\n *          width: width / 2\r\n *        })\r\n *      }),\r\n *      zIndex: Infinity\r\n *    })\r\n *  ];\r\n *  styles[GeometryType.MULTI_POINT] =\r\n *      styles[GeometryType.POINT];\r\n *  styles[GeometryType.GEOMETRY_COLLECTION] =\r\n *      styles[GeometryType.POLYGON].concat(\r\n *          styles[GeometryType.LINE_STRING],\r\n *          styles[GeometryType.POINT]\r\n *      );\r\n * ```\r\n *\r\n * @api\r\n */\n\nvar Style =\n/** @class */\nfunction () {\n  /**\r\n   * @param {Options=} opt_options Style options.\r\n   */\n  function Style(opt_options) {\n    var options = opt_options || {};\n    /**\r\n     * @private\r\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\r\n     */\n\n    this.geometry_ = null;\n    /**\r\n     * @private\r\n     * @type {!GeometryFunction}\r\n     */\n\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default}\r\n     */\n\n\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\r\n       * @private\r\n       * @type {import(\"./Image.js\").default}\r\n       */\n\n    this.image_ = options.image !== undefined ? options.image : null;\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\n\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default}\r\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\r\n     * @private\r\n     * @type {import(\"./Text.js\").default}\r\n     */\n\n    this.text_ = options.text !== undefined ? options.text : null;\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n\n    this.zIndex_ = options.zIndex;\n  }\n  /**\r\n   * Clones the style.\r\n   * @return {Style} The cloned style.\r\n   * @api\r\n   */\n\n\n  Style.prototype.clone = function () {\n    var geometry = this.getGeometry();\n\n    if (geometry && typeof geometry === 'object') {\n      geometry =\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      geometry.clone();\n    }\n\n    return new Style({\n      geometry: geometry,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex()\n    });\n  };\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setRenderer} or the `renderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\n\n\n  Style.prototype.getRenderer = function () {\n    return this.renderer_;\n  };\n  /**\r\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\r\n   * and `image` options of the style will be ignored.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\n\n\n  Style.prototype.setRenderer = function (renderer) {\n    this.renderer_ = renderer;\n  };\n  /**\r\n   * Get the geometry to be rendered.\r\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\r\n   * Feature property or geometry or function that returns the geometry that will\r\n   * be rendered with this style.\r\n   * @api\r\n   */\n\n\n  Style.prototype.getGeometry = function () {\n    return this.geometry_;\n  };\n  /**\r\n   * Get the function used to generate a geometry for rendering.\r\n   * @return {!GeometryFunction} Function that is called with a feature\r\n   * and returns the geometry to render instead of the feature's geometry.\r\n   * @api\r\n   */\n\n\n  Style.prototype.getGeometryFunction = function () {\n    return this.geometryFunction_;\n  };\n  /**\r\n   * Get the fill style.\r\n   * @return {import(\"./Fill.js\").default} Fill style.\r\n   * @api\r\n   */\n\n\n  Style.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\r\n   * Set the fill style.\r\n   * @param {import(\"./Fill.js\").default} fill Fill style.\r\n   * @api\r\n   */\n\n\n  Style.prototype.setFill = function (fill) {\n    this.fill_ = fill;\n  };\n  /**\r\n   * Get the image style.\r\n   * @return {import(\"./Image.js\").default} Image style.\r\n   * @api\r\n   */\n\n\n  Style.prototype.getImage = function () {\n    return this.image_;\n  };\n  /**\r\n   * Set the image style.\r\n   * @param {import(\"./Image.js\").default} image Image style.\r\n   * @api\r\n   */\n\n\n  Style.prototype.setImage = function (image) {\n    this.image_ = image;\n  };\n  /**\r\n   * Get the stroke style.\r\n   * @return {import(\"./Stroke.js\").default} Stroke style.\r\n   * @api\r\n   */\n\n\n  Style.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\r\n   * Set the stroke style.\r\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\r\n   * @api\r\n   */\n\n\n  Style.prototype.setStroke = function (stroke) {\n    this.stroke_ = stroke;\n  };\n  /**\r\n   * Get the text style.\r\n   * @return {import(\"./Text.js\").default} Text style.\r\n   * @api\r\n   */\n\n\n  Style.prototype.getText = function () {\n    return this.text_;\n  };\n  /**\r\n   * Set the text style.\r\n   * @param {import(\"./Text.js\").default} text Text style.\r\n   * @api\r\n   */\n\n\n  Style.prototype.setText = function (text) {\n    this.text_ = text;\n  };\n  /**\r\n   * Get the z-index for the style.\r\n   * @return {number|undefined} ZIndex.\r\n   * @api\r\n   */\n\n\n  Style.prototype.getZIndex = function () {\n    return this.zIndex_;\n  };\n  /**\r\n   * Set a geometry that is rendered instead of the feature's geometry.\r\n   *\r\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\r\n   *     Feature property or geometry or function returning a geometry to render\r\n   *     for this style.\r\n   * @api\r\n   */\n\n\n  Style.prototype.setGeometry = function (geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function (feature) {\n        return (\n          /** @type {import(\"../geom/Geometry.js\").default} */\n          feature.get(geometry)\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function () {\n        return (\n          /** @type {import(\"../geom/Geometry.js\").default} */\n          geometry\n        );\n      };\n    }\n\n    this.geometry_ = geometry;\n  };\n  /**\r\n   * Set the z-index.\r\n   *\r\n   * @param {number|undefined} zIndex ZIndex.\r\n   * @api\r\n   */\n\n\n  Style.prototype.setZIndex = function (zIndex) {\n    this.zIndex_ = zIndex;\n  };\n\n  return Style;\n}();\n/**\r\n * Convert the provided object into a style function.  Functions passed through\r\n * unchanged.  Arrays of Style or single style objects wrapped in a\r\n * new style function.\r\n * @param {StyleFunction|Array<Style>|Style} obj\r\n *     A style function, a single style, or an array of styles.\r\n * @return {StyleFunction} A style function.\r\n */\n\n\nexport function toFunction(obj) {\n  var styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\r\n     * @type {Array<Style>}\r\n     */\n    var styles_1;\n\n    if (Array.isArray(obj)) {\n      styles_1 = obj;\n    } else {\n      assert(typeof\n      /** @type {?} */\n      obj.getZIndex === 'function', 41); // Expected an `Style` or an array of `Style`\n\n      var style =\n      /** @type {Style} */\n      obj;\n      styles_1 = [style];\n    }\n\n    styleFunction = function () {\n      return styles_1;\n    };\n  }\n\n  return styleFunction;\n}\n/**\r\n * @type {Array<Style>}\r\n */\n\nvar defaultStyles = null;\n/**\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<Style>} Style.\r\n */\n\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    var fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    var stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [new Style({\n      image: new CircleStyle({\n        fill: fill,\n        stroke: stroke,\n        radius: 5\n      }),\n      fill: fill,\n      stroke: stroke\n    })];\n  }\n\n  return defaultStyles;\n}\n/**\r\n * Default styles for editing features.\r\n * @return {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} Styles\r\n */\n\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} */\n  var styles = {};\n  var white = [255, 255, 255, 1];\n  var blue = [0, 153, 255, 1];\n  var width = 3;\n  styles[GeometryType.POLYGON] = [new Style({\n    fill: new Fill({\n      color: [255, 255, 255, 0.5]\n    })\n  })];\n  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\n  styles[GeometryType.LINE_STRING] = [new Style({\n    stroke: new Stroke({\n      color: white,\n      width: width + 2\n    })\n  }), new Style({\n    stroke: new Stroke({\n      color: blue,\n      width: width\n    })\n  })];\n  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\n  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING]);\n  styles[GeometryType.POINT] = [new Style({\n    image: new CircleStyle({\n      radius: width * 2,\n      fill: new Fill({\n        color: blue\n      }),\n      stroke: new Stroke({\n        color: white,\n        width: width / 2\n      })\n    }),\n    zIndex: Infinity\n  })];\n  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\n  styles[GeometryType.GEOMETRY_COLLECTION] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\n  return styles;\n}\n/**\r\n * Function that is called with a feature and returns its default geometry.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\r\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\r\n */\n\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;","map":null,"metadata":{},"sourceType":"module"}