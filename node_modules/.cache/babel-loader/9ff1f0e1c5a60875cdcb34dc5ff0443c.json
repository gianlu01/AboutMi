{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ElevationMode = void 0;\n\nvar _utils = require(\"../utils.js\");\n\nvar _modifyMode = require(\"./modify-mode.js\");\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction defaultCalculateElevationChange(_ref) {\n  var pointerDownScreenCoords = _ref.pointerDownScreenCoords,\n      screenCoords = _ref.screenCoords;\n  return 10 * (pointerDownScreenCoords[1] - screenCoords[1]);\n}\n\nvar ElevationMode =\n/*#__PURE__*/\nfunction (_ModifyMode) {\n  _inherits(ElevationMode, _ModifyMode);\n\n  function ElevationMode() {\n    _classCallCheck(this, ElevationMode);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ElevationMode).apply(this, arguments));\n  }\n\n  _createClass(ElevationMode, [{\n    key: \"makeElevatedEvent\",\n    value: function makeElevatedEvent(event, position, props) {\n      var _ref2 = props.modeConfig || {},\n          _ref2$minElevation = _ref2.minElevation,\n          minElevation = _ref2$minElevation === void 0 ? 0 : _ref2$minElevation,\n          _ref2$maxElevation = _ref2.maxElevation,\n          maxElevation = _ref2$maxElevation === void 0 ? 20000 : _ref2$maxElevation,\n          _ref2$calculateElevat = _ref2.calculateElevationChange,\n          calculateElevationChange = _ref2$calculateElevat === void 0 ? defaultCalculateElevationChange : _ref2$calculateElevat;\n\n      if (!event.pointerDownScreenCoords) {\n        return event;\n      } // $FlowFixMe - really, I know it has something at index 2\n\n\n      var elevation = position.length === 3 ? position[2] : 0; // calculateElevationChange is configurable because (at this time) modes are not aware of the viewport\n\n      elevation += calculateElevationChange({\n        pointerDownScreenCoords: event.pointerDownScreenCoords,\n        screenCoords: event.screenCoords\n      });\n      elevation = Math.min(elevation, maxElevation);\n      elevation = Math.max(elevation, minElevation);\n      return Object.assign({}, event, {\n        mapCoords: [position[0], position[1], elevation]\n      });\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      var editHandle = (0, _utils.getPickedEditHandle)(event.pointerDownPicks);\n      var position = editHandle ? editHandle.geometry.coordinates : event.mapCoords;\n\n      _get(_getPrototypeOf(ElevationMode.prototype), \"handlePointerMove\", this).call(this, this.makeElevatedEvent(event, position, props), props);\n    }\n  }, {\n    key: \"handleStopDragging\",\n    value: function handleStopDragging(event, props) {\n      var editHandle = (0, _utils.getPickedEditHandle)(event.picks);\n      var position = editHandle ? editHandle.geometry.coordinates : event.mapCoords;\n\n      _get(_getPrototypeOf(ElevationMode.prototype), \"handleStopDragging\", this).call(this, this.makeElevatedEvent(event, position, props), props);\n    }\n  }, {\n    key: \"getCursor\",\n    value: function getCursor(event) {\n      var cursor = _get(_getPrototypeOf(ElevationMode.prototype), \"getCursor\", this).call(this, event);\n\n      if (cursor === 'cell') {\n        cursor = 'ns-resize';\n      }\n\n      return cursor;\n    }\n  }], [{\n    key: \"calculateElevationChangeWithViewport\",\n    value: function calculateElevationChangeWithViewport(viewport, _ref3) {\n      var pointerDownScreenCoords = _ref3.pointerDownScreenCoords,\n          screenCoords = _ref3.screenCoords; // Source: https://gis.stackexchange.com/a/127949/111804\n\n      var metersPerPixel = 156543.03392 * Math.cos(viewport.latitude * Math.PI / 180) / Math.pow(2, viewport.zoom);\n      return metersPerPixel * (pointerDownScreenCoords[1] - screenCoords[1]) / 2;\n    }\n  }]);\n\n  return ElevationMode;\n}(_modifyMode.ModifyMode);\n\nexports.ElevationMode = ElevationMode;","map":null,"metadata":{},"sourceType":"script"}