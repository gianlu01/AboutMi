{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/interaction/DragZoom\r\n */\n\n\nimport { easeOut } from '../easing.js';\nimport { shiftKeyOnly } from '../events/condition.js';\nimport { createOrUpdateFromCoordinates, getBottomLeft, getCenter, getTopRight, scaleFromCenter } from '../extent.js';\nimport DragBox from './DragBox.js';\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-dragzoom'] CSS class name for styling the\r\n * box.\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled.\r\n * Default is {@link module:ol/events/condition~shiftKeyOnly}.\r\n * @property {number} [duration=200] Animation duration in milliseconds.\r\n * @property {boolean} [out=false] Use interaction for zooming out.\r\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default\r\n * `boxEndCondition` function.\r\n */\n\n/**\r\n * @classdesc\r\n * Allows the user to zoom the map by clicking and dragging on the map,\r\n * normally combined with an {@link module:ol/events/condition} that limits\r\n * it to when a key, shift by default, is held down.\r\n *\r\n * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or\r\n * your custom one configured with `className`.\r\n * @api\r\n */\n\nvar DragZoom =\n/** @class */\nfunction (_super) {\n  __extends(DragZoom, _super);\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\n\n\n  function DragZoom(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var condition = options.condition ? options.condition : shiftKeyOnly;\n    _this = _super.call(this, {\n      condition: condition,\n      className: options.className || 'ol-dragzoom',\n      minArea: options.minArea,\n      onBoxEnd: onBoxEnd\n    }) || this;\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    _this.duration_ = options.duration !== undefined ? options.duration : 200;\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n\n    _this.out_ = options.out !== undefined ? options.out : false;\n    return _this;\n  }\n\n  return DragZoom;\n}(DragBox);\n/**\r\n * @this {DragZoom}\r\n */\n\n\nfunction onBoxEnd() {\n  var map = this.getMap();\n  var view =\n  /** @type {!import(\"../View.js\").default} */\n  map.getView();\n  var size =\n  /** @type {!import(\"../size.js\").Size} */\n  map.getSize();\n  var extent = this.getGeometry().getExtent();\n\n  if (this.out_) {\n    var mapExtent = view.calculateExtentInternal(size);\n    var boxPixelExtent = createOrUpdateFromCoordinates([map.getPixelFromCoordinateInternal(getBottomLeft(extent)), map.getPixelFromCoordinateInternal(getTopRight(extent))]);\n    var factor = view.getResolutionForExtentInternal(boxPixelExtent, size);\n    scaleFromCenter(mapExtent, 1 / factor);\n    extent = mapExtent;\n  }\n\n  var resolution = view.getConstrainedResolution(view.getResolutionForExtentInternal(extent, size));\n  var center = view.getConstrainedCenter(getCenter(extent), resolution);\n  view.animateInternal({\n    resolution: resolution,\n    center: center,\n    duration: this.duration_,\n    easing: easeOut\n  });\n}\n\nexport default DragZoom;","map":null,"metadata":{},"sourceType":"module"}