{"ast":null,"code":"const CommonSelectors = require('../lib/common_selectors');\n\nconst doubleClickZoom = require('../lib/double_click_zoom');\n\nconst Constants = require('../constants');\n\nconst isEventAtCoordinates = require('../lib/is_event_at_coordinates');\n\nconst createVertex = require('../lib/create_vertex');\n\nconst DrawPolygon = {};\n\nDrawPolygon.onSetup = function () {\n  const polygon = this.newFeature({\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.POLYGON,\n      coordinates: [[]]\n    }\n  });\n  this.addFeature(polygon);\n  this.clearSelectedFeatures();\n  doubleClickZoom.disable(this);\n  this.updateUIClasses({\n    mouse: Constants.cursors.ADD\n  });\n  this.activateUIButton(Constants.types.POLYGON);\n  this.setActionableState({\n    trash: true\n  });\n  return {\n    polygon,\n    currentVertexPosition: 0\n  };\n};\n\nDrawPolygon.clickAnywhere = function (state, e) {\n  if (state.currentVertexPosition > 0 && isEventAtCoordinates(e, state.polygon.coordinates[0][state.currentVertexPosition - 1])) {\n    return this.changeMode(Constants.modes.SIMPLE_SELECT, {\n      featureIds: [state.polygon.id]\n    });\n  }\n\n  this.updateUIClasses({\n    mouse: Constants.cursors.ADD\n  });\n  state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n  state.currentVertexPosition++;\n  state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n};\n\nDrawPolygon.clickOnVertex = function (state) {\n  return this.changeMode(Constants.modes.SIMPLE_SELECT, {\n    featureIds: [state.polygon.id]\n  });\n};\n\nDrawPolygon.onMouseMove = function (state, e) {\n  state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n\n  if (CommonSelectors.isVertex(e)) {\n    this.updateUIClasses({\n      mouse: Constants.cursors.POINTER\n    });\n  }\n};\n\nDrawPolygon.onTap = DrawPolygon.onClick = function (state, e) {\n  if (CommonSelectors.isVertex(e)) return this.clickOnVertex(state, e);\n  return this.clickAnywhere(state, e);\n};\n\nDrawPolygon.onKeyUp = function (state, e) {\n  if (CommonSelectors.isEscapeKey(e)) {\n    this.deleteFeature([state.polygon.id], {\n      silent: true\n    });\n    this.changeMode(Constants.modes.SIMPLE_SELECT);\n  } else if (CommonSelectors.isEnterKey(e)) {\n    this.changeMode(Constants.modes.SIMPLE_SELECT, {\n      featureIds: [state.polygon.id]\n    });\n  }\n};\n\nDrawPolygon.onStop = function (state) {\n  this.updateUIClasses({\n    mouse: Constants.cursors.NONE\n  });\n  doubleClickZoom.enable(this);\n  this.activateUIButton(); // check to see if we've deleted this feature\n\n  if (this.getFeature(state.polygon.id) === undefined) return; //remove last added coordinate\n\n  state.polygon.removeCoordinate(`0.${state.currentVertexPosition}`);\n\n  if (state.polygon.isValid()) {\n    this.map.fire(Constants.events.CREATE, {\n      features: [state.polygon.toGeoJSON()]\n    });\n  } else {\n    this.deleteFeature([state.polygon.id], {\n      silent: true\n    });\n    this.changeMode(Constants.modes.SIMPLE_SELECT, {}, {\n      silent: true\n    });\n  }\n};\n\nDrawPolygon.toDisplayFeatures = function (state, geojson, display) {\n  const isActivePolygon = geojson.properties.id === state.polygon.id;\n  geojson.properties.active = isActivePolygon ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  if (!isActivePolygon) return display(geojson); // Don't render a polygon until it has two positions\n  // (and a 3rd which is just the first repeated)\n\n  if (geojson.geometry.coordinates.length === 0) return;\n  const coordinateCount = geojson.geometry.coordinates[0].length; // 2 coordinates after selecting a draw type\n  // 3 after creating the first point\n\n  if (coordinateCount < 3) {\n    return;\n  }\n\n  geojson.properties.meta = Constants.meta.FEATURE;\n  display(createVertex(state.polygon.id, geojson.geometry.coordinates[0][0], '0.0', false));\n\n  if (coordinateCount > 3) {\n    // Add a start position marker to the map, clicking on this will finish the feature\n    // This should only be shown when we're in a valid spot\n    const endPos = geojson.geometry.coordinates[0].length - 3;\n    display(createVertex(state.polygon.id, geojson.geometry.coordinates[0][endPos], `0.${endPos}`, false));\n  }\n\n  if (coordinateCount <= 4) {\n    // If we've only drawn two positions (plus the closer),\n    // make a LineString instead of a Polygon\n    const lineCoordinates = [[geojson.geometry.coordinates[0][0][0], geojson.geometry.coordinates[0][0][1]], [geojson.geometry.coordinates[0][1][0], geojson.geometry.coordinates[0][1][1]]]; // create an initial vertex so that we can track the first point on mobile devices\n\n    display({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: geojson.properties,\n      geometry: {\n        coordinates: lineCoordinates,\n        type: Constants.geojsonTypes.LINE_STRING\n      }\n    });\n\n    if (coordinateCount === 3) {\n      return;\n    }\n  } // render the Polygon\n\n\n  return display(geojson);\n};\n\nDrawPolygon.onTrash = function (state) {\n  this.deleteFeature([state.polygon.id], {\n    silent: true\n  });\n  this.changeMode(Constants.modes.SIMPLE_SELECT);\n};\n\nmodule.exports = DrawPolygon;","map":{"version":3,"sources":["C:/Users/Gianluca/Documents/Scuola/Informatica/AboutMi/Sito/AboutMi/node_modules/@mapbox/mapbox-gl-draw/src/modes/draw_polygon.js"],"names":["CommonSelectors","require","doubleClickZoom","Constants","isEventAtCoordinates","createVertex","DrawPolygon","onSetup","polygon","newFeature","type","geojsonTypes","FEATURE","properties","geometry","POLYGON","coordinates","addFeature","clearSelectedFeatures","disable","updateUIClasses","mouse","cursors","ADD","activateUIButton","types","setActionableState","trash","currentVertexPosition","clickAnywhere","state","e","changeMode","modes","SIMPLE_SELECT","featureIds","id","updateCoordinate","lngLat","lng","lat","clickOnVertex","onMouseMove","isVertex","POINTER","onTap","onClick","onKeyUp","isEscapeKey","deleteFeature","silent","isEnterKey","onStop","NONE","enable","getFeature","undefined","removeCoordinate","isValid","map","fire","events","CREATE","features","toGeoJSON","toDisplayFeatures","geojson","display","isActivePolygon","active","activeStates","ACTIVE","INACTIVE","length","coordinateCount","meta","endPos","lineCoordinates","LINE_STRING","onTrash","module","exports"],"mappings":"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","sourcesContent":["const CommonSelectors = require('../lib/common_selectors');\nconst doubleClickZoom = require('../lib/double_click_zoom');\nconst Constants = require('../constants');\nconst isEventAtCoordinates = require('../lib/is_event_at_coordinates');\nconst createVertex = require('../lib/create_vertex');\n\nconst DrawPolygon = {};\n\nDrawPolygon.onSetup = function() {\n  const polygon = this.newFeature({\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.POLYGON,\n      coordinates: [[]]\n    }\n  });\n\n  this.addFeature(polygon);\n\n  this.clearSelectedFeatures();\n  doubleClickZoom.disable(this);\n  this.updateUIClasses({ mouse: Constants.cursors.ADD });\n  this.activateUIButton(Constants.types.POLYGON);\n  this.setActionableState({\n    trash: true\n  });\n\n  return {\n    polygon,\n    currentVertexPosition: 0\n  };\n};\n\nDrawPolygon.clickAnywhere = function(state, e) {\n  if (state.currentVertexPosition > 0 && isEventAtCoordinates(e, state.polygon.coordinates[0][state.currentVertexPosition - 1])) {\n    return this.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [state.polygon.id] });\n  }\n  this.updateUIClasses({ mouse: Constants.cursors.ADD });\n  state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n  state.currentVertexPosition++;\n  state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n};\n\nDrawPolygon.clickOnVertex = function(state) {\n  return this.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [state.polygon.id] });\n};\n\nDrawPolygon.onMouseMove = function(state, e) {\n  state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n  if (CommonSelectors.isVertex(e)) {\n    this.updateUIClasses({ mouse: Constants.cursors.POINTER });\n  }\n};\n\nDrawPolygon.onTap = DrawPolygon.onClick = function(state, e) {\n  if (CommonSelectors.isVertex(e)) return this.clickOnVertex(state, e);\n  return this.clickAnywhere(state, e);\n};\n\nDrawPolygon.onKeyUp = function(state, e) {\n  if (CommonSelectors.isEscapeKey(e)) {\n    this.deleteFeature([state.polygon.id], { silent: true });\n    this.changeMode(Constants.modes.SIMPLE_SELECT);\n  } else if (CommonSelectors.isEnterKey(e)) {\n    this.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [state.polygon.id] });\n  }\n};\n\nDrawPolygon.onStop = function(state) {\n  this.updateUIClasses({ mouse: Constants.cursors.NONE });\n  doubleClickZoom.enable(this);\n  this.activateUIButton();\n\n  // check to see if we've deleted this feature\n  if (this.getFeature(state.polygon.id) === undefined) return;\n\n  //remove last added coordinate\n  state.polygon.removeCoordinate(`0.${state.currentVertexPosition}`);\n  if (state.polygon.isValid()) {\n    this.map.fire(Constants.events.CREATE, {\n      features: [state.polygon.toGeoJSON()]\n    });\n  } else {\n    this.deleteFeature([state.polygon.id], { silent: true });\n    this.changeMode(Constants.modes.SIMPLE_SELECT, {}, { silent: true });\n  }\n};\n\nDrawPolygon.toDisplayFeatures = function(state, geojson, display) {\n  const isActivePolygon = geojson.properties.id === state.polygon.id;\n  geojson.properties.active = (isActivePolygon) ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  if (!isActivePolygon) return display(geojson);\n\n  // Don't render a polygon until it has two positions\n  // (and a 3rd which is just the first repeated)\n  if (geojson.geometry.coordinates.length === 0) return;\n\n  const coordinateCount = geojson.geometry.coordinates[0].length;\n  // 2 coordinates after selecting a draw type\n  // 3 after creating the first point\n  if (coordinateCount < 3) {\n    return;\n  }\n  geojson.properties.meta = Constants.meta.FEATURE;\n  display(createVertex(state.polygon.id, geojson.geometry.coordinates[0][0], '0.0', false));\n  if (coordinateCount > 3) {\n    // Add a start position marker to the map, clicking on this will finish the feature\n    // This should only be shown when we're in a valid spot\n    const endPos = geojson.geometry.coordinates[0].length - 3;\n    display(createVertex(state.polygon.id, geojson.geometry.coordinates[0][endPos], `0.${endPos}`, false));\n  }\n  if (coordinateCount <= 4) {\n    // If we've only drawn two positions (plus the closer),\n    // make a LineString instead of a Polygon\n    const lineCoordinates = [\n      [geojson.geometry.coordinates[0][0][0], geojson.geometry.coordinates[0][0][1]], [geojson.geometry.coordinates[0][1][0], geojson.geometry.coordinates[0][1][1]]\n    ];\n    // create an initial vertex so that we can track the first point on mobile devices\n    display({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: geojson.properties,\n      geometry: {\n        coordinates: lineCoordinates,\n        type: Constants.geojsonTypes.LINE_STRING\n      }\n    });\n    if (coordinateCount === 3) {\n      return;\n    }\n  }\n  // render the Polygon\n  return display(geojson);\n};\n\nDrawPolygon.onTrash = function(state) {\n  this.deleteFeature([state.polygon.id], { silent: true });\n  this.changeMode(Constants.modes.SIMPLE_SELECT);\n};\n\nmodule.exports = DrawPolygon;\n"]},"metadata":{},"sourceType":"script"}