{"ast":null,"code":"import bbox from '@turf/bbox';\nimport { isObject, point } from '@turf/helpers';\n/**\n * Takes a {@link Feature} or {@link FeatureCollection} and returns the absolute center point of all features.\n *\n * @name center\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] an Object that is used as the {@link Feature}'s properties\n * @returns {Feature<Point>} a Point feature at the absolute center point of all input features\n * @example\n * var features = turf.featureCollection([\n *   turf.point( [-97.522259, 35.4691]),\n *   turf.point( [-97.502754, 35.463455]),\n *   turf.point( [-97.508269, 35.463245])\n * ]);\n *\n * var center = turf.center(features);\n *\n * //addToMap\n * var addToMap = [features, center]\n * center.properties['marker-size'] = 'large';\n * center.properties['marker-color'] = '#000';\n */\n\nfunction center(geojson, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error('options is invalid');\n  var properties = options.properties; // Input validation\n\n  if (!geojson) throw new Error('geojson is required');\n  var ext = bbox(geojson);\n  var x = (ext[0] + ext[2]) / 2;\n  var y = (ext[1] + ext[3]) / 2;\n  return point([x, y], properties);\n}\n\nexport default center;","map":null,"metadata":{},"sourceType":"module"}