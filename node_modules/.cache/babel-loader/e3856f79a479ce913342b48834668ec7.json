{"ast":null,"code":"import { convertLength, degreesToRadians, earthRadius, isObject, point } from '@turf/helpers';\nimport { getCoord } from '@turf/invariant'; // https://en.wikipedia.org/wiki/Rhumb_line\n\n/**\n * Returns the destination {@link Point} having travelled the given distance along a Rhumb line from the\n * origin Point with the (varant) given bearing.\n *\n * @name rhumbDestination\n * @param {Coord} origin starting point\n * @param {number} distance distance from the starting point\n * @param {number} bearing varant bearing angle ranging from -180 to 180 degrees from north\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @param {Object} [options.properties={}] translate properties to destination point\n * @returns {Feature<Point>} Destination point.\n * @example\n * var pt = turf.point([-75.343, 39.984], {\"marker-color\": \"F00\"});\n * var distance = 50;\n * var bearing = 90;\n * var options = {units: 'miles'};\n *\n * var destination = turf.rhumbDestination(pt, distance, bearing, options);\n *\n * //addToMap\n * var addToMap = [pt, destination]\n * destination.properties['marker-color'] = '#00F';\n */\n\nfunction rhumbDestination(origin, distance, bearing, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error('options is invalid');\n  var units = options.units;\n  var properties = options.properties; // validation\n\n  if (!origin) throw new Error('origin is required');\n  if (distance === undefined || distance === null) throw new Error('distance is required');\n  if (bearing === undefined || bearing === null) throw new Error('bearing is required');\n  if (!(distance >= 0)) throw new Error('distance must be greater than 0');\n  var distanceInMeters = convertLength(distance, units, 'meters');\n  var coords = getCoord(origin);\n  var destination = calculateRhumbDestination(coords, distanceInMeters, bearing); // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n  // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n\n  destination[0] += destination[0] - coords[0] > 180 ? -360 : coords[0] - destination[0] > 180 ? 360 : 0;\n  return point(destination, properties);\n}\n/**\n * Returns the destination point having travelled along a rhumb line from origin point the given\n * distance on the  given bearing.\n * Adapted from Geodesy: http://www.movable-type.co.uk/scripts/latlong.html#rhumblines\n *\n * @private\n * @param   {Array<number>} origin - point\n * @param   {number} distance - Distance travelled, in same units as earth radius (default: metres).\n * @param   {number} bearing - Bearing in degrees from north.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {Array<number>} Destination point.\n */\n\n\nfunction calculateRhumbDestination(origin, distance, bearing, radius) {\n  // φ => phi\n  // λ => lambda\n  // ψ => psi\n  // Δ => Delta\n  // δ => delta\n  // θ => theta\n  radius = radius === undefined ? earthRadius : Number(radius);\n  var delta = distance / radius; // angular distance in radians\n\n  var lambda1 = origin[0] * Math.PI / 180; // to radians, but without normalize to 𝜋\n\n  var phi1 = degreesToRadians(origin[1]);\n  var theta = degreesToRadians(bearing);\n  var DeltaPhi = delta * Math.cos(theta);\n  var phi2 = phi1 + DeltaPhi; // check for some daft bugger going past the pole, normalise latitude if so\n\n  if (Math.abs(phi2) > Math.PI / 2) phi2 = phi2 > 0 ? Math.PI - phi2 : -Math.PI - phi2;\n  var DeltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));\n  var q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1); // E-W course becomes ill-conditioned with 0/0\n\n  var DeltaLambda = delta * Math.sin(theta) / q;\n  var lambda2 = lambda1 + DeltaLambda;\n  return [(lambda2 * 180 / Math.PI + 540) % 360 - 180, phi2 * 180 / Math.PI]; // normalise to −180..+180°\n}\n\nexport default rhumbDestination;","map":null,"metadata":{},"sourceType":"module"}