{"ast":null,"code":"/**\r\n * @module ol/style/Stroke\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `undefined` (no dash).\r\n * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on\r\n * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.\r\n * @property {number} [lineDashOffset=0] Line dash offset.\r\n * @property {number} [miterLimit=10] Miter limit.\r\n * @property {number} [width] Width.\r\n */\n\n/**\r\n * @classdesc\r\n * Set stroke style for vector features.\r\n * Note that the defaults given are the Canvas defaults, which will be used if\r\n * option is not defined. The `get` functions return whatever was entered in\r\n * the options; they will not return the default.\r\n * @api\r\n */\nvar Stroke =\n/** @class */\nfunction () {\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\n  function Stroke(opt_options) {\n    var options = opt_options || {};\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\r\n     */\n\n    this.color_ = options.color !== undefined ? options.color : null;\n    /**\r\n     * @private\r\n     * @type {CanvasLineCap|undefined}\r\n     */\n\n    this.lineCap_ = options.lineCap;\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\n\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n\n    this.lineDashOffset_ = options.lineDashOffset;\n    /**\r\n     * @private\r\n     * @type {CanvasLineJoin|undefined}\r\n     */\n\n    this.lineJoin_ = options.lineJoin;\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n\n    this.miterLimit_ = options.miterLimit;\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n\n    this.width_ = options.width;\n  }\n  /**\r\n   * Clones the style.\r\n   * @return {Stroke} The cloned style.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.clone = function () {\n    var color = this.getColor();\n    return new Stroke({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n      lineCap: this.getLineCap(),\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n      lineDashOffset: this.getLineDashOffset(),\n      lineJoin: this.getLineJoin(),\n      miterLimit: this.getMiterLimit(),\n      width: this.getWidth()\n    });\n  };\n  /**\r\n   * Get the stroke color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.getColor = function () {\n    return this.color_;\n  };\n  /**\r\n   * Get the line cap type for the stroke.\r\n   * @return {CanvasLineCap|undefined} Line cap.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.getLineCap = function () {\n    return this.lineCap_;\n  };\n  /**\r\n   * Get the line dash style for the stroke.\r\n   * @return {Array<number>} Line dash.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.getLineDash = function () {\n    return this.lineDash_;\n  };\n  /**\r\n   * Get the line dash offset for the stroke.\r\n   * @return {number|undefined} Line dash offset.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.getLineDashOffset = function () {\n    return this.lineDashOffset_;\n  };\n  /**\r\n   * Get the line join type for the stroke.\r\n   * @return {CanvasLineJoin|undefined} Line join.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.getLineJoin = function () {\n    return this.lineJoin_;\n  };\n  /**\r\n   * Get the miter limit for the stroke.\r\n   * @return {number|undefined} Miter limit.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.getMiterLimit = function () {\n    return this.miterLimit_;\n  };\n  /**\r\n   * Get the stroke width.\r\n   * @return {number|undefined} Width.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.getWidth = function () {\n    return this.width_;\n  };\n  /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.setColor = function (color) {\n    this.color_ = color;\n  };\n  /**\r\n   * Set the line cap.\r\n   *\r\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.setLineCap = function (lineCap) {\n    this.lineCap_ = lineCap;\n  };\n  /**\r\n   * Set the line dash.\r\n   *\r\n   * Please note that Internet Explorer 10 and lower [do not support][mdn] the\r\n   * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this\r\n   * property will have no visual effect in these browsers.\r\n   *\r\n   * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility\r\n   *\r\n   * @param {Array<number>} lineDash Line dash.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.setLineDash = function (lineDash) {\n    this.lineDash_ = lineDash;\n  };\n  /**\r\n   * Set the line dash offset.\r\n   *\r\n   * @param {number|undefined} lineDashOffset Line dash offset.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.setLineDashOffset = function (lineDashOffset) {\n    this.lineDashOffset_ = lineDashOffset;\n  };\n  /**\r\n   * Set the line join.\r\n   *\r\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.setLineJoin = function (lineJoin) {\n    this.lineJoin_ = lineJoin;\n  };\n  /**\r\n   * Set the miter limit.\r\n   *\r\n   * @param {number|undefined} miterLimit Miter limit.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.setMiterLimit = function (miterLimit) {\n    this.miterLimit_ = miterLimit;\n  };\n  /**\r\n   * Set the width.\r\n   *\r\n   * @param {number|undefined} width Width.\r\n   * @api\r\n   */\n\n\n  Stroke.prototype.setWidth = function (width) {\n    this.width_ = width;\n  };\n\n  return Stroke;\n}();\n\nexport default Stroke;","map":null,"metadata":{},"sourceType":"module"}