{"ast":null,"code":"/**\r\n * @module ol/Kinetic\r\n */\n\n/**\r\n * @classdesc\r\n * Implementation of inertial deceleration for map movement.\r\n *\r\n * @api\r\n */\nvar Kinetic =\n/** @class */\nfunction () {\n  /**\r\n   * @param {number} decay Rate of decay (must be negative).\r\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\r\n   * @param {number} delay Delay to consider to calculate the kinetic\r\n   *     initial values (milliseconds).\r\n   */\n  function Kinetic(decay, minVelocity, delay) {\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.decay_ = decay;\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    this.minVelocity_ = minVelocity;\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    this.delay_ = delay;\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\n\n    this.points_ = [];\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    this.angle_ = 0;\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    this.initialVelocity_ = 0;\n  }\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\n\n\n  Kinetic.prototype.begin = function () {\n    this.points_.length = 0;\n    this.angle_ = 0;\n    this.initialVelocity_ = 0;\n  };\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   */\n\n\n  Kinetic.prototype.update = function (x, y) {\n    this.points_.push(x, y, Date.now());\n  };\n  /**\r\n   * @return {boolean} Whether we should do kinetic animation.\r\n   */\n\n\n  Kinetic.prototype.end = function () {\n    if (this.points_.length < 6) {\n      // at least 2 points are required (i.e. there must be at least 6 elements\n      // in the array)\n      return false;\n    }\n\n    var delay = Date.now() - this.delay_;\n    var lastIndex = this.points_.length - 3;\n\n    if (this.points_[lastIndex + 2] < delay) {\n      // the last tracked point is too old, which means that the user stopped\n      // panning before releasing the map\n      return false;\n    } // get the first point which still falls into the delay time\n\n\n    var firstIndex = lastIndex - 3;\n\n    while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n      firstIndex -= 3;\n    }\n\n    var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2]; // we don't want a duration of 0 (divide by zero)\n    // we also make sure the user panned for a duration of at least one frame\n    // (1/60s) to compute sane displacement values\n\n    if (duration < 1000 / 60) {\n      return false;\n    }\n\n    var dx = this.points_[lastIndex] - this.points_[firstIndex];\n    var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n    this.angle_ = Math.atan2(dy, dx);\n    this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n    return this.initialVelocity_ > this.minVelocity_;\n  };\n  /**\r\n   * @return {number} Total distance travelled (pixels).\r\n   */\n\n\n  Kinetic.prototype.getDistance = function () {\n    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n  };\n  /**\r\n   * @return {number} Angle of the kinetic panning animation (radians).\r\n   */\n\n\n  Kinetic.prototype.getAngle = function () {\n    return this.angle_;\n  };\n\n  return Kinetic;\n}();\n\nexport default Kinetic;","map":null,"metadata":{},"sourceType":"module"}