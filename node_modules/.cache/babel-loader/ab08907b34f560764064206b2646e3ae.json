{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar helpers_1 = require(\"@turf/helpers\");\n\nvar invariant_1 = require(\"@turf/invariant\");\n\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\n\n\nfunction lineSegment(geojson) {\n  if (!geojson) {\n    throw new Error(\"geojson is required\");\n  }\n\n  var results = [];\n  meta_1.flattenEach(geojson, function (feature) {\n    lineSegmentFeature(feature, results);\n  });\n  return helpers_1.featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\n\n\nfunction lineSegmentFeature(geojson, results) {\n  var coords = [];\n  var geometry = geojson.geometry;\n\n  if (geometry !== null) {\n    switch (geometry.type) {\n      case \"Polygon\":\n        coords = invariant_1.getCoords(geometry);\n        break;\n\n      case \"LineString\":\n        coords = [invariant_1.getCoords(geometry)];\n    }\n\n    coords.forEach(function (coord) {\n      var segments = createSegments(coord, geojson.properties);\n      segments.forEach(function (segment) {\n        segment.id = results.length;\n        results.push(segment);\n      });\n    });\n  }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\n\n\nfunction createSegments(coords, properties) {\n  var segments = [];\n  coords.reduce(function (previousCoords, currentCoords) {\n    var segment = helpers_1.lineString([previousCoords, currentCoords], properties);\n    segment.bbox = bbox(previousCoords, currentCoords);\n    segments.push(segment);\n    return currentCoords;\n  });\n  return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\n\n\nfunction bbox(coords1, coords2) {\n  var x1 = coords1[0];\n  var y1 = coords1[1];\n  var x2 = coords2[0];\n  var y2 = coords2[1];\n  var west = x1 < x2 ? x1 : x2;\n  var south = y1 < y2 ? y1 : y2;\n  var east = x1 > x2 ? x1 : x2;\n  var north = y1 > y2 ? y1 : y2;\n  return [west, south, east, north];\n}\n\nexports.default = lineSegment;","map":null,"metadata":{},"sourceType":"script"}