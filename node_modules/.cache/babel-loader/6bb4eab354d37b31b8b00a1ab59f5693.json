{"ast":null,"code":"/**\r\n * @module ol/render/canvas/BuilderGroup\r\n */\nimport { createEmpty } from '../../extent.js';\nimport Builder from './Builder.js';\nimport ImageBuilder from './ImageBuilder.js';\nimport LineStringBuilder from './LineStringBuilder.js';\nimport PolygonBuilder from './PolygonBuilder.js';\nimport TextBuilder from './TextBuilder.js';\n/**\r\n * @type {Object<import(\"./BuilderType\").default, typeof Builder>}\r\n */\n\nvar BATCH_CONSTRUCTORS = {\n  'Circle': PolygonBuilder,\n  'Default': Builder,\n  'Image': ImageBuilder,\n  'LineString': LineStringBuilder,\n  'Polygon': PolygonBuilder,\n  'Text': TextBuilder\n};\n\nvar BuilderGroup =\n/** @class */\nfunction () {\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {boolean} declutter Decluttering enabled.\r\n   */\n  function BuilderGroup(tolerance, maxExtent, resolution, pixelRatio, declutter) {\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\n    this.declutter_ = declutter;\n    /**\r\n     * @type {import(\"../canvas.js\").DeclutterGroups}\r\n     * @private\r\n     */\n\n    this.declutterGroups_ = null;\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    this.tolerance_ = tolerance;\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\n\n    this.maxExtent_ = maxExtent;\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    this.pixelRatio_ = pixelRatio;\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    this.resolution_ = resolution;\n    /**\r\n     * @private\r\n     * @type {!Object<string, !Object<import(\"./BuilderType\").default, Builder>>}\r\n     */\n\n    this.buildersByZIndex_ = {};\n  }\n  /**\r\n   * @param {boolean} group Group with previous builder.\r\n   * @return {import(\"../canvas\").DeclutterGroups} The resulting instruction groups.\r\n   */\n\n\n  BuilderGroup.prototype.addDeclutter = function (group) {\n    var declutter = null;\n\n    if (this.declutter_) {\n      if (group) {\n        declutter = this.declutterGroups_;\n        /** @type {number} */\n\n        declutter[0][4]++;\n      } else {\n        declutter = [createEmpty()];\n        this.declutterGroups_ = declutter;\n        declutter[0].push(1);\n      }\n    }\n\n    return declutter;\n  };\n  /**\r\n   * @return {!Object<string, !Object<import(\"./BuilderType\").default, import(\"./Builder.js\").SerializableInstructions>>} The serializable instructions\r\n   */\n\n\n  BuilderGroup.prototype.finish = function () {\n    var builderInstructions = {};\n\n    for (var zKey in this.buildersByZIndex_) {\n      builderInstructions[zKey] = builderInstructions[zKey] || {};\n      var builders = this.buildersByZIndex_[zKey];\n\n      for (var builderKey in builders) {\n        var builderInstruction = builders[builderKey].finish();\n        builderInstructions[zKey][builderKey] = builderInstruction;\n      }\n    }\n\n    return builderInstructions;\n  };\n  /**\r\n   * @param {number|undefined} zIndex Z index.\r\n   * @param {import(\"./BuilderType.js\").default} builderType Replay type.\r\n   * @return {import(\"../VectorContext.js\").default} Replay.\r\n   */\n\n\n  BuilderGroup.prototype.getBuilder = function (zIndex, builderType) {\n    var zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';\n    var replays = this.buildersByZIndex_[zIndexKey];\n\n    if (replays === undefined) {\n      replays = {};\n      this.buildersByZIndex_[zIndexKey] = replays;\n    }\n\n    var replay = replays[builderType];\n\n    if (replay === undefined) {\n      var Constructor = BATCH_CONSTRUCTORS[builderType];\n      replay = new Constructor(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_);\n      replays[builderType] = replay;\n    }\n\n    return replay;\n  };\n\n  return BuilderGroup;\n}();\n\nexport default BuilderGroup;","map":null,"metadata":{},"sourceType":"module"}