{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SplitPolygonMode = void 0;\n\nvar _booleanPointInPolygon = _interopRequireDefault(require(\"@turf/boolean-point-in-polygon\"));\n\nvar _difference = _interopRequireDefault(require(\"@turf/difference\"));\n\nvar _buffer = _interopRequireDefault(require(\"@turf/buffer\"));\n\nvar _lineIntersect = _interopRequireDefault(require(\"@turf/line-intersect\"));\n\nvar _helpers = require(\"@turf/helpers\");\n\nvar _bearing = _interopRequireDefault(require(\"@turf/bearing\"));\n\nvar _distance = _interopRequireDefault(require(\"@turf/distance\"));\n\nvar _destination = _interopRequireDefault(require(\"@turf/destination\"));\n\nvar _polygonToLine = _interopRequireDefault(require(\"@turf/polygon-to-line\"));\n\nvar _nearestPointOnLine = _interopRequireDefault(require(\"@turf/nearest-point-on-line\"));\n\nvar _utils = require(\"../utils.js\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode.js\");\n\nvar _immutableFeatureCollection = require(\"./immutable-feature-collection.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar SplitPolygonMode =\n/*#__PURE__*/\nfunction (_BaseGeoJsonEditMode) {\n  _inherits(SplitPolygonMode, _BaseGeoJsonEditMode);\n\n  function SplitPolygonMode() {\n    _classCallCheck(this, SplitPolygonMode);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SplitPolygonMode).apply(this, arguments));\n  }\n\n  _createClass(SplitPolygonMode, [{\n    key: \"calculateMapCoords\",\n    value: function calculateMapCoords(clickSequence, mapCoords, props) {\n      var modeConfig = props.modeConfig;\n\n      if (!modeConfig || !modeConfig.lock90Degree || !clickSequence.length) {\n        return mapCoords;\n      }\n\n      if (clickSequence.length === 1) {\n        // if first point is clicked, then find closest polygon point and build ~90deg vector\n        var firstPoint = clickSequence[0];\n        var selectedGeometry = this.getSelectedGeometry(props);\n        var feature = (0, _polygonToLine.default)(selectedGeometry);\n        var lines = feature.type === 'FeatureCollection' ? feature.features : [feature];\n        var minDistance = Number.MAX_SAFE_INTEGER;\n        var closestPoint = null; // If Multipolygon, then we should find nearest polygon line and stick split to it.\n\n        lines.forEach(function (line) {\n          var snapPoint = (0, _nearestPointOnLine.default)(line, firstPoint);\n          var distanceFromOrigin = (0, _distance.default)(snapPoint, firstPoint);\n\n          if (minDistance > distanceFromOrigin) {\n            minDistance = distanceFromOrigin;\n            closestPoint = snapPoint;\n          }\n        });\n\n        if (closestPoint) {\n          // closest point is used as 90degree entry to the polygon\n          var lastBearing = (0, _bearing.default)(firstPoint, closestPoint);\n          var currentDistance = (0, _distance.default)(firstPoint, mapCoords, {\n            units: 'meters'\n          });\n          return (0, _destination.default)(firstPoint, currentDistance, lastBearing, {\n            units: 'meters'\n          }).geometry.coordinates;\n        }\n\n        return mapCoords;\n      } // Allow only 90 degree turns\n\n\n      var lastPoint = clickSequence[clickSequence.length - 1];\n\n      var _generatePointsParall = (0, _utils.generatePointsParallelToLinePoints)(clickSequence[clickSequence.length - 2], lastPoint, mapCoords),\n          _generatePointsParall2 = _slicedToArray(_generatePointsParall, 1),\n          approximatePoint = _generatePointsParall2[0]; // align point with current ground\n\n\n      var nearestPt = (0, _nearestPointOnLine.default)((0, _helpers.lineString)([lastPoint, approximatePoint]), mapCoords).geometry.coordinates;\n      return nearestPt;\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var clickSequence = this.getClickSequence();\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n\n      if (clickSequence.length === 0 || !props.lastPointerMoveEvent) {\n        // nothing to do yet\n        return guides;\n      }\n\n      var mapCoords = props.lastPointerMoveEvent.mapCoords;\n      guides.features.push({\n        type: 'Feature',\n        properties: {\n          guideType: 'tentative'\n        },\n        geometry: {\n          type: 'LineString',\n          coordinates: _toConsumableArray(clickSequence).concat([this.calculateMapCoords(clickSequence, mapCoords, props)])\n        }\n      });\n      return guides;\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var tentativeFeature = this.getTentativeGuide(props);\n      var selectedGeometry = this.getSelectedGeometry(props);\n\n      if (!selectedGeometry) {\n        // eslint-disable-next-line no-console,no-undef\n        console.warn('A polygon must be selected for splitting');\n        return;\n      }\n\n      var clickSequence = this.getClickSequence();\n\n      if (tentativeFeature && tentativeFeature.geometry.type === 'LineString') {\n        clickSequence.push(tentativeFeature.geometry.coordinates[tentativeFeature.geometry.coordinates.length - 1]);\n      } else {\n        this.addClickSequence(event);\n      }\n\n      var pt = {\n        type: 'Point',\n        coordinates: clickSequence[clickSequence.length - 1]\n      };\n      var isPointInPolygon = (0, _booleanPointInPolygon.default)(pt, selectedGeometry);\n\n      if (clickSequence.length > 1 && tentativeFeature && !isPointInPolygon) {\n        this.resetClickSequence();\n        var isLineInterectingWithPolygon = (0, _lineIntersect.default)(tentativeFeature, selectedGeometry);\n\n        if (isLineInterectingWithPolygon.features.length === 0) {\n          return;\n        }\n\n        var editAction = this.splitPolygon(tentativeFeature, props);\n\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      }\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n    }\n  }, {\n    key: \"splitPolygon\",\n    value: function splitPolygon(tentativeFeature, props) {\n      var selectedGeometry = this.getSelectedGeometry(props);\n      var featureIndex = props.selectedIndexes[0];\n      var modeConfig = props.modeConfig || {}; // Default gap in between the polygon\n\n      var _modeConfig$gap = modeConfig.gap,\n          gap = _modeConfig$gap === void 0 ? 0.1 : _modeConfig$gap,\n          _modeConfig$units = modeConfig.units,\n          units = _modeConfig$units === void 0 ? 'centimeters' : _modeConfig$units;\n\n      if (gap === 0) {\n        gap = 0.1;\n        units = 'centimeters';\n      }\n\n      var buffer = (0, _buffer.default)(tentativeFeature, gap, {\n        units: units\n      });\n      var updatedGeometry = (0, _difference.default)(selectedGeometry, buffer);\n\n      if (!updatedGeometry) {\n        // eslint-disable-next-line no-console,no-undef\n        console.warn('Canceling edit. Split Polygon erased');\n        return null;\n      }\n\n      var _updatedGeometry$geom = updatedGeometry.geometry,\n          type = _updatedGeometry$geom.type,\n          coordinates = _updatedGeometry$geom.coordinates;\n      var updatedCoordinates = [];\n\n      if (type === 'Polygon') {\n        // Update the coordinates as per Multipolygon\n        updatedCoordinates = coordinates.map(function (c) {\n          return [c];\n        });\n      } else {\n        // Handle Case when Multipolygon has holes\n        updatedCoordinates = coordinates.reduce(function (agg, prev) {\n          prev.forEach(function (p) {\n            agg.push([p]);\n          });\n          return agg;\n        }, []);\n      } // Update the type to Mulitpolygon\n\n\n      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replaceGeometry(featureIndex, {\n        type: 'MultiPolygon',\n        coordinates: updatedCoordinates\n      });\n      var editAction = {\n        updatedData: updatedData.getObject(),\n        editType: 'split',\n        editContext: {\n          featureIndexes: [featureIndex]\n        }\n      };\n      return editAction;\n    }\n  }]);\n\n  return SplitPolygonMode;\n}(_geojsonEditMode.BaseGeoJsonEditMode);\n\nexports.SplitPolygonMode = SplitPolygonMode;","map":null,"metadata":{},"sourceType":"script"}