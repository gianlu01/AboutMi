{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/Geolocation\r\n */\n\n\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport BaseEvent from './events/Event.js';\nimport EventType from './events/EventType.js';\nimport { circular as circularPolygon } from './geom/Polygon.js';\nimport { toRadians } from './math.js';\nimport { get as getProjection, getTransformFromProjections, identityTransform } from './proj.js';\n/**\r\n * @enum {string}\r\n */\n\nvar Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions'\n};\n/**\r\n * @classdesc\r\n * Events emitted on Geolocation error.\r\n */\n\nvar GeolocationError =\n/** @class */\nfunction (_super) {\n  __extends(GeolocationError, _super);\n  /**\r\n   * @param {PositionError} error error object.\r\n   */\n\n\n  function GeolocationError(error) {\n    var _this = _super.call(this, EventType.ERROR) || this;\n    /**\r\n     * @type {number}\r\n     */\n\n\n    _this.code = error.code;\n    /**\r\n     * @type {string}\r\n     */\n\n    _this.message = error.message;\n    return _this;\n  }\n\n  return GeolocationError;\n}(BaseEvent);\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [tracking=false] Start Tracking right after\r\n * instantiation.\r\n * @property {PositionOptions} [trackingOptions] Tracking options.\r\n * See http://www.w3.org/TR/geolocation-API/#position_options_interface.\r\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\r\n * is reported in.\r\n */\n\n/**\r\n * @classdesc\r\n * Helper class for providing HTML5 Geolocation capabilities.\r\n * The [Geolocation API](http://www.w3.org/TR/geolocation-API/)\r\n * is used to locate a user's position.\r\n *\r\n * To get notified of position changes, register a listener for the generic\r\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\r\n *\r\n * Example:\r\n *\r\n *     var geolocation = new Geolocation({\r\n *       // take the projection to use from the map's view\r\n *       projection: view.getProjection()\r\n *     });\r\n *     // listen to changes in position\r\n *     geolocation.on('change', function(evt) {\r\n *       window.console.log(geolocation.getPosition());\r\n *     });\r\n *\r\n * @fires module:ol/events/Event~BaseEvent#event:error\r\n * @api\r\n */\n\n\nvar Geolocation =\n/** @class */\nfunction (_super) {\n  __extends(Geolocation, _super);\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\n\n\n  function Geolocation(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options || {};\n    /**\r\n     * The unprojected (EPSG:4326) device position.\r\n     * @private\r\n     * @type {?import(\"./coordinate.js\").Coordinate}\r\n     */\n\n    _this.position_ = null;\n    /**\r\n     * @private\r\n     * @type {import(\"./proj.js\").TransformFunction}\r\n     */\n\n    _this.transform_ = identityTransform;\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n\n    _this.watchId_ = undefined;\n\n    _this.addEventListener(getChangeEventType(Property.PROJECTION), _this.handleProjectionChanged_);\n\n    _this.addEventListener(getChangeEventType(Property.TRACKING), _this.handleTrackingChanged_);\n\n    if (options.projection !== undefined) {\n      _this.setProjection(options.projection);\n    }\n\n    if (options.trackingOptions !== undefined) {\n      _this.setTrackingOptions(options.trackingOptions);\n    }\n\n    _this.setTracking(options.tracking !== undefined ? options.tracking : false);\n\n    return _this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Geolocation.prototype.disposeInternal = function () {\n    this.setTracking(false);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\r\n   * @private\r\n   */\n\n\n  Geolocation.prototype.handleProjectionChanged_ = function () {\n    var projection = this.getProjection();\n\n    if (projection) {\n      this.transform_ = getTransformFromProjections(getProjection('EPSG:4326'), projection);\n\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  };\n  /**\r\n   * @private\r\n   */\n\n\n  Geolocation.prototype.handleTrackingChanged_ = function () {\n    if ('geolocation' in navigator) {\n      var tracking = this.getTracking();\n\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  };\n  /**\r\n   * @private\r\n   * @param {Position} position position event.\r\n   */\n\n\n  Geolocation.prototype.positionChange_ = function (position) {\n    var coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n    this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n    this.set(Property.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));\n\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n\n    var projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition);\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n    var geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  };\n  /**\r\n   * @private\r\n   * @param {PositionError} error error object.\r\n   */\n\n\n  Geolocation.prototype.positionError_ = function (error) {\n    this.setTracking(false);\n    this.dispatchEvent(new GeolocationError(error));\n  };\n  /**\r\n   * Get the accuracy of the position in meters.\r\n   * @return {number|undefined} The accuracy of the position measurement in\r\n   *     meters.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.getAccuracy = function () {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.ACCURACY)\n    );\n  };\n  /**\r\n   * Get a geometry of the position accuracy.\r\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.getAccuracyGeometry = function () {\n    return (\n      /** @type {?import(\"./geom/Polygon.js\").default} */\n      this.get(Property.ACCURACY_GEOMETRY) || null\n    );\n  };\n  /**\r\n   * Get the altitude associated with the position.\r\n   * @return {number|undefined} The altitude of the position in meters above mean\r\n   *     sea level.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.getAltitude = function () {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.ALTITUDE)\n    );\n  };\n  /**\r\n   * Get the altitude accuracy of the position.\r\n   * @return {number|undefined} The accuracy of the altitude measurement in\r\n   *     meters.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.getAltitudeAccuracy = function () {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.ALTITUDE_ACCURACY)\n    );\n  };\n  /**\r\n   * Get the heading as radians clockwise from North.\r\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\r\n   * is set to `true` in the tracking options.\r\n   * @return {number|undefined} The heading of the device in radians from north.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.getHeading = function () {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.HEADING)\n    );\n  };\n  /**\r\n   * Get the position of the device.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\r\n   *     in the current projection.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.getPosition = function () {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(Property.POSITION)\n    );\n  };\n  /**\r\n   * Get the projection associated with the position.\r\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\r\n   *     reported in.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.getProjection = function () {\n    return (\n      /** @type {import(\"./proj/Projection.js\").default|undefined} */\n      this.get(Property.PROJECTION)\n    );\n  };\n  /**\r\n   * Get the speed in meters per second.\r\n   * @return {number|undefined} The instantaneous speed of the device in meters\r\n   *     per second.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.getSpeed = function () {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.SPEED)\n    );\n  };\n  /**\r\n   * Determine if the device location is being tracked.\r\n   * @return {boolean} The device location is being tracked.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.getTracking = function () {\n    return (\n      /** @type {boolean} */\n      this.get(Property.TRACKING)\n    );\n  };\n  /**\r\n   * Get the tracking options.\r\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\r\n   * @return {PositionOptions|undefined} PositionOptions as defined by\r\n   *     the [HTML5 Geolocation spec\r\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.getTrackingOptions = function () {\n    return (\n      /** @type {PositionOptions|undefined} */\n      this.get(Property.TRACKING_OPTIONS)\n    );\n  };\n  /**\r\n   * Set the projection to use for transforming the coordinates.\r\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\r\n   *     reported in.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.setProjection = function (projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  };\n  /**\r\n   * Enable or disable tracking.\r\n   * @param {boolean} tracking Enable tracking.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.setTracking = function (tracking) {\n    this.set(Property.TRACKING, tracking);\n  };\n  /**\r\n   * Set the tracking options.\r\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\r\n   * @param {PositionOptions} options PositionOptions as defined by the\r\n   *     [HTML5 Geolocation spec\r\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Geolocation.prototype.setTrackingOptions = function (options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  };\n\n  return Geolocation;\n}(BaseObject);\n\nexport default Geolocation;","map":null,"metadata":{},"sourceType":"module"}