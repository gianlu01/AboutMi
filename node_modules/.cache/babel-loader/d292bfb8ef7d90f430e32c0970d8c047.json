{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/interaction/Pointer\r\n */\n\n\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Interaction from './Interaction.js';\nimport { getValues } from '../obj.js';\n/**\r\n * @typedef {Object} Options\r\n * @property {function(import(\"../MapBrowserPointerEvent.js\").default):boolean} [handleDownEvent]\r\n * Function handling \"down\" events. If the function returns `true` then a drag\r\n * sequence is started.\r\n * @property {function(import(\"../MapBrowserPointerEvent.js\").default)} [handleDragEvent]\r\n * Function handling \"drag\" events. This function is called on \"move\" events\r\n * during a drag sequence.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\r\n * Method called by the map to notify the interaction that a browser event was\r\n * dispatched to the map. The function may return `false` to prevent the\r\n * propagation of the event to other interactions in the map's interactions\r\n * chain.\r\n * @property {function(import(\"../MapBrowserPointerEvent.js\").default)} [handleMoveEvent]\r\n * Function handling \"move\" events. This function is called on \"move\" events.\r\n * This functions is also called during a drag sequence, so during a drag\r\n * sequence both the `handleDragEvent` function and this function are called.\r\n * If `handleDownEvent` is defined and it returns true this function will not\r\n * be called during a drag sequence.\r\n * @property {function(import(\"../MapBrowserPointerEvent.js\").default):boolean} [handleUpEvent]\r\n *  Function handling \"up\" events. If the function returns `false` then the\r\n * current drag sequence is stopped.\r\n * @property {function(boolean):boolean} [stopDown]\r\n * Should the down event be propagated to other interactions, or should be\r\n * stopped?\r\n */\n\n/**\r\n * @classdesc\r\n * Base class that calls user-defined functions on `down`, `move` and `up`\r\n * events. This class also manages \"drag sequences\".\r\n *\r\n * When the `handleDownEvent` user function returns `true` a drag sequence is\r\n * started. During a drag sequence the `handleDragEvent` user function is\r\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\r\n * user function is called and returns `false`.\r\n * @api\r\n */\n\nvar PointerInteraction =\n/** @class */\nfunction (_super) {\n  __extends(PointerInteraction, _super);\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\n\n\n  function PointerInteraction(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this,\n    /** @type {import(\"./Interaction.js\").InteractionOptions} */\n    options) || this;\n\n    if (options.handleDownEvent) {\n      _this.handleDownEvent = options.handleDownEvent;\n    }\n\n    if (options.handleDragEvent) {\n      _this.handleDragEvent = options.handleDragEvent;\n    }\n\n    if (options.handleMoveEvent) {\n      _this.handleMoveEvent = options.handleMoveEvent;\n    }\n\n    if (options.handleUpEvent) {\n      _this.handleUpEvent = options.handleUpEvent;\n    }\n\n    if (options.stopDown) {\n      _this.stopDown = options.stopDown;\n    }\n    /**\r\n     * @type {boolean}\r\n     * @protected\r\n     */\n\n\n    _this.handlingDownUpSequence = false;\n    /**\r\n     * @type {!Object<string, PointerEvent>}\r\n     * @private\r\n     */\n\n    _this.trackedPointers_ = {};\n    /**\r\n     * @type {Array<PointerEvent>}\r\n     * @protected\r\n     */\n\n    _this.targetPointers = [];\n    return _this;\n  }\n  /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @protected\r\n   */\n\n\n  PointerInteraction.prototype.handleDownEvent = function (mapBrowserEvent) {\n    return false;\n  };\n  /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\r\n   * @protected\r\n   */\n\n\n  PointerInteraction.prototype.handleDragEvent = function (mapBrowserEvent) {};\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into\r\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\r\n   * detected.\r\n   * @override\r\n   * @api\r\n   */\n\n\n  PointerInteraction.prototype.handleEvent = function (mapBrowserEvent) {\n    if (!\n    /** @type {import(\"../MapBrowserPointerEvent.js\").default} */\n    mapBrowserEvent.pointerEvent) {\n      return true;\n    }\n\n    var stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        var handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        var handled = this.handleDownEvent(mapBrowserEvent);\n\n        if (handled) {\n          mapBrowserEvent.preventDefault();\n        }\n\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n\n    return !stopEvent;\n  };\n  /**\r\n   * Handle pointer move events.\r\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\r\n   * @protected\r\n   */\n\n\n  PointerInteraction.prototype.handleMoveEvent = function (mapBrowserEvent) {};\n  /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @protected\r\n   */\n\n\n  PointerInteraction.prototype.handleUpEvent = function (mapBrowserEvent) {\n    return false;\n  };\n  /**\r\n   * This function is used to determine if \"down\" events should be propagated\r\n   * to other interactions or should be stopped.\r\n   * @param {boolean} handled Was the event handled by the interaction?\r\n   * @return {boolean} Should the `down` event be stopped?\r\n   */\n\n\n  PointerInteraction.prototype.stopDown = function (handled) {\n    return handled;\n  };\n  /**\r\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\r\n   * @private\r\n   */\n\n\n  PointerInteraction.prototype.updateTrackedPointers_ = function (mapBrowserEvent) {\n    if (isPointerDraggingEvent(mapBrowserEvent)) {\n      var event_1 = mapBrowserEvent.pointerEvent;\n      var id = event_1.pointerId.toString();\n\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        delete this.trackedPointers_[id];\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        this.trackedPointers_[id] = event_1;\n      } else if (id in this.trackedPointers_) {\n        // update only when there was a pointerdown event for this pointer\n        this.trackedPointers_[id] = event_1;\n      }\n\n      this.targetPointers = getValues(this.trackedPointers_);\n    }\n  };\n\n  return PointerInteraction;\n}(Interaction);\n/**\r\n * @param {Array<PointerEvent>} pointerEvents List of events.\r\n * @return {import(\"../pixel.js\").Pixel} Centroid pixel.\r\n */\n\n\nexport function centroid(pointerEvents) {\n  var length = pointerEvents.length;\n  var clientX = 0;\n  var clientY = 0;\n\n  for (var i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n\n  return [clientX / length, clientY / length];\n}\n/**\r\n * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\r\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\r\n *     or pointerup event.\r\n */\n\nfunction isPointerDraggingEvent(mapBrowserEvent) {\n  var type = mapBrowserEvent.type;\n  return type === MapBrowserEventType.POINTERDOWN || type === MapBrowserEventType.POINTERDRAG || type === MapBrowserEventType.POINTERUP;\n}\n\nexport default PointerInteraction;","map":null,"metadata":{},"sourceType":"module"}