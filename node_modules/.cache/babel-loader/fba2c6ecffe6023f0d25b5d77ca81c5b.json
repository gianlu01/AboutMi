{"ast":null,"code":"/**\r\n * @module ol/render/VectorContext\r\n */\n\n/**\r\n * @classdesc\r\n * Context for drawing geometries.  A vector context is available on render\r\n * events and does not need to be constructed directly.\r\n * @api\r\n */\nvar VectorContext =\n/** @class */\nfunction () {\n  function VectorContext() {}\n  /**\r\n   * Render a geometry with a custom renderer.\r\n   *\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {Function} renderer Renderer.\r\n   */\n\n\n  VectorContext.prototype.drawCustom = function (geometry, feature, renderer) {};\n  /**\r\n   * Render a geometry.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry The geometry to render.\r\n   */\n\n\n  VectorContext.prototype.drawGeometry = function (geometry) {};\n  /**\r\n   * Set the rendering style.\r\n   *\r\n   * @param {import(\"../style/Style.js\").default} style The rendering style.\r\n   */\n\n\n  VectorContext.prototype.setStyle = function (style) {};\n  /**\r\n   * @param {import(\"../geom/Circle.js\").default} circleGeometry Circle geometry.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   */\n\n\n  VectorContext.prototype.drawCircle = function (circleGeometry, feature) {};\n  /**\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"../style/Style.js\").default} style Style.\r\n   */\n\n\n  VectorContext.prototype.drawFeature = function (feature, style) {};\n  /**\r\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometryCollectionGeometry Geometry collection.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   */\n\n\n  VectorContext.prototype.drawGeometryCollection = function (geometryCollectionGeometry, feature) {};\n  /**\r\n   * @param {import(\"../geom/LineString.js\").default|import(\"./Feature.js\").default} lineStringGeometry Line string geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\n\n\n  VectorContext.prototype.drawLineString = function (lineStringGeometry, feature) {};\n  /**\r\n   * @param {import(\"../geom/MultiLineString.js\").default|import(\"./Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\n\n\n  VectorContext.prototype.drawMultiLineString = function (multiLineStringGeometry, feature) {};\n  /**\r\n   * @param {import(\"../geom/MultiPoint.js\").default|import(\"./Feature.js\").default} multiPointGeometry MultiPoint geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\n\n\n  VectorContext.prototype.drawMultiPoint = function (multiPointGeometry, feature) {};\n  /**\r\n   * @param {import(\"../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\n\n\n  VectorContext.prototype.drawMultiPolygon = function (multiPolygonGeometry, feature) {};\n  /**\r\n   * @param {import(\"../geom/Point.js\").default|import(\"./Feature.js\").default} pointGeometry Point geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\n\n\n  VectorContext.prototype.drawPoint = function (pointGeometry, feature) {};\n  /**\r\n   * @param {import(\"../geom/Polygon.js\").default|import(\"./Feature.js\").default} polygonGeometry Polygon geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\n\n\n  VectorContext.prototype.drawPolygon = function (polygonGeometry, feature) {};\n  /**\r\n   * @param {import(\"../geom/Geometry.js\").default|import(\"./Feature.js\").default} geometry Geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\n\n\n  VectorContext.prototype.drawText = function (geometry, feature) {};\n  /**\r\n   * @param {import(\"../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   */\n\n\n  VectorContext.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) {};\n  /**\r\n   * @param {import(\"../style/Image.js\").default} imageStyle Image style.\r\n   * @param {import(\"./canvas.js\").DeclutterGroup=} opt_declutterGroup Declutter.\r\n   */\n\n\n  VectorContext.prototype.setImageStyle = function (imageStyle, opt_declutterGroup) {};\n  /**\r\n   * @param {import(\"../style/Text.js\").default} textStyle Text style.\r\n   * @param {import(\"./canvas.js\").DeclutterGroups=} opt_declutterGroups Declutter.\r\n   */\n\n\n  VectorContext.prototype.setTextStyle = function (textStyle, opt_declutterGroups) {};\n\n  return VectorContext;\n}();\n\nexport default VectorContext;","map":null,"metadata":{},"sourceType":"module"}