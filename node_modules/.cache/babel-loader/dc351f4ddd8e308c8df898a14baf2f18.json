{"ast":null,"code":"const Feature = require('./feature');\n\nconst Constants = require('../constants');\n\nconst hat = require('hat');\n\nconst models = {\n  MultiPoint: require('./point'),\n  MultiLineString: require('./line_string'),\n  MultiPolygon: require('./polygon')\n};\n\nconst takeAction = (features, action, path, lng, lat) => {\n  const parts = path.split('.');\n  const idx = parseInt(parts[0], 10);\n  const tail = !parts[1] ? null : parts.slice(1).join('.');\n  return features[idx][action](tail, lng, lat);\n};\n\nconst MultiFeature = function (ctx, geojson) {\n  Feature.call(this, ctx, geojson);\n  delete this.coordinates;\n  this.model = models[geojson.geometry.type];\n  if (this.model === undefined) throw new TypeError(`${geojson.geometry.type} is not a valid type`);\n  this.features = this._coordinatesToFeatures(geojson.geometry.coordinates);\n};\n\nMultiFeature.prototype = Object.create(Feature.prototype);\n\nMultiFeature.prototype._coordinatesToFeatures = function (coordinates) {\n  const Model = this.model.bind(this);\n  return coordinates.map(coords => new Model(this.ctx, {\n    id: hat(),\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      coordinates: coords,\n      type: this.type.replace('Multi', '')\n    }\n  }));\n};\n\nMultiFeature.prototype.isValid = function () {\n  return this.features.every(f => f.isValid());\n};\n\nMultiFeature.prototype.setCoordinates = function (coords) {\n  this.features = this._coordinatesToFeatures(coords);\n  this.changed();\n};\n\nMultiFeature.prototype.getCoordinate = function (path) {\n  return takeAction(this.features, 'getCoordinate', path);\n};\n\nMultiFeature.prototype.getCoordinates = function () {\n  return JSON.parse(JSON.stringify(this.features.map(f => {\n    if (f.type === Constants.geojsonTypes.POLYGON) return f.getCoordinates();\n    return f.coordinates;\n  })));\n};\n\nMultiFeature.prototype.updateCoordinate = function (path, lng, lat) {\n  takeAction(this.features, 'updateCoordinate', path, lng, lat);\n  this.changed();\n};\n\nMultiFeature.prototype.addCoordinate = function (path, lng, lat) {\n  takeAction(this.features, 'addCoordinate', path, lng, lat);\n  this.changed();\n};\n\nMultiFeature.prototype.removeCoordinate = function (path) {\n  takeAction(this.features, 'removeCoordinate', path);\n  this.changed();\n};\n\nMultiFeature.prototype.getFeatures = function () {\n  return this.features;\n};\n\nmodule.exports = MultiFeature;","map":{"version":3,"sources":["/home/gianluca/Documenti/Scuola/Informatica/Progetto/AboutMi/node_modules/@mapbox/mapbox-gl-draw/src/feature_types/multi_feature.js"],"names":["Feature","require","Constants","hat","models","MultiPoint","MultiLineString","MultiPolygon","takeAction","features","action","path","lng","lat","parts","split","idx","parseInt","tail","slice","join","MultiFeature","ctx","geojson","call","coordinates","model","geometry","type","undefined","TypeError","_coordinatesToFeatures","prototype","Object","create","Model","bind","map","coords","id","geojsonTypes","FEATURE","properties","replace","isValid","every","f","setCoordinates","changed","getCoordinate","getCoordinates","JSON","parse","stringify","POLYGON","updateCoordinate","addCoordinate","removeCoordinate","getFeatures","module","exports"],"mappings":"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","sourcesContent":["const Feature = require('./feature');\nconst Constants = require('../constants');\nconst hat = require('hat');\n\nconst models = {\n  MultiPoint: require('./point'),\n  MultiLineString: require('./line_string'),\n  MultiPolygon: require('./polygon')\n};\n\nconst takeAction = (features, action, path, lng, lat) => {\n  const parts = path.split('.');\n  const idx = parseInt(parts[0], 10);\n  const tail = (!parts[1]) ? null : parts.slice(1).join('.');\n  return features[idx][action](tail, lng, lat);\n};\n\nconst MultiFeature = function(ctx, geojson) {\n  Feature.call(this, ctx, geojson);\n\n  delete this.coordinates;\n  this.model = models[geojson.geometry.type];\n  if (this.model === undefined) throw new TypeError(`${geojson.geometry.type} is not a valid type`);\n  this.features = this._coordinatesToFeatures(geojson.geometry.coordinates);\n};\n\nMultiFeature.prototype = Object.create(Feature.prototype);\n\nMultiFeature.prototype._coordinatesToFeatures = function(coordinates) {\n  const Model = this.model.bind(this);\n  return coordinates.map(coords => new Model(this.ctx, {\n    id: hat(),\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      coordinates: coords,\n      type: this.type.replace('Multi', '')\n    }\n  }));\n};\n\nMultiFeature.prototype.isValid = function() {\n  return this.features.every(f => f.isValid());\n};\n\nMultiFeature.prototype.setCoordinates = function(coords) {\n  this.features = this._coordinatesToFeatures(coords);\n  this.changed();\n};\n\nMultiFeature.prototype.getCoordinate = function(path) {\n  return takeAction(this.features, 'getCoordinate', path);\n};\n\nMultiFeature.prototype.getCoordinates = function() {\n  return JSON.parse(JSON.stringify(this.features.map(f => {\n    if (f.type === Constants.geojsonTypes.POLYGON) return f.getCoordinates();\n    return f.coordinates;\n  })));\n};\n\nMultiFeature.prototype.updateCoordinate = function(path, lng, lat) {\n  takeAction(this.features, 'updateCoordinate', path, lng, lat);\n  this.changed();\n};\n\nMultiFeature.prototype.addCoordinate = function(path, lng, lat) {\n  takeAction(this.features, 'addCoordinate', path, lng, lat);\n  this.changed();\n};\n\nMultiFeature.prototype.removeCoordinate = function(path) {\n  takeAction(this.features, 'removeCoordinate', path);\n  this.changed();\n};\n\nMultiFeature.prototype.getFeatures = function() {\n  return this.features;\n};\n\nmodule.exports = MultiFeature;\n"]},"metadata":{},"sourceType":"script"}