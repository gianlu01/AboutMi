{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // https://en.wikipedia.org/wiki/Rhumb_line\n\nvar helpers_1 = require(\"@turf/helpers\");\n\nvar invariant_1 = require(\"@turf/invariant\");\n/**\n * Calculates the distance along a rhumb line between two {@link Point|points} in degrees, radians,\n * miles, or kilometers.\n *\n * @name rhumbDistance\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.rhumbDistance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\n\n\nfunction rhumbDistance(from, to, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var origin = invariant_1.getCoord(from);\n  var destination = invariant_1.getCoord(to); // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n  // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n\n  destination[0] += destination[0] - origin[0] > 180 ? -360 : origin[0] - destination[0] > 180 ? 360 : 0;\n  var distanceInMeters = calculateRhumbDistance(origin, destination);\n  var distance = helpers_1.convertLength(distanceInMeters, \"meters\", options.units);\n  return distance;\n}\n/**\n * Returns the distance travelling from ‘this’ point to destination point along a rhumb line.\n * Adapted from Geodesy: https://github.com/chrisveness/geodesy/blob/master/latlon-spherical.js\n *\n * @private\n * @param   {Array<number>} origin point.\n * @param   {Array<number>} destination point.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {number} Distance in km between this point and destination point (same units as radius).\n *\n * @example\n *     var p1 = new LatLon(51.127, 1.338);\n *     var p2 = new LatLon(50.964, 1.853);\n *     var d = p1.distanceTo(p2); // 40.31 km\n */\n\n\nfunction calculateRhumbDistance(origin, destination, radius) {\n  // φ => phi\n  // λ => lambda\n  // ψ => psi\n  // Δ => Delta\n  // δ => delta\n  // θ => theta\n  radius = radius === undefined ? helpers_1.earthRadius : Number(radius); // see www.edwilliams.org/avform.htm#Rhumb\n\n  var R = radius;\n  var phi1 = origin[1] * Math.PI / 180;\n  var phi2 = destination[1] * Math.PI / 180;\n  var DeltaPhi = phi2 - phi1;\n  var DeltaLambda = Math.abs(destination[0] - origin[0]) * Math.PI / 180; // if dLon over 180° take shorter rhumb line across the anti-meridian:\n\n  if (DeltaLambda > Math.PI) {\n    DeltaLambda -= 2 * Math.PI;\n  } // on Mercator projection, longitude distances shrink by latitude; q is the 'stretch factor'\n  // q becomes ill-conditioned along E-W line (0/0); use empirical tolerance to avoid it\n\n\n  var DeltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));\n  var q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1); // distance is pythagoras on 'stretched' Mercator projection\n\n  var delta = Math.sqrt(DeltaPhi * DeltaPhi + q * q * DeltaLambda * DeltaLambda); // angular distance in radians\n\n  var dist = delta * R;\n  return dist;\n}\n\nexports.default = rhumbDistance;","map":null,"metadata":{},"sourceType":"script"}