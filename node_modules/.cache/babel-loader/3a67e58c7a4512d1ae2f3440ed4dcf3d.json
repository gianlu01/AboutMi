{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ModifyMode = void 0;\n\nvar _nearestPointOnLine2 = _interopRequireDefault(require(\"@turf/nearest-point-on-line\"));\n\nvar _helpers = require(\"@turf/helpers\");\n\nvar _utils = require(\"../utils.js\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode.js\");\n\nvar _immutableFeatureCollection = require(\"./immutable-feature-collection.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar ModifyMode =\n/*#__PURE__*/\nfunction (_BaseGeoJsonEditMode) {\n  _inherits(ModifyMode, _BaseGeoJsonEditMode);\n\n  function ModifyMode() {\n    _classCallCheck(this, ModifyMode);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ModifyMode).apply(this, arguments));\n  }\n\n  _createClass(ModifyMode, [{\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var _this = this;\n\n      var handles = [];\n      var data = props.data,\n          lastPointerMoveEvent = props.lastPointerMoveEvent;\n      var features = data.features;\n      var picks = lastPointerMoveEvent && lastPointerMoveEvent.picks;\n      var mapCoords = lastPointerMoveEvent && lastPointerMoveEvent.mapCoords;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = props.selectedIndexes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _index = _step.value;\n\n          if (_index < features.length) {\n            var geometry = features[_index].geometry;\n            handles.push.apply(handles, _toConsumableArray((0, _utils.getEditHandlesForGeometry)(geometry, _index)));\n          } else {\n            console.warn(\"selectedFeatureIndexes out of range \".concat(_index)); // eslint-disable-line no-console,no-undef\n          }\n        } // intermediate edit handle\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (picks && picks.length && mapCoords) {\n        var existingEditHandle = (0, _utils.getPickedExistingEditHandle)(picks); // don't show intermediate point when too close to an existing edit handle\n\n        var featureAsPick = !existingEditHandle && picks.find(function (pick) {\n          return !pick.isGuide;\n        }); // is the feature in the pick selected\n\n        if (featureAsPick && !featureAsPick.object.geometry.type.includes('Point') && props.selectedIndexes.includes(featureAsPick.index)) {\n          var intermediatePoint = null;\n          var positionIndexPrefix = [];\n          var referencePoint = (0, _helpers.point)(mapCoords); // process all lines of the (single) feature\n\n          (0, _utils.recursivelyTraverseNestedArrays)(featureAsPick.object.geometry.coordinates, [], function (lineString, prefix) {\n            var lineStringFeature = (0, _helpers.lineString)(lineString);\n\n            var candidateIntermediatePoint = _this.nearestPointOnLine(lineStringFeature, referencePoint, props.modeConfig && props.modeConfig.viewport);\n\n            if (!intermediatePoint || candidateIntermediatePoint.properties.dist < intermediatePoint.properties.dist) {\n              intermediatePoint = candidateIntermediatePoint;\n              positionIndexPrefix = prefix;\n            }\n          }); // tack on the lone intermediate point to the set of handles\n\n          if (intermediatePoint) {\n            var _intermediatePoint = intermediatePoint,\n                position = _intermediatePoint.geometry.coordinates,\n                index = _intermediatePoint.properties.index;\n            handles.push({\n              type: 'Feature',\n              properties: {\n                guideType: 'editHandle',\n                editHandleType: 'intermediate',\n                featureIndex: featureAsPick.index,\n                positionIndexes: _toConsumableArray(positionIndexPrefix).concat([index + 1])\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: position\n              }\n            });\n          }\n        }\n      }\n\n      return {\n        type: 'FeatureCollection',\n        features: handles\n      };\n    } // turf.js does not support elevation for nearestPointOnLine\n\n  }, {\n    key: \"nearestPointOnLine\",\n    value: function nearestPointOnLine(line, inPoint, viewport) {\n      var coordinates = line.geometry.coordinates;\n\n      if (coordinates.some(function (coord) {\n        return coord.length > 2;\n      })) {\n        if (viewport) {\n          // This line has elevation, we need to use alternative algorithm\n          return (0, _utils.nearestPointOnProjectedLine)(line, inPoint, viewport);\n        } // eslint-disable-next-line no-console,no-undef\n\n\n        console.log('Editing 3D point but modeConfig.viewport not provided. Falling back to 2D logic.');\n      }\n\n      return (0, _nearestPointOnLine2.default)(line, inPoint);\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var pickedExistingHandle = (0, _utils.getPickedExistingEditHandle)(event.picks);\n      var pickedIntermediateHandle = (0, _utils.getPickedIntermediateEditHandle)(event.picks);\n\n      if (pickedExistingHandle) {\n        var _pickedExistingHandle = pickedExistingHandle.properties,\n            featureIndex = _pickedExistingHandle.featureIndex,\n            positionIndexes = _pickedExistingHandle.positionIndexes;\n        var updatedData;\n\n        try {\n          updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).removePosition(featureIndex, positionIndexes).getObject();\n        } catch (ignored) {// This happens if user attempts to remove the last point\n        }\n\n        if (updatedData) {\n          props.onEdit({\n            updatedData: updatedData,\n            editType: 'removePosition',\n            editContext: {\n              featureIndexes: [featureIndex],\n              positionIndexes: positionIndexes,\n              position: pickedExistingHandle.geometry.coordinates\n            }\n          });\n        }\n      } else if (pickedIntermediateHandle) {\n        var _pickedIntermediateHa = pickedIntermediateHandle.properties,\n            _featureIndex = _pickedIntermediateHa.featureIndex,\n            _positionIndexes = _pickedIntermediateHa.positionIndexes;\n\n        var _updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).addPosition(_featureIndex, _positionIndexes, pickedIntermediateHandle.geometry.coordinates).getObject();\n\n        if (_updatedData) {\n          props.onEdit({\n            updatedData: _updatedData,\n            editType: 'addPosition',\n            editContext: {\n              featureIndexes: [_featureIndex],\n              positionIndexes: _positionIndexes,\n              position: pickedIntermediateHandle.geometry.coordinates\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handleDragging\",\n    value: function handleDragging(event, props) {\n      var editHandle = (0, _utils.getPickedEditHandle)(event.pointerDownPicks);\n\n      if (editHandle) {\n        // Cancel map panning if pointer went down on an edit handle\n        event.cancelPan();\n        var editHandleProperties = editHandle.properties;\n        var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replacePosition(editHandleProperties.featureIndex, editHandleProperties.positionIndexes, event.mapCoords).getObject();\n        props.onEdit({\n          updatedData: updatedData,\n          editType: 'movePosition',\n          editContext: {\n            featureIndexes: [editHandleProperties.featureIndex],\n            positionIndexes: editHandleProperties.positionIndexes,\n            position: event.mapCoords\n          }\n        });\n      }\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      var cursor = this.getCursor(event);\n      props.onUpdateCursor(cursor);\n    }\n  }, {\n    key: \"handleStartDragging\",\n    value: function handleStartDragging(event, props) {\n      var selectedFeatureIndexes = props.selectedIndexes;\n      var editHandle = (0, _utils.getPickedIntermediateEditHandle)(event.picks);\n\n      if (selectedFeatureIndexes.length && editHandle) {\n        var editHandleProperties = editHandle.properties;\n        var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).addPosition(editHandleProperties.featureIndex, editHandleProperties.positionIndexes, event.mapCoords).getObject();\n        props.onEdit({\n          updatedData: updatedData,\n          editType: 'addPosition',\n          editContext: {\n            featureIndexes: [editHandleProperties.featureIndex],\n            positionIndexes: editHandleProperties.positionIndexes,\n            position: event.mapCoords\n          }\n        });\n      }\n    }\n  }, {\n    key: \"handleStopDragging\",\n    value: function handleStopDragging(event, props) {\n      var selectedFeatureIndexes = props.selectedIndexes;\n      var editHandle = (0, _utils.getPickedEditHandle)(event.picks);\n\n      if (selectedFeatureIndexes.length && editHandle) {\n        var editHandleProperties = editHandle.properties;\n        var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replacePosition(editHandleProperties.featureIndex, editHandleProperties.positionIndexes, event.mapCoords).getObject();\n        props.onEdit({\n          updatedData: updatedData,\n          editType: 'finishMovePosition',\n          editContext: {\n            featureIndexes: [editHandleProperties.featureIndex],\n            positionIndexes: editHandleProperties.positionIndexes,\n            position: event.mapCoords\n          }\n        });\n      }\n    }\n  }, {\n    key: \"getCursor\",\n    value: function getCursor(event) {\n      var picks = event && event.picks || [];\n      var handlesPicked = (0, _utils.getPickedEditHandles)(picks);\n\n      if (handlesPicked.length) {\n        return 'cell';\n      }\n\n      return null;\n    }\n  }]);\n\n  return ModifyMode;\n}(_geojsonEditMode.BaseGeoJsonEditMode);\n\nexports.ModifyMode = ModifyMode;","map":null,"metadata":{},"sourceType":"script"}