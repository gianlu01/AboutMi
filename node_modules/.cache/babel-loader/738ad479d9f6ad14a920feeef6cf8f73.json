{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport MapContext from './map-context';\nimport assert from '../utils/assert';\nimport deepEqual from '../utils/deep-equal';\nvar propTypes = {\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  source: PropTypes.string,\n  beforeId: PropTypes.string\n};\n\nfunction diffLayerStyles(map, id, props, prevProps) {\n  var _props$layout = props.layout,\n      layout = _props$layout === void 0 ? {} : _props$layout,\n      _props$paint = props.paint,\n      paint = _props$paint === void 0 ? {} : _props$paint,\n      filter = props.filter,\n      minzoom = props.minzoom,\n      maxzoom = props.maxzoom,\n      beforeId = props.beforeId,\n      otherProps = _objectWithoutProperties(props, [\"layout\", \"paint\", \"filter\", \"minzoom\", \"maxzoom\", \"beforeId\"]);\n\n  if (beforeId !== prevProps.beforeId) {\n    map.moveLayer(id, beforeId);\n  }\n\n  if (layout !== prevProps.layout) {\n    for (var key in layout) {\n      if (!deepEqual(layout[key], prevProps.layout[key])) {\n        map.setLayoutProperty(id, key, layout[key]);\n      }\n    }\n  }\n\n  if (paint !== prevProps.paint) {\n    for (var _key in paint) {\n      if (!deepEqual(paint[_key], prevProps.paint[_key])) {\n        map.setPaintProperty(id, _key, paint[_key]);\n      }\n    }\n  }\n\n  if (!deepEqual(filter, prevProps.filter)) {\n    map.setFilter(id, filter);\n  }\n\n  if (minzoom !== prevProps.minzoom || maxzoom !== prevProps.maxzoom) {\n    map.setLayerZoomRange(id, minzoom, maxzoom);\n  }\n\n  for (var _key2 in otherProps) {\n    if (!deepEqual(otherProps[_key2], prevProps[_key2])) {\n      map.setLayerProperty(id, _key2, otherProps[_key2]);\n    }\n  }\n}\n\nvar layerCounter = 0;\n\nvar Layer = function (_PureComponent) {\n  _inherits(Layer, _PureComponent);\n\n  function Layer(_props) {\n    var _this;\n\n    _classCallCheck(this, Layer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Layer).call(this, _props));\n\n    _defineProperty(_assertThisInitialized(_this), \"id\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_map\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_layerOptions\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateLayer\", function () {\n      var map = _this._map;\n\n      if (!map) {\n        return;\n      }\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          props = _assertThisInitialize.props,\n          layerOptions = _assertThisInitialize._layerOptions;\n\n      assert(!props.id || props.id === _this.id, 'layer id changed');\n      assert(props.type === _this.type, 'layer type changed');\n\n      if (!_this.getLayer()) {\n        _this._createLayer();\n\n        return;\n      }\n\n      try {\n        diffLayerStyles(map, _this.id, props, layerOptions);\n        Object.assign(layerOptions, props);\n      } catch (error) {\n        console.warn(error);\n      }\n    });\n\n    _this.id = _props.id || \"jsx-layer-\".concat(layerCounter++);\n    _this.type = _props.type;\n    return _this;\n  }\n\n  _createClass(Layer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._updateLayer();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._updateLayer();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var map = this._map;\n\n      if (map) {\n        map.off('styledata', this._updateLayer);\n\n        if (map.style) {\n          map.removeLayer(this.id);\n        }\n      }\n    }\n  }, {\n    key: \"getLayer\",\n    value: function getLayer() {\n      var map = this._map;\n      return map && map.style && map.getLayer(this.id);\n    }\n  }, {\n    key: \"_createLayer\",\n    value: function _createLayer() {\n      var map = this._map;\n\n      if (map.style && map.style._loaded) {\n        var options = Object.assign({}, this.props);\n        options.id = this.id;\n        delete options.beforeId;\n        map.addLayer(options, this.props.beforeId);\n        this._layerOptions = options;\n      }\n    }\n  }, {\n    key: \"_render\",\n    value: function _render(context) {\n      if (!this._map) {\n        this._map = context.map;\n\n        this._map.on('styledata', this._updateLayer);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(MapContext.Consumer, null, this._render.bind(this));\n    }\n  }]);\n\n  return Layer;\n}(PureComponent);\n\n_defineProperty(Layer, \"propTypes\", propTypes);\n\nexport { Layer as default };","map":null,"metadata":{},"sourceType":"module"}