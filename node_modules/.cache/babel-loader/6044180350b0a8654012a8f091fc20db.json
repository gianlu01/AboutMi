{"ast":null,"code":"var Feature = require('./feature');\n\nvar Polygon = function Polygon(ctx, geojson) {\n  Feature.call(this, ctx, geojson);\n  this.coordinates = this.coordinates.map(function (ring) {\n    return ring.slice(0, -1);\n  });\n};\n\nPolygon.prototype = Object.create(Feature.prototype);\n\nPolygon.prototype.isValid = function () {\n  if (this.coordinates.length === 0) return false;\n  return this.coordinates.every(function (ring) {\n    return ring.length > 2;\n  });\n}; // Expects valid geoJSON polygon geometry: first and last positions must be equivalent.\n\n\nPolygon.prototype.incomingCoords = function (coords) {\n  this.coordinates = coords.map(function (ring) {\n    return ring.slice(0, -1);\n  });\n  this.changed();\n}; // Does NOT expect valid geoJSON polygon geometry: first and last positions should not be equivalent.\n\n\nPolygon.prototype.setCoordinates = function (coords) {\n  this.coordinates = coords;\n  this.changed();\n};\n\nPolygon.prototype.addCoordinate = function (path, lng, lat) {\n  this.changed();\n  var ids = path.split('.').map(function (x) {\n    return parseInt(x, 10);\n  });\n  var ring = this.coordinates[ids[0]];\n  ring.splice(ids[1], 0, [lng, lat]);\n};\n\nPolygon.prototype.removeCoordinate = function (path) {\n  this.changed();\n  var ids = path.split('.').map(function (x) {\n    return parseInt(x, 10);\n  });\n  var ring = this.coordinates[ids[0]];\n\n  if (ring) {\n    ring.splice(ids[1], 1);\n\n    if (ring.length < 3) {\n      this.coordinates.splice(ids[0], 1);\n    }\n  }\n};\n\nPolygon.prototype.getCoordinate = function (path) {\n  var ids = path.split('.').map(function (x) {\n    return parseInt(x, 10);\n  });\n  var ring = this.coordinates[ids[0]];\n  return JSON.parse(JSON.stringify(ring[ids[1]]));\n};\n\nPolygon.prototype.getCoordinates = function () {\n  return this.coordinates.map(function (coords) {\n    return coords.concat([coords[0]]);\n  });\n};\n\nPolygon.prototype.updateCoordinate = function (path, lng, lat) {\n  this.changed();\n  var parts = path.split('.');\n  var ringId = parseInt(parts[0], 10);\n  var coordId = parseInt(parts[1], 10);\n\n  if (this.coordinates[ringId] === undefined) {\n    this.coordinates[ringId] = [];\n  }\n\n  this.coordinates[ringId][coordId] = [lng, lat];\n};\n\nmodule.exports = Polygon;","map":null,"metadata":{},"sourceType":"script"}