{"ast":null,"code":"var ModeHandler = function ModeHandler(mode, DrawContext) {\n  var handlers = {\n    drag: [],\n    click: [],\n    mousemove: [],\n    mousedown: [],\n    mouseup: [],\n    mouseout: [],\n    keydown: [],\n    keyup: [],\n    touchstart: [],\n    touchmove: [],\n    touchend: [],\n    tap: []\n  };\n  var ctx = {\n    on: function on(event, selector, fn) {\n      if (handlers[event] === undefined) {\n        throw new Error(\"Invalid event type: \".concat(event));\n      }\n\n      handlers[event].push({\n        selector: selector,\n        fn: fn\n      });\n    },\n    render: function render(id) {\n      DrawContext.store.featureChanged(id);\n    }\n  };\n\n  var delegate = function delegate(eventName, event) {\n    var handles = handlers[eventName];\n    var iHandle = handles.length;\n\n    while (iHandle--) {\n      var handle = handles[iHandle];\n\n      if (handle.selector(event)) {\n        handle.fn.call(ctx, event);\n        DrawContext.store.render();\n        DrawContext.ui.updateMapClasses(); // ensure an event is only handled once\n        // we do this to let modes have multiple overlapping selectors\n        // and relay on order of oppertations to filter\n\n        break;\n      }\n    }\n  };\n\n  mode.start.call(ctx);\n  return {\n    render: mode.render,\n    stop: function stop() {\n      if (mode.stop) mode.stop();\n    },\n    trash: function trash() {\n      if (mode.trash) {\n        mode.trash();\n        DrawContext.store.render();\n      }\n    },\n    combineFeatures: function combineFeatures() {\n      if (mode.combineFeatures) {\n        mode.combineFeatures();\n      }\n    },\n    uncombineFeatures: function uncombineFeatures() {\n      if (mode.uncombineFeatures) {\n        mode.uncombineFeatures();\n      }\n    },\n    drag: function drag(event) {\n      delegate('drag', event);\n    },\n    click: function click(event) {\n      delegate('click', event);\n    },\n    mousemove: function mousemove(event) {\n      delegate('mousemove', event);\n    },\n    mousedown: function mousedown(event) {\n      delegate('mousedown', event);\n    },\n    mouseup: function mouseup(event) {\n      delegate('mouseup', event);\n    },\n    mouseout: function mouseout(event) {\n      delegate('mouseout', event);\n    },\n    keydown: function keydown(event) {\n      delegate('keydown', event);\n    },\n    keyup: function keyup(event) {\n      delegate('keyup', event);\n    },\n    touchstart: function touchstart(event) {\n      delegate('touchstart', event);\n    },\n    touchmove: function touchmove(event) {\n      delegate('touchmove', event);\n    },\n    touchend: function touchend(event) {\n      delegate('touchend', event);\n    },\n    tap: function tap(event) {\n      delegate('tap', event);\n    }\n  };\n};\n\nmodule.exports = ModeHandler;","map":null,"metadata":{},"sourceType":"script"}