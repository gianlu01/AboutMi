{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\michi\\\\OneDrive\\\\Desktop\\\\AboutMi\\\\src\\\\components\\\\Maps.js\";\nimport React from 'react';\n/*import {Map, GoogleApiWrappe  r} from 'google-maps-react';*/\n\nimport OlMap from \"ol/Map\";\nimport OlView from \"ol/view\";\nimport OlLayerTile from \"ol/layer/tile\";\nimport OlSourceOSM from \"ol/source/OSM\";\n\nclass Maps extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: [0, 0],\n      zoom: 1\n    };\n    this.olmap = new OlMap({\n      target: null,\n      layers: [new OlLayerTile({\n        source: new OlSourceOSM()\n      })],\n      view: new OlView({\n        center: this.state.center,\n        zoom: this.state.zoom\n      })\n    });\n  }\n\n  updateMap() {\n    this.olmap.getView().setCenter(this.state.center);\n    this.olmap.getView().setZoom(this.state.zoom);\n  }\n\n  componentDidMount() {\n    this.olmap.setTarget(\"map\"); // Listen to map changes\n\n    this.olmap.on(\"moveend\", () => {\n      let center = this.olmap.getView().getCenter();\n      let zoom = this.olmap.getView().getZoom();\n      this.setState({\n        center,\n        zoom\n      });\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    let center = this.olmap.getView().getCenter();\n    let zoom = this.olmap.getView().getZoom();\n    if (center === nextState.center && zoom === nextState.zoom) return false;\n    return true;\n  }\n\n  userAction() {\n    this.setState({\n      center: [546000, 6868000],\n      zoom: 5\n    });\n  }\n\n  render() {\n    this.updateMap(); // Update map on render?\n\n    return React.createElement(\"div\", {\n      id: \"map\",\n      style: {\n        width: \"100%\",\n        height: \"360px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: e => this.userAction(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"setState on click\"));\n  }\n\n}\n\nexport default Maps;","map":{"version":3,"sources":["C:/Users/michi/OneDrive/Desktop/AboutMi/src/components/Maps.js"],"names":["React","OlMap","OlView","OlLayerTile","OlSourceOSM","Maps","Component","constructor","props","state","center","zoom","olmap","target","layers","source","view","updateMap","getView","setCenter","setZoom","componentDidMount","setTarget","on","getCenter","getZoom","setState","shouldComponentUpdate","nextProps","nextState","userAction","render","width","height","e"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;AACA,OAAOC,KAAP,MAAkB,QAAlB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAV;AAAkBC,MAAAA,IAAI,EAAE;AAAxB,KAAb;AAEA,SAAKC,KAAL,GAAa,IAAIX,KAAJ,CAAU;AACrBY,MAAAA,MAAM,EAAE,IADa;AAErBC,MAAAA,MAAM,EAAE,CACN,IAAIX,WAAJ,CAAgB;AACdY,QAAAA,MAAM,EAAE,IAAIX,WAAJ;AADM,OAAhB,CADM,CAFa;AAOrBY,MAAAA,IAAI,EAAE,IAAId,MAAJ,CAAW;AACfQ,QAAAA,MAAM,EAAE,KAAKD,KAAL,CAAWC,MADJ;AAEfC,QAAAA,IAAI,EAAE,KAAKF,KAAL,CAAWE;AAFF,OAAX;AAPe,KAAV,CAAb;AAYD;;AAEDM,EAAAA,SAAS,GAAG;AACV,SAAKL,KAAL,CAAWM,OAAX,GAAqBC,SAArB,CAA+B,KAAKV,KAAL,CAAWC,MAA1C;AACA,SAAKE,KAAL,CAAWM,OAAX,GAAqBE,OAArB,CAA6B,KAAKX,KAAL,CAAWE,IAAxC;AACD;;AAEDU,EAAAA,iBAAiB,GAAG;AAClB,SAAKT,KAAL,CAAWU,SAAX,CAAqB,KAArB,EADkB,CAGlB;;AACA,SAAKV,KAAL,CAAWW,EAAX,CAAc,SAAd,EAAyB,MAAM;AAC7B,UAAIb,MAAM,GAAG,KAAKE,KAAL,CAAWM,OAAX,GAAqBM,SAArB,EAAb;AACA,UAAIb,IAAI,GAAG,KAAKC,KAAL,CAAWM,OAAX,GAAqBO,OAArB,EAAX;AACA,WAAKC,QAAL,CAAc;AAAEhB,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAAd;AACD,KAJD;AAKD;;AAEDgB,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1C,QAAInB,MAAM,GAAG,KAAKE,KAAL,CAAWM,OAAX,GAAqBM,SAArB,EAAb;AACA,QAAIb,IAAI,GAAG,KAAKC,KAAL,CAAWM,OAAX,GAAqBO,OAArB,EAAX;AACA,QAAIf,MAAM,KAAKmB,SAAS,CAACnB,MAArB,IAA+BC,IAAI,KAAKkB,SAAS,CAAClB,IAAtD,EAA4D,OAAO,KAAP;AAC5D,WAAO,IAAP;AACD;;AAEDmB,EAAAA,UAAU,GAAG;AACX,SAAKJ,QAAL,CAAc;AAAEhB,MAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,OAAT,CAAV;AAA6BC,MAAAA,IAAI,EAAE;AAAnC,KAAd;AACD;;AAEDoB,EAAAA,MAAM,GAAG;AACP,SAAKd,SAAL,GADO,CACW;;AAClB,WACE;AAAK,MAAA,EAAE,EAAC,KAAR;AAAc,MAAA,KAAK,EAAE;AAAEe,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAEC,CAAC,IAAI,KAAKJ,UAAL,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,CADF;AAKD;;AAtD8B;;AAwDnC,eAAezB,IAAf","sourcesContent":["import React from 'react';\r\n\r\n/*import {Map, GoogleApiWrappe  r} from 'google-maps-react';*/\r\nimport OlMap from \"ol/Map\";\r\nimport OlView from \"ol/view\";\r\nimport OlLayerTile from \"ol/layer/tile\";\r\nimport OlSourceOSM from \"ol/source/OSM\";\r\n\r\nclass Maps extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n\r\n      this.state = { center: [0, 0], zoom: 1 };\r\n\r\n      this.olmap = new OlMap({\r\n        target: null,\r\n        layers: [\r\n          new OlLayerTile({\r\n            source: new OlSourceOSM()\r\n          })\r\n        ],\r\n        view: new OlView({\r\n          center: this.state.center,\r\n          zoom: this.state.zoom\r\n        })\r\n      });\r\n    }\r\n\r\n    updateMap() {\r\n      this.olmap.getView().setCenter(this.state.center);\r\n      this.olmap.getView().setZoom(this.state.zoom);\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.olmap.setTarget(\"map\");\r\n\r\n      // Listen to map changes\r\n      this.olmap.on(\"moveend\", () => {\r\n        let center = this.olmap.getView().getCenter();\r\n        let zoom = this.olmap.getView().getZoom();\r\n        this.setState({ center, zoom });\r\n      });\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n      let center = this.olmap.getView().getCenter();\r\n      let zoom = this.olmap.getView().getZoom();\r\n      if (center === nextState.center && zoom === nextState.zoom) return false;\r\n      return true;\r\n    }\r\n\r\n    userAction() {\r\n      this.setState({ center: [546000, 6868000], zoom: 5 });\r\n    }\r\n\r\n    render() {\r\n      this.updateMap(); // Update map on render?\r\n      return (\r\n        <div id=\"map\" style={{ width: \"100%\", height: \"360px\" }}>\r\n          <button onClick={e => this.userAction()}>setState on click</button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\nexport default Maps;\r\n"]},"metadata":{},"sourceType":"module"}