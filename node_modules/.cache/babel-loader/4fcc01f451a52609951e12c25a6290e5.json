{"ast":null,"code":"/**\r\n * @module ol/functions\r\n */\nimport { equals as arrayEquals } from './array.js';\n/**\r\n * Always returns true.\r\n * @returns {boolean} true.\r\n */\n\nexport function TRUE() {\n  return true;\n}\n/**\r\n * Always returns false.\r\n * @returns {boolean} false.\r\n */\n\nexport function FALSE() {\n  return false;\n}\n/**\r\n * A reusable function, used e.g. as a default for callbacks.\r\n *\r\n * @return {void} Nothing.\r\n */\n\nexport function VOID() {}\n/**\r\n * Wrap a function in another function that remembers the last return.  If the\r\n * returned function is called twice in a row with the same arguments and the same\r\n * this object, it will return the value from the first call in the second call.\r\n *\r\n * @param {function(...any): ReturnType} fn The function to memoize.\r\n * @return {function(...any): ReturnType} The memoized function.\r\n * @template ReturnType\r\n */\n\nexport function memoizeOne(fn) {\n  var called = false;\n  /** @type {ReturnType} */\n\n  var lastResult;\n  /** @type {Array<any>} */\n\n  var lastArgs;\n  var lastThis;\n  return function () {\n    var nextArgs = Array.prototype.slice.call(arguments);\n\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n\n    return lastResult;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}