{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/interaction/Interaction\r\n */\n\n\nimport BaseObject from '../Object.js';\nimport { easeOut, linear } from '../easing.js';\nimport InteractionProperty from './Property.js';\n/**\r\n * Object literal with config options for interactions.\r\n * @typedef {Object} InteractionOptions\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} handleEvent\r\n * Method called by the map to notify the interaction that a browser event was\r\n * dispatched to the map. If the function returns a falsy value, propagation of\r\n * the event to other interactions in the map's interactions chain will be\r\n * prevented (this includes functions with no explicit return). The interactions\r\n * are traversed in reverse order of the interactions collection of the map.\r\n */\n\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * User actions that change the state of the map. Some are similar to controls,\r\n * but are not associated with a DOM element.\r\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\r\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\r\n * by a keyboard event not a button element event.\r\n * Although interactions do not have a DOM element, some of them do render\r\n * vectors and so are visible on the screen.\r\n * @api\r\n */\n\nvar Interaction =\n/** @class */\nfunction (_super) {\n  __extends(Interaction, _super);\n  /**\r\n   * @param {InteractionOptions} options Options.\r\n   */\n\n\n  function Interaction(options) {\n    var _this = _super.call(this) || this;\n\n    if (options.handleEvent) {\n      _this.handleEvent = options.handleEvent;\n    }\n    /**\r\n     * @private\r\n     * @type {import(\"../PluggableMap.js\").default}\r\n     */\n\n\n    _this.map_ = null;\n\n    _this.setActive(true);\n\n    return _this;\n  }\n  /**\r\n   * Return whether the interaction is currently active.\r\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Interaction.prototype.getActive = function () {\n    return (\n      /** @type {boolean} */\n      this.get(InteractionProperty.ACTIVE)\n    );\n  };\n  /**\r\n   * Get the map associated with this interaction.\r\n   * @return {import(\"../PluggableMap.js\").default} Map.\r\n   * @api\r\n   */\n\n\n  Interaction.prototype.getMap = function () {\n    return this.map_;\n  };\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent map browser event}.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @api\r\n   */\n\n\n  Interaction.prototype.handleEvent = function (mapBrowserEvent) {\n    return true;\n  };\n  /**\r\n   * Activate or deactivate the interaction.\r\n   * @param {boolean} active Active.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Interaction.prototype.setActive = function (active) {\n    this.set(InteractionProperty.ACTIVE, active);\n  };\n  /**\r\n   * Remove the interaction from its current map and attach it to the new map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../PluggableMap.js\").default} map Map.\r\n   */\n\n\n  Interaction.prototype.setMap = function (map) {\n    this.map_ = map;\n  };\n\n  return Interaction;\n}(BaseObject);\n/**\r\n * @param {import(\"../View.js\").default} view View.\r\n * @param {import(\"../coordinate.js\").Coordinate} delta Delta.\r\n * @param {number=} opt_duration Duration.\r\n */\n\n\nexport function pan(view, delta, opt_duration) {\n  var currentCenter = view.getCenterInternal();\n\n  if (currentCenter) {\n    var center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];\n    view.animateInternal({\n      duration: opt_duration !== undefined ? opt_duration : 250,\n      easing: linear,\n      center: view.getConstrainedCenter(center)\n    });\n  }\n}\n/**\r\n * @param {import(\"../View.js\").default} view View.\r\n * @param {number} delta Delta from previous zoom level.\r\n * @param {import(\"../coordinate.js\").Coordinate=} opt_anchor Anchor coordinate in the user projection.\r\n * @param {number=} opt_duration Duration.\r\n */\n\nexport function zoomByDelta(view, delta, opt_anchor, opt_duration) {\n  var currentZoom = view.getZoom();\n\n  if (currentZoom === undefined) {\n    return;\n  }\n\n  var newZoom = view.getConstrainedZoom(currentZoom + delta);\n  var newResolution = view.getResolutionForZoom(newZoom);\n\n  if (view.getAnimating()) {\n    view.cancelAnimations();\n  }\n\n  view.animate({\n    resolution: newResolution,\n    anchor: opt_anchor,\n    duration: opt_duration !== undefined ? opt_duration : 250,\n    easing: easeOut\n  });\n}\nexport default Interaction;","map":null,"metadata":{},"sourceType":"module"}