{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gianluca\\\\Documents\\\\Scuola\\\\Informatica\\\\AboutMi\\\\Sito\\\\AboutMi\\\\src\\\\components\\\\Maps.js\";\nimport React from 'react';\nimport OlMap from \"ol/Map\";\nimport OlView from \"ol/View\";\nimport OlLayerTile from \"ol/layer/Tile\";\nimport OlSourceOSM from \"ol/source/OSM\"; //CODICE BENF CONSTRUCTOR\n\n/*\r\nthis.state = { center: [45.466944, 9.19], zoom: 5 };\r\n\r\n      this.olmap = new OlMap({\r\n        target: null,\r\n        layers: [\r\n          new OlLayerTile({\r\n            source: new OlSourceOSM()\r\n          })\r\n        ],\r\n        view: new OlView({\r\n          center:[45.466944, 9.19],\r\n          zoom: this.state.zoom\r\n        })\r\n      });\r\n\r\n      */\n\nclass Maps extends React.Component {\n  constructor(props) {\n    super(props);\n    new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new XYZ({\n          url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        })\n      })],\n      view: new View({\n        center: [0, 0],\n        zoom: 2\n      })\n    });\n  }\n\n  updateMap() {\n    this.olmap.getView().setCenter(this.state.center);\n    this.olmap.getView().setZoom(this.state.zoom);\n  }\n\n  componentDidMount() {\n    this.olmap.setTarget(\"map\"); // Listen to map changes\n\n    this.olmap.on(\"moveend\", () => {\n      let center = this.olmap.getView().getCenter();\n      let zoom = this.olmap.getView().getZoom();\n      this.setState({\n        center,\n        zoom\n      });\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    let center = this.olmap.getView().getCenter();\n    let zoom = this.olmap.getView().getZoom();\n    if (center === nextState.center && zoom === nextState.zoom) return false;\n    return true;\n  } // <button onClick={e => this.updateMap    ()}>setState on click</button>\n\n\n  render() {\n    this.updateMap(); // Update map on render?\n\n    return React.createElement(\"div\", {\n      id: \"map\",\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Maps;","map":{"version":3,"sources":["C:/Users/Gianluca/Documents/Scuola/Informatica/AboutMi/Sito/AboutMi/src/components/Maps.js"],"names":["React","OlMap","OlView","OlLayerTile","OlSourceOSM","Maps","Component","constructor","props","Map","target","layers","TileLayer","source","XYZ","url","view","View","center","zoom","updateMap","olmap","getView","setCenter","state","setZoom","componentDidMount","setTarget","on","getCenter","getZoom","setState","shouldComponentUpdate","nextProps","nextState","render","width","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,QAAlB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAGA;;AACA;;;;;;;;;;;;;;;;;;AAiBA,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,GAAJ,CAAQ;AACNC,MAAAA,MAAM,EAAE,KADF;AAENC,MAAAA,MAAM,EAAE,CACN,IAAIC,SAAJ,CAAc;AACZC,QAAAA,MAAM,EAAE,IAAIC,GAAJ,CAAQ;AACdC,UAAAA,GAAG,EAAE;AADS,SAAR;AADI,OAAd,CADM,CAFF;AASNC,MAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS;AACbC,QAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CADK;AAEbC,QAAAA,IAAI,EAAE;AAFO,OAAT;AATA,KAAR;AAcD;;AAEDC,EAAAA,SAAS,GAAG;AACV,SAAKC,KAAL,CAAWC,OAAX,GAAqBC,SAArB,CAA+B,KAAKC,KAAL,CAAWN,MAA1C;AACA,SAAKG,KAAL,CAAWC,OAAX,GAAqBG,OAArB,CAA6B,KAAKD,KAAL,CAAWL,IAAxC;AACD;;AAEDO,EAAAA,iBAAiB,GAAG;AAClB,SAAKL,KAAL,CAAWM,SAAX,CAAqB,KAArB,EADkB,CAGlB;;AACA,SAAKN,KAAL,CAAWO,EAAX,CAAc,SAAd,EAAyB,MAAM;AAC7B,UAAIV,MAAM,GAAG,KAAKG,KAAL,CAAWC,OAAX,GAAqBO,SAArB,EAAb;AACA,UAAIV,IAAI,GAAG,KAAKE,KAAL,CAAWC,OAAX,GAAqBQ,OAArB,EAAX;AACA,WAAKC,QAAL,CAAc;AAAEb,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAAd;AACD,KAJD;AAKD;;AAEDa,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1C,QAAIhB,MAAM,GAAG,KAAKG,KAAL,CAAWC,OAAX,GAAqBO,SAArB,EAAb;AACA,QAAIV,IAAI,GAAG,KAAKE,KAAL,CAAWC,OAAX,GAAqBQ,OAArB,EAAX;AACA,QAAIZ,MAAM,KAAKgB,SAAS,CAAChB,MAArB,IAA+BC,IAAI,KAAKe,SAAS,CAACf,IAAtD,EAA4D,OAAO,KAAP;AAC5D,WAAO,IAAP;AACD,GAxC8B,CA0CnC;;;AAEIgB,EAAAA,MAAM,GAAG;AACP,SAAKf,SAAL,GADO,CACW;;AAClB,WACE;AAAK,MAAA,EAAE,EAAC,KAAR;AAAc,MAAA,KAAK,EAAE;AAAEgB,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAKD;;AAnD8B;;AAqDnC,eAAehC,IAAf","sourcesContent":["import React from 'react';\r\nimport OlMap from \"ol/Map\";\r\nimport OlView from \"ol/View\";\r\nimport OlLayerTile from \"ol/layer/Tile\";\r\nimport OlSourceOSM from \"ol/source/OSM\";\r\n\r\n\r\n//CODICE BENF CONSTRUCTOR\r\n/*\r\nthis.state = { center: [45.466944, 9.19], zoom: 5 };\r\n\r\n      this.olmap = new OlMap({\r\n        target: null,\r\n        layers: [\r\n          new OlLayerTile({\r\n            source: new OlSourceOSM()\r\n          })\r\n        ],\r\n        view: new OlView({\r\n          center:[45.466944, 9.19],\r\n          zoom: this.state.zoom\r\n        })\r\n      });\r\n\r\n      */\r\nclass Maps extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      new Map({\r\n        target: 'map',\r\n        layers: [\r\n          new TileLayer({\r\n            source: new XYZ({\r\n              url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n            })\r\n          })\r\n        ],\r\n        view: new View({\r\n          center: [0, 0],\r\n          zoom: 2\r\n        })\r\n      });    \r\n    }\r\n\r\n    updateMap() {\r\n      this.olmap.getView().setCenter(this.state.center);\r\n      this.olmap.getView().setZoom(this.state.zoom);\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.olmap.setTarget(\"map\");\r\n\r\n      // Listen to map changes\r\n      this.olmap.on(\"moveend\", () => {\r\n        let center = this.olmap.getView().getCenter();\r\n        let zoom = this.olmap.getView().getZoom();\r\n        this.setState({ center, zoom });\r\n      });\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n      let center = this.olmap.getView().getCenter();\r\n      let zoom = this.olmap.getView().getZoom();\r\n      if (center === nextState.center && zoom === nextState.zoom) return false;\r\n      return true;\r\n    }\r\n    \r\n// <button onClick={e => this.updateMap    ()}>setState on click</button>\r\n\r\n    render() {\r\n      this.updateMap(); // Update map on render?\r\n      return (\r\n        <div id=\"map\" style={{ width: \"100%\", height: \"100%\" }}>\r\n            \r\n        </div>\r\n      );\r\n    }\r\n  }\r\nexport default Maps;\r\n"]},"metadata":{},"sourceType":"module"}