{"ast":null,"code":"const CommonSelectors = require('../lib/common_selectors');\n\nconst Constants = require('../constants');\n\nconst DrawPoint = {};\n\nDrawPoint.onSetup = function () {\n  const point = this.newFeature({\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.POINT,\n      coordinates: []\n    }\n  });\n  this.addFeature(point);\n  this.clearSelectedFeatures();\n  this.updateUIClasses({\n    mouse: Constants.cursors.ADD\n  });\n  this.activateUIButton(Constants.types.POINT);\n  this.setActionableState({\n    trash: true\n  });\n  return {\n    point\n  };\n};\n\nDrawPoint.stopDrawingAndRemove = function (state) {\n  this.deleteFeature([state.point.id], {\n    silent: true\n  });\n  this.changeMode(Constants.modes.SIMPLE_SELECT);\n};\n\nDrawPoint.onTap = DrawPoint.onClick = function (state, e) {\n  this.updateUIClasses({\n    mouse: Constants.cursors.MOVE\n  });\n  state.point.updateCoordinate('', e.lngLat.lng, e.lngLat.lat);\n  this.map.fire(Constants.events.CREATE, {\n    features: [state.point.toGeoJSON()]\n  });\n  this.changeMode(Constants.modes.SIMPLE_SELECT, {\n    featureIds: [state.point.id]\n  });\n};\n\nDrawPoint.onStop = function (state) {\n  this.activateUIButton();\n\n  if (!state.point.getCoordinate().length) {\n    this.deleteFeature([state.point.id], {\n      silent: true\n    });\n  }\n};\n\nDrawPoint.toDisplayFeatures = function (state, geojson, display) {\n  // Never render the point we're drawing\n  const isActivePoint = geojson.properties.id === state.point.id;\n  geojson.properties.active = isActivePoint ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  if (!isActivePoint) return display(geojson);\n};\n\nDrawPoint.onTrash = DrawPoint.stopDrawingAndRemove;\n\nDrawPoint.onKeyUp = function (state, e) {\n  if (CommonSelectors.isEscapeKey(e) || CommonSelectors.isEnterKey(e)) {\n    return this.stopDrawingAndRemove(state, e);\n  }\n};\n\nmodule.exports = DrawPoint;","map":{"version":3,"sources":["/home/gianluca/Documenti/Scuola/Informatica/Progetto/AboutMi/node_modules/@mapbox/mapbox-gl-draw/src/modes/draw_point.js"],"names":["CommonSelectors","require","Constants","DrawPoint","onSetup","point","newFeature","type","geojsonTypes","FEATURE","properties","geometry","POINT","coordinates","addFeature","clearSelectedFeatures","updateUIClasses","mouse","cursors","ADD","activateUIButton","types","setActionableState","trash","stopDrawingAndRemove","state","deleteFeature","id","silent","changeMode","modes","SIMPLE_SELECT","onTap","onClick","e","MOVE","updateCoordinate","lngLat","lng","lat","map","fire","events","CREATE","features","toGeoJSON","featureIds","onStop","getCoordinate","length","toDisplayFeatures","geojson","display","isActivePoint","active","activeStates","ACTIVE","INACTIVE","onTrash","onKeyUp","isEscapeKey","isEnterKey","module","exports"],"mappings":"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","sourcesContent":["const CommonSelectors = require('../lib/common_selectors');\nconst Constants = require('../constants');\n\nconst DrawPoint = {};\n\nDrawPoint.onSetup = function() {\n  const point = this.newFeature({\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.POINT,\n      coordinates: []\n    }\n  });\n\n  this.addFeature(point);\n\n  this.clearSelectedFeatures();\n  this.updateUIClasses({ mouse: Constants.cursors.ADD });\n  this.activateUIButton(Constants.types.POINT);\n\n  this.setActionableState({\n    trash: true\n  });\n\n  return { point };\n};\n\nDrawPoint.stopDrawingAndRemove = function(state) {\n  this.deleteFeature([state.point.id], { silent: true });\n  this.changeMode(Constants.modes.SIMPLE_SELECT);\n};\n\nDrawPoint.onTap = DrawPoint.onClick = function(state, e) {\n  this.updateUIClasses({ mouse: Constants.cursors.MOVE });\n  state.point.updateCoordinate('', e.lngLat.lng, e.lngLat.lat);\n  this.map.fire(Constants.events.CREATE, {\n    features: [state.point.toGeoJSON()]\n  });\n  this.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [state.point.id] });\n};\n\nDrawPoint.onStop = function(state) {\n  this.activateUIButton();\n  if (!state.point.getCoordinate().length) {\n    this.deleteFeature([state.point.id], { silent: true });\n  }\n};\n\nDrawPoint.toDisplayFeatures = function(state, geojson, display) {\n  // Never render the point we're drawing\n  const isActivePoint = geojson.properties.id === state.point.id;\n  geojson.properties.active = (isActivePoint) ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  if (!isActivePoint) return display(geojson);\n};\n\nDrawPoint.onTrash = DrawPoint.stopDrawingAndRemove;\n\nDrawPoint.onKeyUp = function(state, e) {\n  if (CommonSelectors.isEscapeKey(e) || CommonSelectors.isEnterKey(e)) {\n    return this.stopDrawingAndRemove(state, e);\n  }\n};\n\nmodule.exports = DrawPoint;\n"]},"metadata":{},"sourceType":"script"}