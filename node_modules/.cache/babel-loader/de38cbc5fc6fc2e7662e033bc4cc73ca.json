{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar invariant_1 = require(\"@turf/invariant\");\n\nvar helpers_1 = require(\"@turf/helpers\"); //http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n\n/**\n * Calculates the distance between two {@link Point|points} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name distance\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\n\n\nfunction distance(from, to, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var coordinates1 = invariant_1.getCoord(from);\n  var coordinates2 = invariant_1.getCoord(to);\n  var dLat = helpers_1.degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = helpers_1.degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = helpers_1.degreesToRadians(coordinates1[1]);\n  var lat2 = helpers_1.degreesToRadians(coordinates2[1]);\n  var a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n  return helpers_1.radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);\n}\n\nexports.default = distance;","map":null,"metadata":{},"sourceType":"script"}