{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/control/ZoomSlider\r\n */\n\n\nimport Control from './Control.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { easeOut } from '../easing.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { stopPropagation } from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { clamp } from '../math.js';\nimport PointerEventType from '../pointer/EventType.js';\nimport '@openlayers/pepjs';\n/**\r\n * The enum for available directions.\r\n *\r\n * @enum {number}\r\n */\n\nvar Direction = {\n  VERTICAL: 0,\n  HORIZONTAL: 1\n};\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-zoomslider'] CSS class name.\r\n * @property {number} [duration=200] Animation duration in milliseconds.\r\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\r\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\r\n */\n\n/**\r\n * @classdesc\r\n * A slider type of control for zooming.\r\n *\r\n * Example:\r\n *\r\n *     map.addControl(new ZoomSlider());\r\n *\r\n * @api\r\n */\n\nvar ZoomSlider =\n/** @class */\nfunction (_super) {\n  __extends(ZoomSlider, _super);\n  /**\r\n   * @param {Options=} opt_options Zoom slider options.\r\n   */\n\n\n  function ZoomSlider(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render\n    }) || this;\n    /**\r\n      * @type {!Array.<import(\"../events.js\").EventsKey>}\r\n      * @private\r\n      */\n\n    _this.dragListenerKeys_ = [];\n    /**\r\n     * Will hold the current resolution of the view.\r\n     *\r\n     * @type {number|undefined}\r\n     * @private\r\n     */\n\n    _this.currentResolution_ = undefined;\n    /**\r\n     * The direction of the slider. Will be determined from actual display of the\r\n     * container and defaults to Direction.VERTICAL.\r\n     *\r\n     * @type {Direction}\r\n     * @private\r\n     */\n\n    _this.direction_ = Direction.VERTICAL;\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\n\n    _this.dragging_;\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\n\n    _this.heightLimit_ = 0;\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\n\n    _this.widthLimit_ = 0;\n    /**\r\n     * @type {number|undefined}\r\n     * @private\r\n     */\n\n    _this.startX_;\n    /**\r\n     * @type {number|undefined}\r\n     * @private\r\n     */\n\n    _this.startY_;\n    /**\r\n     * The calculated thumb size (border box plus margins).  Set when initSlider_\r\n     * is called.\r\n     * @type {import(\"../size.js\").Size}\r\n     * @private\r\n     */\n\n    _this.thumbSize_ = null;\n    /**\r\n     * Whether the slider is initialized.\r\n     * @type {boolean}\r\n     * @private\r\n     */\n\n    _this.sliderInitialized_ = false;\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\n\n    _this.duration_ = options.duration !== undefined ? options.duration : 200;\n    var className = options.className !== undefined ? options.className : 'ol-zoomslider';\n    var thumbElement = document.createElement('button');\n    thumbElement.setAttribute('type', 'button');\n    thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n    var containerElement = _this.element;\n    containerElement.setAttribute('touch-action', 'none');\n    containerElement.className = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    containerElement.appendChild(thumbElement);\n    containerElement.addEventListener(PointerEventType.POINTERDOWN, _this.handleDraggerStart_.bind(_this), false);\n    containerElement.addEventListener(PointerEventType.POINTERMOVE, _this.handleDraggerDrag_.bind(_this), false);\n    containerElement.addEventListener(PointerEventType.POINTERUP, _this.handleDraggerEnd_.bind(_this), false);\n    containerElement.addEventListener(EventType.CLICK, _this.handleContainerClick_.bind(_this), false);\n    thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);\n    return _this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ZoomSlider.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n\n    if (map) {\n      map.render();\n    }\n  };\n  /**\r\n   * Initializes the slider element. This will determine and set this controls\r\n   * direction_ and also constrain the dragging of the thumb to always be within\r\n   * the bounds of the container.\r\n   *\r\n   * @private\r\n   */\n\n\n  ZoomSlider.prototype.initSlider_ = function () {\n    var container = this.element;\n    var containerSize = {\n      width: container.offsetWidth,\n      height: container.offsetHeight\n    };\n    var thumb =\n    /** @type {HTMLElement} */\n    container.firstElementChild;\n    var computedStyle = getComputedStyle(thumb);\n    var thumbWidth = thumb.offsetWidth + parseFloat(computedStyle['marginRight']) + parseFloat(computedStyle['marginLeft']);\n    var thumbHeight = thumb.offsetHeight + parseFloat(computedStyle['marginTop']) + parseFloat(computedStyle['marginBottom']);\n    this.thumbSize_ = [thumbWidth, thumbHeight];\n\n    if (containerSize.width > containerSize.height) {\n      this.direction_ = Direction.HORIZONTAL;\n      this.widthLimit_ = containerSize.width - thumbWidth;\n    } else {\n      this.direction_ = Direction.VERTICAL;\n      this.heightLimit_ = containerSize.height - thumbHeight;\n    }\n\n    this.sliderInitialized_ = true;\n  };\n  /**\r\n   * @param {PointerEvent} event The browser event to handle.\r\n   * @private\r\n   */\n\n\n  ZoomSlider.prototype.handleContainerClick_ = function (event) {\n    var view = this.getMap().getView();\n    var relativePosition = this.getRelativePosition_(event.offsetX - this.thumbSize_[0] / 2, event.offsetY - this.thumbSize_[1] / 2);\n    var resolution = this.getResolutionForPosition_(relativePosition);\n    var zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));\n    view.animateInternal({\n      zoom: zoom,\n      duration: this.duration_,\n      easing: easeOut\n    });\n  };\n  /**\r\n   * Handle dragger start events.\r\n   * @param {PointerEvent} event The drag event.\r\n   * @private\r\n   */\n\n\n  ZoomSlider.prototype.handleDraggerStart_ = function (event) {\n    if (!this.dragging_ && event.target === this.element.firstElementChild) {\n      var element =\n      /** @type {HTMLElement} */\n      this.element.firstElementChild;\n      this.getMap().getView().beginInteraction();\n      this.startX_ = event.clientX - parseFloat(element.style.left);\n      this.startY_ = event.clientY - parseFloat(element.style.top);\n      this.dragging_ = true;\n\n      if (this.dragListenerKeys_.length === 0) {\n        var drag = this.handleDraggerDrag_;\n        var end = this.handleDraggerEnd_;\n        this.dragListenerKeys_.push(listen(document, PointerEventType.POINTERMOVE, drag, this), listen(document, PointerEventType.POINTERUP, end, this));\n      }\n    }\n  };\n  /**\r\n   * Handle dragger drag events.\r\n   *\r\n   * @param {PointerEvent} event The drag event.\r\n   * @private\r\n   */\n\n\n  ZoomSlider.prototype.handleDraggerDrag_ = function (event) {\n    if (this.dragging_) {\n      var deltaX = event.clientX - this.startX_;\n      var deltaY = event.clientY - this.startY_;\n      var relativePosition = this.getRelativePosition_(deltaX, deltaY);\n      this.currentResolution_ = this.getResolutionForPosition_(relativePosition);\n      this.getMap().getView().setResolution(this.currentResolution_);\n    }\n  };\n  /**\r\n   * Handle dragger end events.\r\n   * @param {PointerEvent} event The drag event.\r\n   * @private\r\n   */\n\n\n  ZoomSlider.prototype.handleDraggerEnd_ = function (event) {\n    if (this.dragging_) {\n      var view = this.getMap().getView();\n      view.endInteraction();\n      this.dragging_ = false;\n      this.startX_ = undefined;\n      this.startY_ = undefined;\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n    }\n  };\n  /**\r\n   * Positions the thumb inside its container according to the given resolution.\r\n   *\r\n   * @param {number} res The res.\r\n   * @private\r\n   */\n\n\n  ZoomSlider.prototype.setThumbPosition_ = function (res) {\n    var position = this.getPositionForResolution_(res);\n    var thumb =\n    /** @type {HTMLElement} */\n    this.element.firstElementChild;\n\n    if (this.direction_ == Direction.HORIZONTAL) {\n      thumb.style.left = this.widthLimit_ * position + 'px';\n    } else {\n      thumb.style.top = this.heightLimit_ * position + 'px';\n    }\n  };\n  /**\r\n   * Calculates the relative position of the thumb given x and y offsets.  The\r\n   * relative position scales from 0 to 1.  The x and y offsets are assumed to be\r\n   * in pixel units within the dragger limits.\r\n   *\r\n   * @param {number} x Pixel position relative to the left of the slider.\r\n   * @param {number} y Pixel position relative to the top of the slider.\r\n   * @return {number} The relative position of the thumb.\r\n   * @private\r\n   */\n\n\n  ZoomSlider.prototype.getRelativePosition_ = function (x, y) {\n    var amount;\n\n    if (this.direction_ === Direction.HORIZONTAL) {\n      amount = x / this.widthLimit_;\n    } else {\n      amount = y / this.heightLimit_;\n    }\n\n    return clamp(amount, 0, 1);\n  };\n  /**\r\n   * Calculates the corresponding resolution of the thumb given its relative\r\n   * position (where 0 is the minimum and 1 is the maximum).\r\n   *\r\n   * @param {number} position The relative position of the thumb.\r\n   * @return {number} The corresponding resolution.\r\n   * @private\r\n   */\n\n\n  ZoomSlider.prototype.getResolutionForPosition_ = function (position) {\n    var fn = this.getMap().getView().getResolutionForValueFunction();\n    return fn(1 - position);\n  };\n  /**\r\n   * Determines the relative position of the slider for the given resolution.  A\r\n   * relative position of 0 corresponds to the minimum view resolution.  A\r\n   * relative position of 1 corresponds to the maximum view resolution.\r\n   *\r\n   * @param {number} res The resolution.\r\n   * @return {number} The relative position value (between 0 and 1).\r\n   * @private\r\n   */\n\n\n  ZoomSlider.prototype.getPositionForResolution_ = function (res) {\n    var fn = this.getMap().getView().getValueForResolutionFunction();\n    return clamp(1 - fn(res), 0, 1);\n  };\n\n  return ZoomSlider;\n}(Control);\n/**\r\n * Update the zoomslider element.\r\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n * @this {ZoomSlider}\r\n * @api\r\n */\n\n\nexport function render(mapEvent) {\n  if (!mapEvent.frameState) {\n    return;\n  }\n\n  if (!this.sliderInitialized_) {\n    this.initSlider_();\n  }\n\n  var res = mapEvent.frameState.viewState.resolution;\n  this.currentResolution_ = res;\n  this.setThumbPosition_(res);\n}\nexport default ZoomSlider;","map":null,"metadata":{},"sourceType":"module"}