{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { document } from '../utils/globals';\nimport PropTypes from 'prop-types';\nimport BaseControl from './base-control';\nimport React from 'react';\nimport mapboxgl from '../utils/mapboxgl';\nvar propTypes = Object.assign({}, BaseControl.propTypes, {\n  className: PropTypes.string,\n  container: PropTypes.object\n});\nvar defaultProps = Object.assign({}, BaseControl.defaultProps, {\n  className: '',\n  container: null\n});\n\nvar FullscreenControl = function (_BaseControl) {\n  _inherits(FullscreenControl, _BaseControl);\n\n  function FullscreenControl() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FullscreenControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FullscreenControl)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isFullscreen: false,\n      showButton: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_mapboxFullscreenControl\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_onFullscreenChange\", function () {\n      var nextState = !_this._mapboxFullscreenControl._fullscreen;\n      _this._mapboxFullscreenControl._fullscreen = nextState;\n\n      _this.setState({\n        isFullscreen: nextState\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onClickFullscreen\", function () {\n      _this._mapboxFullscreenControl._onClickFullscreen();\n    });\n\n    return _this;\n  }\n\n  _createClass(FullscreenControl, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var container = this.props.container || this._context.mapContainer;\n      this._mapboxFullscreenControl = new mapboxgl.FullscreenControl({\n        container: container\n      });\n      this.setState({\n        showButton: this._mapboxFullscreenControl._checkFullscreenSupport()\n      });\n      document.addEventListener(this._mapboxFullscreenControl._fullscreenchange, this._onFullscreenChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(this._mapboxFullscreenControl._fullscreenchange, this._onFullscreenChange);\n    }\n  }, {\n    key: \"_renderButton\",\n    value: function _renderButton(type, label, callback) {\n      return React.createElement(\"button\", {\n        key: type,\n        className: \"mapboxgl-ctrl-icon mapboxgl-ctrl-\".concat(type),\n        type: \"button\",\n        title: label,\n        onClick: callback\n      }, React.createElement(\"span\", {\n        className: \"mapboxgl-ctrl-icon\",\n        \"aria-hidden\": \"true\"\n      }));\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      if (!this.state.showButton) {\n        return null;\n      }\n\n      var className = this.props.className;\n      var isFullscreen = this.state.isFullscreen;\n      var type = isFullscreen ? 'shrink' : 'fullscreen';\n      return React.createElement(\"div\", {\n        className: \"mapboxgl-ctrl mapboxgl-ctrl-group \".concat(className),\n        ref: this._containerRef\n      }, this._renderButton(type, 'Toggle fullscreen', this._onClickFullscreen));\n    }\n  }]);\n\n  return FullscreenControl;\n}(BaseControl);\n\n_defineProperty(FullscreenControl, \"propTypes\", propTypes);\n\n_defineProperty(FullscreenControl, \"defaultProps\", defaultProps);\n\nexport { FullscreenControl as default };","map":null,"metadata":{},"sourceType":"module"}