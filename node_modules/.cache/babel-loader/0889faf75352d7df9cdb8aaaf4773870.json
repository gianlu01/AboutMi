{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar meta_1 = require(\"@turf/meta\"); // Note: change RADIUS => earthRadius\n\n\nvar RADIUS = 6378137;\n/**\n * Takes one or more features and returns their area in square meters.\n *\n * @name area\n * @param {GeoJSON} geojson input GeoJSON feature(s)\n * @returns {number} area in square meters\n * @example\n * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n *\n * var area = turf.area(polygon);\n *\n * //addToMap\n * var addToMap = [polygon]\n * polygon.properties.area = area\n */\n\nfunction area(geojson) {\n  return meta_1.geomReduce(geojson, function (value, geom) {\n    return value + calculateArea(geom);\n  }, 0);\n}\n\nexports.default = area;\n/**\n * Calculate Area\n *\n * @private\n * @param {Geometry} geom GeoJSON Geometries\n * @returns {number} area\n */\n\nfunction calculateArea(geom) {\n  var total = 0;\n  var i;\n\n  switch (geom.type) {\n    case \"Polygon\":\n      return polygonArea(geom.coordinates);\n\n    case \"MultiPolygon\":\n      for (i = 0; i < geom.coordinates.length; i++) {\n        total += polygonArea(geom.coordinates[i]);\n      }\n\n      return total;\n\n    case \"Point\":\n    case \"MultiPoint\":\n    case \"LineString\":\n    case \"MultiLineString\":\n      return 0;\n  }\n\n  return 0;\n}\n\nfunction polygonArea(coords) {\n  var total = 0;\n\n  if (coords && coords.length > 0) {\n    total += Math.abs(ringArea(coords[0]));\n\n    for (var i = 1; i < coords.length; i++) {\n      total -= Math.abs(ringArea(coords[i]));\n    }\n  }\n\n  return total;\n}\n/**\n * @private\n * Calculate the approximate area of the polygon were it projected onto the earth.\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\n *\n * Reference:\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\",\n * JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007 http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409\n *\n * @param {Array<Array<number>>} coords Ring Coordinates\n * @returns {number} The approximate signed geodesic area of the polygon in square meters.\n */\n\n\nfunction ringArea(coords) {\n  var p1;\n  var p2;\n  var p3;\n  var lowerIndex;\n  var middleIndex;\n  var upperIndex;\n  var i;\n  var total = 0;\n  var coordsLength = coords.length;\n\n  if (coordsLength > 2) {\n    for (i = 0; i < coordsLength; i++) {\n      if (i === coordsLength - 2) {\n        lowerIndex = coordsLength - 2;\n        middleIndex = coordsLength - 1;\n        upperIndex = 0;\n      } else if (i === coordsLength - 1) {\n        lowerIndex = coordsLength - 1;\n        middleIndex = 0;\n        upperIndex = 1;\n      } else {\n        lowerIndex = i;\n        middleIndex = i + 1;\n        upperIndex = i + 2;\n      }\n\n      p1 = coords[lowerIndex];\n      p2 = coords[middleIndex];\n      p3 = coords[upperIndex];\n      total += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));\n    }\n\n    total = total * RADIUS * RADIUS / 2;\n  }\n\n  return total;\n}\n\nfunction rad(num) {\n  return num * Math.PI / 180;\n}","map":null,"metadata":{},"sourceType":"script"}