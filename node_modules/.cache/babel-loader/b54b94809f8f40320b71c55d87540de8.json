{"ast":null,"code":"var jsonlint = require('jsonlint-lines'),\n    geojsonHintObject = require('./object');\n/**\n * @alias geojsonhint\n * @param {(string|object)} GeoJSON given as a string or as an object\n * @param {Object} options\n * @param {boolean} [options.noDuplicateMembers=true] forbid repeated\n * properties. This is only available for string input, becaused parsed\n * Objects cannot have duplicate properties.\n * @param {boolean} [options.precisionWarning=true] warn if GeoJSON contains\n * unnecessary coordinate precision.\n * @returns {Array<Object>} an array of errors\n */\n\n\nfunction hint(str, options) {\n  var gj,\n      errors = [];\n\n  if (typeof str === 'object') {\n    gj = str;\n  } else if (typeof str === 'string') {\n    try {\n      gj = jsonlint.parse(str);\n    } catch (e) {\n      var match = e.message.match(/line (\\d+)/);\n      var lineNumber = parseInt(match[1], 10);\n      return [{\n        line: lineNumber - 1,\n        message: e.message,\n        error: e\n      }];\n    }\n  } else {\n    return [{\n      message: 'Expected string or object as input',\n      line: 0\n    }];\n  }\n\n  errors = errors.concat(geojsonHintObject.hint(gj, options));\n  return errors;\n}\n\nmodule.exports.hint = hint;","map":{"version":3,"sources":["/home/gianluca/Documenti/Scuola/Informatica/Progetto/AboutMi/node_modules/@mapbox/geojsonhint/lib/index.js"],"names":["jsonlint","require","geojsonHintObject","hint","str","options","gj","errors","parse","e","match","message","lineNumber","parseInt","line","error","concat","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAtB;AAAA,IACEC,iBAAiB,GAAGD,OAAO,CAAC,UAAD,CAD7B;AAGA;;;;;;;;;;;;;AAWA,SAASE,IAAT,CAAcC,GAAd,EAAmBC,OAAnB,EAA4B;AAExB,MAAIC,EAAJ;AAAA,MAAQC,MAAM,GAAG,EAAjB;;AAEA,MAAI,OAAOH,GAAP,KAAe,QAAnB,EAA6B;AACzBE,IAAAA,EAAE,GAAGF,GAAL;AACH,GAFD,MAEO,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAChC,QAAI;AACAE,MAAAA,EAAE,GAAGN,QAAQ,CAACQ,KAAT,CAAeJ,GAAf,CAAL;AACH,KAFD,CAEE,OAAMK,CAAN,EAAS;AACP,UAAIC,KAAK,GAAGD,CAAC,CAACE,OAAF,CAAUD,KAAV,CAAgB,YAAhB,CAAZ;AACA,UAAIE,UAAU,GAAGC,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAzB;AACA,aAAO,CAAC;AACJI,QAAAA,IAAI,EAAEF,UAAU,GAAG,CADf;AAEJD,QAAAA,OAAO,EAAEF,CAAC,CAACE,OAFP;AAGJI,QAAAA,KAAK,EAAEN;AAHH,OAAD,CAAP;AAKH;AACJ,GAZM,MAYA;AACH,WAAO,CAAC;AACJE,MAAAA,OAAO,EAAE,oCADL;AAEJG,MAAAA,IAAI,EAAE;AAFF,KAAD,CAAP;AAIH;;AAEDP,EAAAA,MAAM,GAAGA,MAAM,CAACS,MAAP,CAAcd,iBAAiB,CAACC,IAAlB,CAAuBG,EAAvB,EAA2BD,OAA3B,CAAd,CAAT;AAEA,SAAOE,MAAP;AACH;;AAEDU,MAAM,CAACC,OAAP,CAAef,IAAf,GAAsBA,IAAtB","sourcesContent":["var jsonlint = require('jsonlint-lines'),\n  geojsonHintObject = require('./object');\n\n/**\n * @alias geojsonhint\n * @param {(string|object)} GeoJSON given as a string or as an object\n * @param {Object} options\n * @param {boolean} [options.noDuplicateMembers=true] forbid repeated\n * properties. This is only available for string input, becaused parsed\n * Objects cannot have duplicate properties.\n * @param {boolean} [options.precisionWarning=true] warn if GeoJSON contains\n * unnecessary coordinate precision.\n * @returns {Array<Object>} an array of errors\n */\nfunction hint(str, options) {\n\n    var gj, errors = [];\n\n    if (typeof str === 'object') {\n        gj = str;\n    } else if (typeof str === 'string') {\n        try {\n            gj = jsonlint.parse(str);\n        } catch(e) {\n            var match = e.message.match(/line (\\d+)/);\n            var lineNumber = parseInt(match[1], 10);\n            return [{\n                line: lineNumber - 1,\n                message: e.message,\n                error: e\n            }];\n        }\n    } else {\n        return [{\n            message: 'Expected string or object as input',\n            line: 0\n        }];\n    }\n\n    errors = errors.concat(geojsonHintObject.hint(gj, options));\n\n    return errors;\n}\n\nmodule.exports.hint = hint;\n"]},"metadata":{},"sourceType":"script"}