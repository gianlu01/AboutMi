{"ast":null,"code":"/* parser generated by jison 0.4.17 */\n\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar jsonlint = function () {\n  var o = function (k, v, o, l) {\n    for (o = o || {}, l = k.length; l--; o[k[l]] = v);\n\n    return o;\n  },\n      $V0 = [1, 12],\n      $V1 = [1, 13],\n      $V2 = [1, 9],\n      $V3 = [1, 10],\n      $V4 = [1, 11],\n      $V5 = [1, 14],\n      $V6 = [1, 15],\n      $V7 = [14, 18, 22, 24],\n      $V8 = [18, 22],\n      $V9 = [22, 24];\n\n  var parser = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"JSONString\": 3,\n      \"STRING\": 4,\n      \"JSONNumber\": 5,\n      \"NUMBER\": 6,\n      \"JSONNullLiteral\": 7,\n      \"NULL\": 8,\n      \"JSONBooleanLiteral\": 9,\n      \"TRUE\": 10,\n      \"FALSE\": 11,\n      \"JSONText\": 12,\n      \"JSONValue\": 13,\n      \"EOF\": 14,\n      \"JSONObject\": 15,\n      \"JSONArray\": 16,\n      \"{\": 17,\n      \"}\": 18,\n      \"JSONMemberList\": 19,\n      \"JSONMember\": 20,\n      \":\": 21,\n      \",\": 22,\n      \"[\": 23,\n      \"]\": 24,\n      \"JSONElementList\": 25,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      4: \"STRING\",\n      6: \"NUMBER\",\n      8: \"NULL\",\n      10: \"TRUE\",\n      11: \"FALSE\",\n      14: \"EOF\",\n      17: \"{\",\n      18: \"}\",\n      21: \":\",\n      22: \",\",\n      23: \"[\",\n      24: \"]\"\n    },\n    productions_: [0, [3, 1], [5, 1], [7, 1], [9, 1], [9, 1], [12, 2], [13, 1], [13, 1], [13, 1], [13, 1], [13, 1], [13, 1], [15, 2], [15, 3], [20, 3], [19, 1], [19, 3], [16, 2], [16, 3], [25, 1], [25, 3]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate\n    /* action[1] */\n    , $$\n    /* vstack */\n    , _$\n    /* lstack */\n    ) {\n      /* this == yyval */\n      var $0 = $$.length - 1;\n\n      switch (yystate) {\n        case 1:\n          // replace escaped characters with actual character\n          this.$ = yytext.replace(/\\\\(\\\\|\")/g, \"$\" + \"1\").replace(/\\\\n/g, '\\n').replace(/\\\\r/g, '\\r').replace(/\\\\t/g, '\\t').replace(/\\\\v/g, '\\v').replace(/\\\\f/g, '\\f').replace(/\\\\b/g, '\\b');\n          break;\n\n        case 2:\n          this.$ = Number(yytext);\n          break;\n\n        case 3:\n          this.$ = null;\n          break;\n\n        case 4:\n          this.$ = true;\n          break;\n\n        case 5:\n          this.$ = false;\n          break;\n\n        case 6:\n          return this.$ = $$[$0 - 1];\n          break;\n\n        case 13:\n          this.$ = {};\n          Object.defineProperty(this.$, '__line__', {\n            value: this._$.first_line,\n            enumerable: false\n          });\n          break;\n\n        case 14:\n        case 19:\n          this.$ = $$[$0 - 1];\n          Object.defineProperty(this.$, '__line__', {\n            value: this._$.first_line,\n            enumerable: false\n          });\n          break;\n\n        case 15:\n          this.$ = [$$[$0 - 2], $$[$0]];\n          break;\n\n        case 16:\n          this.$ = {};\n          this.$[$$[$0][0]] = $$[$0][1];\n          break;\n\n        case 17:\n          this.$ = $$[$0 - 2];\n\n          if ($$[$0 - 2][$$[$0][0]] !== undefined) {\n            if (!this.$.__duplicateProperties__) {\n              Object.defineProperty(this.$, '__duplicateProperties__', {\n                value: [],\n                enumerable: false\n              });\n            }\n\n            this.$.__duplicateProperties__.push($$[$0][0]);\n          }\n\n          $$[$0 - 2][$$[$0][0]] = $$[$0][1];\n          break;\n\n        case 18:\n          this.$ = [];\n          Object.defineProperty(this.$, '__line__', {\n            value: this._$.first_line,\n            enumerable: false\n          });\n          break;\n\n        case 20:\n          this.$ = [$$[$0]];\n          break;\n\n        case 21:\n          this.$ = $$[$0 - 2];\n          $$[$0 - 2].push($$[$0]);\n          break;\n      }\n    },\n    table: [{\n      3: 5,\n      4: $V0,\n      5: 6,\n      6: $V1,\n      7: 3,\n      8: $V2,\n      9: 4,\n      10: $V3,\n      11: $V4,\n      12: 1,\n      13: 2,\n      15: 7,\n      16: 8,\n      17: $V5,\n      23: $V6\n    }, {\n      1: [3]\n    }, {\n      14: [1, 16]\n    }, o($V7, [2, 7]), o($V7, [2, 8]), o($V7, [2, 9]), o($V7, [2, 10]), o($V7, [2, 11]), o($V7, [2, 12]), o($V7, [2, 3]), o($V7, [2, 4]), o($V7, [2, 5]), o([14, 18, 21, 22, 24], [2, 1]), o($V7, [2, 2]), {\n      3: 20,\n      4: $V0,\n      18: [1, 17],\n      19: 18,\n      20: 19\n    }, {\n      3: 5,\n      4: $V0,\n      5: 6,\n      6: $V1,\n      7: 3,\n      8: $V2,\n      9: 4,\n      10: $V3,\n      11: $V4,\n      13: 23,\n      15: 7,\n      16: 8,\n      17: $V5,\n      23: $V6,\n      24: [1, 21],\n      25: 22\n    }, {\n      1: [2, 6]\n    }, o($V7, [2, 13]), {\n      18: [1, 24],\n      22: [1, 25]\n    }, o($V8, [2, 16]), {\n      21: [1, 26]\n    }, o($V7, [2, 18]), {\n      22: [1, 28],\n      24: [1, 27]\n    }, o($V9, [2, 20]), o($V7, [2, 14]), {\n      3: 20,\n      4: $V0,\n      20: 29\n    }, {\n      3: 5,\n      4: $V0,\n      5: 6,\n      6: $V1,\n      7: 3,\n      8: $V2,\n      9: 4,\n      10: $V3,\n      11: $V4,\n      13: 30,\n      15: 7,\n      16: 8,\n      17: $V5,\n      23: $V6\n    }, o($V7, [2, 19]), {\n      3: 5,\n      4: $V0,\n      5: 6,\n      6: $V1,\n      7: 3,\n      8: $V2,\n      9: 4,\n      10: $V3,\n      11: $V4,\n      13: 31,\n      15: 7,\n      16: 8,\n      17: $V5,\n      23: $V6\n    }, o($V8, [2, 17]), o($V8, [2, 15]), o($V9, [2, 21])],\n    defaultActions: {\n      16: [2, 6]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        function _parseError(msg, hash) {\n          this.message = msg;\n          this.hash = hash;\n        }\n\n        _parseError.prototype = Error;\n        throw new _parseError(str, hash);\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n          stack = [0],\n          tstack = [],\n          vstack = [null],\n          lstack = [],\n          table = this.table,\n          yytext = '',\n          yylineno = 0,\n          yyleng = 0,\n          recovering = 0,\n          TERROR = 2,\n          EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n\n      lexer.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer;\n      sharedState.yy.parser = this;\n\n      if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n      }\n\n      var yyloc = lexer.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer.options && lexer.options.ranges;\n\n      if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n\n      function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n      }\n\n      _token_stack: var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n\n        if (typeof token !== 'number') {\n          token = self.symbols_[token] || token;\n        }\n\n        return token;\n      };\n\n      var symbol,\n          preErrorSymbol,\n          state,\n          action,\n          a,\n          r,\n          yyval = {},\n          p,\n          len,\n          newState,\n          expected;\n\n      while (true) {\n        state = stack[stack.length - 1];\n\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == 'undefined') {\n            symbol = lex();\n          }\n\n          action = table[state] && table[state][symbol];\n        }\n\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n          var errStr = '';\n          expected = [];\n\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push('\\'' + this.terminals_[p] + '\\'');\n            }\n          }\n\n          if (lexer.showPosition) {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n          } else {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n          }\n\n          this.parseError(errStr, {\n            text: lexer.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer.yylineno,\n            loc: yyloc,\n            expected: expected\n          });\n        }\n\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n\n            if (!preErrorSymbol) {\n              yyleng = lexer.yyleng;\n              yytext = lexer.yytext;\n              yylineno = lexer.yylineno;\n              yyloc = lexer.yylloc;\n\n              if (recovering > 0) {\n                recovering--;\n              }\n            } else {\n              symbol = preErrorSymbol;\n              preErrorSymbol = null;\n            }\n\n            break;\n\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n            if (typeof r !== 'undefined') {\n              return r;\n            }\n\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n\n          case 3:\n            return true;\n        }\n      }\n\n      return true;\n    }\n  };\n  /* generated by jison-lex 0.3.4 */\n\n  var lexer = function () {\n    var lexer = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;\n\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function () {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function () {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n\n        return this;\n      },\n      // retain first n characters of the match\n      less: function (n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function () {\n        var next = this.match;\n\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n\n        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function (match, indexed_rule) {\n        var token, lines, backup;\n\n        if (this.options.backtrack_lexer) {\n          // save context\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n\n        if (this.done && this._input) {\n          this.done = false;\n        }\n\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          // recover context\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n\n          return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n\n        return false;\n      },\n      // return next match in input\n      next: function () {\n        if (this.done) {\n          return this.EOF;\n        }\n\n        if (!this._input) {\n          this.done = true;\n        }\n\n        var token, match, tempMatch, index;\n\n        if (!this._more) {\n          this.yytext = '';\n          this.match = '';\n        }\n\n        var rules = this._currentRules();\n\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue; // rule action called reject() implying a rule MISmatch.\n              } else {\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n\n        if (match) {\n          token = this.test_match(match, rules[index]);\n\n          if (token !== false) {\n            return token;\n          } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n\n          return false;\n        }\n\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {},\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        var YYSTATE = YY_START;\n\n        switch ($avoiding_name_collisions) {\n          case 0:\n            /* skip whitespace */\n            break;\n\n          case 1:\n            return 6;\n            break;\n\n          case 2:\n            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);\n            return 4;\n            break;\n\n          case 3:\n            return 17;\n            break;\n\n          case 4:\n            return 18;\n            break;\n\n          case 5:\n            return 23;\n            break;\n\n          case 6:\n            return 24;\n            break;\n\n          case 7:\n            return 22;\n            break;\n\n          case 8:\n            return 21;\n            break;\n\n          case 9:\n            return 10;\n            break;\n\n          case 10:\n            return 11;\n            break;\n\n          case 11:\n            return 8;\n            break;\n\n          case 12:\n            return 14;\n            break;\n\n          case 13:\n            return 'INVALID';\n            break;\n        }\n      },\n      rules: [/^(?:\\s+)/, /^(?:(-?([0-9]|[1-9][0-9]+))(\\.[0-9]+)?([eE][-+]?[0-9]+)?\\b)/, /^(?:\"(?:\\\\[\\\\\"bfnrt\\/]|\\\\u[a-fA-F0-9]{4}|[^\\\\\\0-\\x09\\x0a-\\x1f\"])*\")/, /^(?:\\{)/, /^(?:\\})/, /^(?:\\[)/, /^(?:\\])/, /^(?:,)/, /^(?::)/, /^(?:true\\b)/, /^(?:false\\b)/, /^(?:null\\b)/, /^(?:$)/, /^(?:.)/],\n      conditions: {\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer;\n  }();\n\n  parser.lexer = lexer;\n\n  function Parser() {\n    this.yy = {};\n  }\n\n  Parser.prototype = parser;\n  parser.Parser = Parser;\n  return new Parser();\n}();\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n  exports.parser = jsonlint;\n  exports.Parser = jsonlint.Parser;\n\n  exports.parse = function () {\n    return jsonlint.parse.apply(jsonlint, arguments);\n  };\n\n  exports.main = function commonjsMain(args) {\n    if (!args[1]) {\n      console.log('Usage: ' + args[0] + ' FILE');\n      process.exit(1);\n    }\n\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n\n    return exports.parser.parse(source);\n  };\n\n  if (typeof module !== 'undefined' && require.main === module) {\n    exports.main(process.argv.slice(1));\n  }\n}","map":{"version":3,"sources":["C:/Users/Gianluca/Documents/Scuola/Informatica/AboutMi/Sito/AboutMi/node_modules/jsonlint-lines/lib/jsonlint.js"],"names":["jsonlint","o","k","v","l","length","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","parser","trace","yy","symbols_","terminals_","productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","replace","Number","Object","defineProperty","value","first_line","enumerable","undefined","__duplicateProperties__","push","table","defaultActions","parseError","str","hash","recoverable","_parseError","msg","message","prototype","Error","parse","input","self","stack","tstack","vstack","lstack","recovering","TERROR","EOF","args","slice","call","arguments","lexer","create","sharedState","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","getPrototypeOf","popStack","n","_token_stack","lex","token","symbol","preErrorSymbol","state","action","a","r","yyval","p","len","newState","expected","errStr","showPosition","join","text","match","line","loc","Array","last_line","first_column","last_column","range","apply","concat","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","pop","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","YYSTATE","Parser","require","exports","main","commonjsMain","console","log","process","exit","source","readFileSync","normalize","module","argv"],"mappings":"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","sourcesContent":["/* parser generated by jison 0.4.17 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar jsonlint = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[1,14],$V6=[1,15],$V7=[14,18,22,24],$V8=[18,22],$V9=[22,24];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"JSONString\":3,\"STRING\":4,\"JSONNumber\":5,\"NUMBER\":6,\"JSONNullLiteral\":7,\"NULL\":8,\"JSONBooleanLiteral\":9,\"TRUE\":10,\"FALSE\":11,\"JSONText\":12,\"JSONValue\":13,\"EOF\":14,\"JSONObject\":15,\"JSONArray\":16,\"{\":17,\"}\":18,\"JSONMemberList\":19,\"JSONMember\":20,\":\":21,\",\":22,\"[\":23,\"]\":24,\"JSONElementList\":25,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",4:\"STRING\",6:\"NUMBER\",8:\"NULL\",10:\"TRUE\",11:\"FALSE\",14:\"EOF\",17:\"{\",18:\"}\",21:\":\",22:\",\",23:\"[\",24:\"]\"},\nproductions_: [0,[3,1],[5,1],[7,1],[9,1],[9,1],[12,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[15,2],[15,3],[20,3],[19,1],[19,3],[16,2],[16,3],[25,1],[25,3]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n // replace escaped characters with actual character\n          this.$ = yytext.replace(/\\\\(\\\\|\")/g, \"$\"+\"1\")\n                     .replace(/\\\\n/g,'\\n')\n                     .replace(/\\\\r/g,'\\r')\n                     .replace(/\\\\t/g,'\\t')\n                     .replace(/\\\\v/g,'\\v')\n                     .replace(/\\\\f/g,'\\f')\n                     .replace(/\\\\b/g,'\\b');\n        \nbreak;\ncase 2:\nthis.$ = Number(yytext);\nbreak;\ncase 3:\nthis.$ = null;\nbreak;\ncase 4:\nthis.$ = true;\nbreak;\ncase 5:\nthis.$ = false;\nbreak;\ncase 6:\nreturn this.$ = $$[$0-1];\nbreak;\ncase 13:\nthis.$ = {}; Object.defineProperty(this.$, '__line__', {\n            value: this._$.first_line,\n            enumerable: false\n        })\nbreak;\ncase 14: case 19:\nthis.$ = $$[$0-1]; Object.defineProperty(this.$, '__line__', {\n            value: this._$.first_line,\n            enumerable: false\n        })\nbreak;\ncase 15:\nthis.$ = [$$[$0-2], $$[$0]];\nbreak;\ncase 16:\nthis.$ = {}; this.$[$$[$0][0]] = $$[$0][1];\nbreak;\ncase 17:\n\n            this.$ = $$[$0-2];\n            if ($$[$0-2][$$[$0][0]] !== undefined) {\n                if (!this.$.__duplicateProperties__) {\n                    Object.defineProperty(this.$, '__duplicateProperties__', {\n                        value: [],\n                        enumerable: false\n                    });\n                }\n                this.$.__duplicateProperties__.push($$[$0][0]);\n            }\n            $$[$0-2][$$[$0][0]] = $$[$0][1];\n        \nbreak;\ncase 18:\nthis.$ = []; Object.defineProperty(this.$, '__line__', {\n            value: this._$.first_line,\n            enumerable: false\n        })\nbreak;\ncase 20:\nthis.$ = [$$[$0]];\nbreak;\ncase 21:\nthis.$ = $$[$0-2]; $$[$0-2].push($$[$0]);\nbreak;\n}\n},\ntable: [{3:5,4:$V0,5:6,6:$V1,7:3,8:$V2,9:4,10:$V3,11:$V4,12:1,13:2,15:7,16:8,17:$V5,23:$V6},{1:[3]},{14:[1,16]},o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o([14,18,21,22,24],[2,1]),o($V7,[2,2]),{3:20,4:$V0,18:[1,17],19:18,20:19},{3:5,4:$V0,5:6,6:$V1,7:3,8:$V2,9:4,10:$V3,11:$V4,13:23,15:7,16:8,17:$V5,23:$V6,24:[1,21],25:22},{1:[2,6]},o($V7,[2,13]),{18:[1,24],22:[1,25]},o($V8,[2,16]),{21:[1,26]},o($V7,[2,18]),{22:[1,28],24:[1,27]},o($V9,[2,20]),o($V7,[2,14]),{3:20,4:$V0,20:29},{3:5,4:$V0,5:6,6:$V1,7:3,8:$V2,9:4,10:$V3,11:$V4,13:30,15:7,16:8,17:$V5,23:$V6},o($V7,[2,19]),{3:5,4:$V0,5:6,6:$V1,7:3,8:$V2,9:4,10:$V3,11:$V4,13:31,15:7,16:8,17:$V5,23:$V6},o($V8,[2,17]),o($V8,[2,15]),o($V9,[2,21])],\ndefaultActions: {16:[2,6]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        function _parseError (msg, hash) {\n            this.message = msg;\n            this.hash = hash;\n        }\n        _parseError.prototype = Error;\n\n        throw new _parseError(str, hash);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:return 6\nbreak;\ncase 2:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 4\nbreak;\ncase 3:return 17\nbreak;\ncase 4:return 18\nbreak;\ncase 5:return 23\nbreak;\ncase 6:return 24\nbreak;\ncase 7:return 22\nbreak;\ncase 8:return 21\nbreak;\ncase 9:return 10\nbreak;\ncase 10:return 11\nbreak;\ncase 11:return 8\nbreak;\ncase 12:return 14\nbreak;\ncase 13:return 'INVALID'\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:(-?([0-9]|[1-9][0-9]+))(\\.[0-9]+)?([eE][-+]?[0-9]+)?\\b)/,/^(?:\"(?:\\\\[\\\\\"bfnrt\\/]|\\\\u[a-fA-F0-9]{4}|[^\\\\\\0-\\x09\\x0a-\\x1f\"])*\")/,/^(?:\\{)/,/^(?:\\})/,/^(?:\\[)/,/^(?:\\])/,/^(?:,)/,/^(?::)/,/^(?:true\\b)/,/^(?:false\\b)/,/^(?:null\\b)/,/^(?:$)/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = jsonlint;\nexports.Parser = jsonlint.Parser;\nexports.parse = function () { return jsonlint.parse.apply(jsonlint, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}"]},"metadata":{},"sourceType":"script"}