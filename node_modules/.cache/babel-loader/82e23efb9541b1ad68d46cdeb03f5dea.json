{"ast":null,"code":"const ModeInterface = require('./mode_interface');\n\nconst eventMapper = {\n  drag: 'onDrag',\n  click: 'onClick',\n  mousemove: 'onMouseMove',\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseout: 'onMouseOut',\n  keyup: 'onKeyUp',\n  keydown: 'onKeyDown',\n  touchstart: 'onTouchStart',\n  touchmove: 'onTouchMove',\n  touchend: 'onTouchEnd',\n  tap: 'onTap'\n};\nconst eventKeys = Object.keys(eventMapper);\n\nmodule.exports = function (modeObject) {\n  const modeObjectKeys = Object.keys(modeObject);\n  return function (ctx, startOpts = {}) {\n    let state = {};\n    const mode = modeObjectKeys.reduce((m, k) => {\n      m[k] = modeObject[k];\n      return m;\n    }, new ModeInterface(ctx));\n\n    function wrapper(eh) {\n      return function (e) {\n        mode[eh](state, e);\n      };\n    }\n\n    return {\n      start: function () {\n        state = mode.onSetup(startOpts); // this should set ui buttons\n        // Adds event handlers for all event options\n        // add sets the selector to false for all\n        // handlers that are not present in the mode\n        // to reduce on render calls for functions that\n        // have no logic\n\n        eventKeys.forEach(key => {\n          const modeHandler = eventMapper[key];\n\n          let selector = () => false;\n\n          if (modeObject[modeHandler]) {\n            selector = () => true;\n          }\n\n          this.on(key, selector, wrapper(modeHandler));\n        });\n      },\n      stop: function () {\n        mode.onStop(state);\n      },\n      trash: function () {\n        mode.onTrash(state);\n      },\n      combineFeatures: function () {\n        mode.onCombineFeatures(state);\n      },\n      uncombineFeatures: function () {\n        mode.onUncombineFeatures(state);\n      },\n      render: function (geojson, push) {\n        mode.toDisplayFeatures(state, geojson, push);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["C:/Users/michele/Desktop/IT/Code/react/aboutmi/node_modules/@mapbox/mapbox-gl-draw/src/modes/object_to_mode.js"],"names":["ModeInterface","require","eventMapper","drag","click","mousemove","mousedown","mouseup","mouseout","keyup","keydown","touchstart","touchmove","touchend","tap","eventKeys","Object","keys","module","exports","modeObject","modeObjectKeys","ctx","startOpts","state","mode","reduce","m","k","wrapper","eh","e","start","onSetup","forEach","key","modeHandler","selector","on","stop","onStop","trash","onTrash","combineFeatures","onCombineFeatures","uncombineFeatures","onUncombineFeatures","render","geojson","push","toDisplayFeatures"],"mappings":"AAAA,MAAMA,aAAa,GAAGC,OAAO,CAAC,kBAAD,CAA7B;;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,QADY;AAElBC,EAAAA,KAAK,EAAE,SAFW;AAGlBC,EAAAA,SAAS,EAAE,aAHO;AAIlBC,EAAAA,SAAS,EAAE,aAJO;AAKlBC,EAAAA,OAAO,EAAE,WALS;AAMlBC,EAAAA,QAAQ,EAAE,YANQ;AAOlBC,EAAAA,KAAK,EAAE,SAPW;AAQlBC,EAAAA,OAAO,EAAE,WARS;AASlBC,EAAAA,UAAU,EAAE,cATM;AAUlBC,EAAAA,SAAS,EAAE,aAVO;AAWlBC,EAAAA,QAAQ,EAAE,YAXQ;AAYlBC,EAAAA,GAAG,EAAE;AAZa,CAApB;AAeA,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYf,WAAZ,CAAlB;;AAEAgB,MAAM,CAACC,OAAP,GAAiB,UAASC,UAAT,EAAqB;AACpC,QAAMC,cAAc,GAAGL,MAAM,CAACC,IAAP,CAAYG,UAAZ,CAAvB;AAEA,SAAO,UAASE,GAAT,EAAcC,SAAS,GAAG,EAA1B,EAA8B;AACnC,QAAIC,KAAK,GAAG,EAAZ;AAEA,UAAMC,IAAI,GAAGJ,cAAc,CAACK,MAAf,CAAsB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3CD,MAAAA,CAAC,CAACC,CAAD,CAAD,GAAOR,UAAU,CAACQ,CAAD,CAAjB;AACA,aAAOD,CAAP;AACD,KAHY,EAGV,IAAI3B,aAAJ,CAAkBsB,GAAlB,CAHU,CAAb;;AAKA,aAASO,OAAT,CAAiBC,EAAjB,EAAqB;AACnB,aAAO,UAASC,CAAT,EAAY;AACjBN,QAAAA,IAAI,CAACK,EAAD,CAAJ,CAASN,KAAT,EAAgBO,CAAhB;AACD,OAFD;AAGD;;AAED,WAAO;AACLC,MAAAA,KAAK,EAAE,YAAW;AAChBR,QAAAA,KAAK,GAAGC,IAAI,CAACQ,OAAL,CAAaV,SAAb,CAAR,CADgB,CACiB;AAEjC;AACA;AACA;AACA;AACA;;AACAR,QAAAA,SAAS,CAACmB,OAAV,CAAkBC,GAAG,IAAI;AACvB,gBAAMC,WAAW,GAAGlC,WAAW,CAACiC,GAAD,CAA/B;;AACA,cAAIE,QAAQ,GAAG,MAAM,KAArB;;AACA,cAAIjB,UAAU,CAACgB,WAAD,CAAd,EAA6B;AAC3BC,YAAAA,QAAQ,GAAG,MAAM,IAAjB;AACD;;AACD,eAAKC,EAAL,CAAQH,GAAR,EAAaE,QAAb,EAAuBR,OAAO,CAACO,WAAD,CAA9B;AACD,SAPD;AASD,OAlBI;AAmBLG,MAAAA,IAAI,EAAE,YAAW;AACfd,QAAAA,IAAI,CAACe,MAAL,CAAYhB,KAAZ;AACD,OArBI;AAsBLiB,MAAAA,KAAK,EAAE,YAAW;AAChBhB,QAAAA,IAAI,CAACiB,OAAL,CAAalB,KAAb;AACD,OAxBI;AAyBLmB,MAAAA,eAAe,EAAE,YAAW;AAC1BlB,QAAAA,IAAI,CAACmB,iBAAL,CAAuBpB,KAAvB;AACD,OA3BI;AA4BLqB,MAAAA,iBAAiB,EAAE,YAAW;AAC5BpB,QAAAA,IAAI,CAACqB,mBAAL,CAAyBtB,KAAzB;AACD,OA9BI;AA+BLuB,MAAAA,MAAM,EAAE,UAASC,OAAT,EAAkBC,IAAlB,EAAwB;AAC9BxB,QAAAA,IAAI,CAACyB,iBAAL,CAAuB1B,KAAvB,EAA8BwB,OAA9B,EAAuCC,IAAvC;AACD;AAjCI,KAAP;AAmCD,GAjDD;AAkDD,CArDD","sourcesContent":["const ModeInterface = require('./mode_interface');\r\n\r\nconst eventMapper = {\r\n  drag: 'onDrag',\r\n  click: 'onClick',\r\n  mousemove: 'onMouseMove',\r\n  mousedown: 'onMouseDown',\r\n  mouseup: 'onMouseUp',\r\n  mouseout: 'onMouseOut',\r\n  keyup: 'onKeyUp',\r\n  keydown: 'onKeyDown',\r\n  touchstart: 'onTouchStart',\r\n  touchmove: 'onTouchMove',\r\n  touchend: 'onTouchEnd',\r\n  tap: 'onTap'\r\n};\r\n\r\nconst eventKeys = Object.keys(eventMapper);\r\n\r\nmodule.exports = function(modeObject) {\r\n  const modeObjectKeys = Object.keys(modeObject);\r\n\r\n  return function(ctx, startOpts = {}) {\r\n    let state = {};\r\n\r\n    const mode = modeObjectKeys.reduce((m, k) => {\r\n      m[k] = modeObject[k];\r\n      return m;\r\n    }, new ModeInterface(ctx));\r\n\r\n    function wrapper(eh) {\r\n      return function(e) {\r\n        mode[eh](state, e);\r\n      };\r\n    }\r\n\r\n    return {\r\n      start: function() {\r\n        state = mode.onSetup(startOpts); // this should set ui buttons\r\n\r\n        // Adds event handlers for all event options\r\n        // add sets the selector to false for all\r\n        // handlers that are not present in the mode\r\n        // to reduce on render calls for functions that\r\n        // have no logic\r\n        eventKeys.forEach(key => {\r\n          const modeHandler = eventMapper[key];\r\n          let selector = () => false;\r\n          if (modeObject[modeHandler]) {\r\n            selector = () => true;\r\n          }\r\n          this.on(key, selector, wrapper(modeHandler));\r\n        });\r\n\r\n      },\r\n      stop: function() {\r\n        mode.onStop(state);\r\n      },\r\n      trash: function() {\r\n        mode.onTrash(state);\r\n      },\r\n      combineFeatures: function() {\r\n        mode.onCombineFeatures(state);\r\n      },\r\n      uncombineFeatures: function() {\r\n        mode.onUncombineFeatures(state);\r\n      },\r\n      render: function(geojson, push) {\r\n        mode.toDisplayFeatures(state, geojson, push);\r\n      }\r\n    };\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}