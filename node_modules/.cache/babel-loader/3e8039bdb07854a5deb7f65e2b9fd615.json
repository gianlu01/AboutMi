{"ast":null,"code":"const Constants = require('../constants');\n\nconst featuresAt = require('../lib/features_at');\n\nconst Point = require('../feature_types/point');\n\nconst LineString = require('../feature_types/line_string');\n\nconst Polygon = require('../feature_types/polygon');\n\nconst MultiFeature = require('../feature_types/multi_feature');\n\nconst ModeInterface = module.exports = function (ctx) {\n  this.map = ctx.map;\n  this.drawConfig = JSON.parse(JSON.stringify(ctx.options || {}));\n  this._ctx = ctx;\n};\n/**\n * Sets Draw's interal selected state\n * @name this.setSelected\n * @param {DrawFeature[]} - whats selected as a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js)\n */\n\n\nModeInterface.prototype.setSelected = function (features) {\n  return this._ctx.store.setSelected(features);\n};\n/**\n * Sets Draw's internal selected coordinate state\n * @name this.setSelectedCoordinates\n * @param {Object[]} coords - a array of {coord_path: 'string', featureId: 'string'}\n */\n\n\nModeInterface.prototype.setSelectedCoordinates = function (coords) {\n  this._ctx.store.setSelectedCoordinates(coords);\n\n  coords.reduce((m, c) => {\n    if (m[c.feature_id] === undefined) {\n      m[c.feature_id] = true;\n\n      this._ctx.store.get(c.feature_id).changed();\n    }\n\n    return m;\n  }, {});\n};\n/**\n * Get all selected features as a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js)\n * @name this.getSelected\n * @returns {DrawFeature[]}\n */\n\n\nModeInterface.prototype.getSelected = function () {\n  return this._ctx.store.getSelected();\n};\n/**\n * Get the ids of all currently selected features\n * @name this.getSelectedIds\n * @returns {String[]}\n */\n\n\nModeInterface.prototype.getSelectedIds = function () {\n  return this._ctx.store.getSelectedIds();\n};\n/**\n * Check if a feature is selected\n * @name this.isSelected\n * @param {String} id - a feature id\n * @returns {Boolean}\n */\n\n\nModeInterface.prototype.isSelected = function (id) {\n  return this._ctx.store.isSelected(id);\n};\n/**\n * Get a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js) by its id\n * @name this.getFeature\n * @param {String} id - a feature id\n * @returns {DrawFeature}\n */\n\n\nModeInterface.prototype.getFeature = function (id) {\n  return this._ctx.store.get(id);\n};\n/**\n * Add a feature to draw's internal selected state\n * @name this.select\n * @param {String} id\n */\n\n\nModeInterface.prototype.select = function (id) {\n  return this._ctx.store.select(id);\n};\n/**\n * Remove a feature from draw's internal selected state\n * @name this.delete\n * @param {String} id\n */\n\n\nModeInterface.prototype.deselect = function (id) {\n  return this._ctx.store.deselect(id);\n};\n/**\n * Delete a feature from draw\n * @name this.deleteFeature\n * @param {String} id - a feature id\n */\n\n\nModeInterface.prototype.deleteFeature = function (id, opts = {}) {\n  return this._ctx.store.delete(id, opts);\n};\n/**\n * Add a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js) to draw.\n * See `this.newFeature` for converting geojson into a DrawFeature\n * @name this.addFeature\n * @param {DrawFeature} feature - the feature to add\n */\n\n\nModeInterface.prototype.addFeature = function (feature) {\n  return this._ctx.store.add(feature);\n};\n/**\n * Clear all selected features\n */\n\n\nModeInterface.prototype.clearSelectedFeatures = function () {\n  return this._ctx.store.clearSelected();\n};\n/**\n * Clear all selected coordinates\n */\n\n\nModeInterface.prototype.clearSelectedCoordinates = function () {\n  return this._ctx.store.clearSelectedCoordinates();\n};\n/**\n * Indicate if the different action are currently possible with your mode\n * See [draw.actionalbe](https://github.com/mapbox/mapbox-gl-draw/blob/master/API.md#drawactionable) for a list of possible actions. All undefined actions are set to **false** by default\n * @name this.setActionableState\n * @param {Object} actions\n */\n\n\nModeInterface.prototype.setActionableState = function (actions = {}) {\n  const newSet = {\n    trash: actions.trash || false,\n    combineFeatures: actions.combineFeatures || false,\n    uncombineFeatures: actions.uncombineFeatures || false\n  };\n  return this._ctx.events.actionable(newSet);\n};\n/**\n * Trigger a mode change\n * @name this.changeMode\n * @param {String} mode - the mode to transition into\n * @param {Object} opts - the options object to pass to the new mode\n * @param {Object} eventOpts - used to control what kind of events are emitted.\n */\n\n\nModeInterface.prototype.changeMode = function (mode, opts = {}, eventOpts = {}) {\n  return this._ctx.events.changeMode(mode, opts, eventOpts);\n};\n/**\n * Update the state of draw map classes\n * @name this.updateUIClasses\n * @param {Object} opts\n */\n\n\nModeInterface.prototype.updateUIClasses = function (opts) {\n  return this._ctx.ui.queueMapClasses(opts);\n};\n/**\n * If a name is provided it makes that button active, else if makes all buttons inactive\n * @name this.activateUIButton\n * @param {String?} name - name of the button to make active, leave as undefined to set buttons to be inactive\n */\n\n\nModeInterface.prototype.activateUIButton = function (name) {\n  return this._ctx.ui.setActiveButton(name);\n};\n/**\n * Get the features at the location of an event object or in a bbox\n * @name this.featuresAt\n * @param {Event||NULL} event - a mapbox-gl event object\n * @param {BBOX||NULL} bbox - the area to get features from\n * @param {String} bufferType - is this `click` or `tap` event, defaults to click\n */\n\n\nModeInterface.prototype.featuresAt = function (event, bbox, bufferType = 'click') {\n  if (bufferType !== 'click' && bufferType !== 'touch') throw new Error('invalid buffer type');\n  return featuresAt[bufferType](event, bbox, this._ctx);\n};\n/**\n * Create a new [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js) from geojson\n * @name this.newFeature\n * @param {GeoJSONFeature} geojson\n * @returns {DrawFeature}\n */\n\n\nModeInterface.prototype.newFeature = function (geojson) {\n  const type = geojson.geometry.type;\n  if (type === Constants.geojsonTypes.POINT) return new Point(this._ctx, geojson);\n  if (type === Constants.geojsonTypes.LINE_STRING) return new LineString(this._ctx, geojson);\n  if (type === Constants.geojsonTypes.POLYGON) return new Polygon(this._ctx, geojson);\n  return new MultiFeature(this._ctx, geojson);\n};\n/**\n * Check is an object is an instance of a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js)\n * @name this.isInstanceOf\n * @param {String} type - `Point`, `LineString`, `Polygon`, `MultiFeature`\n * @param {Object} feature - the object that needs to be checked\n * @returns {Boolean}\n */\n\n\nModeInterface.prototype.isInstanceOf = function (type, feature) {\n  if (type === Constants.geojsonTypes.POINT) return feature instanceof Point;\n  if (type === Constants.geojsonTypes.LINE_STRING) return feature instanceof LineString;\n  if (type === Constants.geojsonTypes.POLYGON) return feature instanceof Polygon;\n  if (type === 'MultiFeature') return feature instanceof MultiFeature;\n  throw new Error(`Unknown feature class: ${type}`);\n};\n/**\n * Force draw to rerender the feature of the provided id\n * @name this.doRender\n * @param {String} id - a feature id\n */\n\n\nModeInterface.prototype.doRender = function (id) {\n  return this._ctx.store.featureChanged(id);\n};","map":{"version":3,"sources":["C:/Users/Gianluca/Documents/Scuola/Informatica/AboutMi/Sito/AboutMi/node_modules/@mapbox/mapbox-gl-draw/src/modes/mode_interface_accessors.js"],"names":["Constants","require","featuresAt","Point","LineString","Polygon","MultiFeature","ModeInterface","module","exports","ctx","map","drawConfig","JSON","parse","stringify","options","_ctx","prototype","setSelected","features","store","setSelectedCoordinates","coords","reduce","m","c","feature_id","undefined","get","changed","getSelected","getSelectedIds","isSelected","id","getFeature","select","deselect","deleteFeature","opts","delete","addFeature","feature","add","clearSelectedFeatures","clearSelected","clearSelectedCoordinates","setActionableState","actions","newSet","trash","combineFeatures","uncombineFeatures","events","actionable","changeMode","mode","eventOpts","updateUIClasses","ui","queueMapClasses","activateUIButton","name","setActiveButton","event","bbox","bufferType","Error","newFeature","geojson","type","geometry","geojsonTypes","POINT","LINE_STRING","POLYGON","isInstanceOf","doRender","featureChanged"],"mappings":"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","sourcesContent":["const Constants = require('../constants');\nconst featuresAt = require('../lib/features_at');\nconst Point = require('../feature_types/point');\nconst LineString = require('../feature_types/line_string');\nconst Polygon = require('../feature_types/polygon');\nconst MultiFeature = require('../feature_types/multi_feature');\n\nconst ModeInterface = module.exports = function(ctx) {\n  this.map = ctx.map;\n  this.drawConfig = JSON.parse(JSON.stringify(ctx.options || {}));\n  this._ctx = ctx;\n};\n\n/**\n * Sets Draw's interal selected state\n * @name this.setSelected\n * @param {DrawFeature[]} - whats selected as a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js)\n */\nModeInterface.prototype.setSelected = function(features) {\n  return this._ctx.store.setSelected(features);\n};\n\n/**\n * Sets Draw's internal selected coordinate state\n * @name this.setSelectedCoordinates\n * @param {Object[]} coords - a array of {coord_path: 'string', featureId: 'string'}\n */\nModeInterface.prototype.setSelectedCoordinates = function(coords) {\n  this._ctx.store.setSelectedCoordinates(coords);\n  coords.reduce((m, c) => {\n    if (m[c.feature_id] === undefined) {\n      m[c.feature_id] = true;\n      this._ctx.store.get(c.feature_id).changed();\n    }\n    return m;\n  }, {});\n};\n\n/**\n * Get all selected features as a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js)\n * @name this.getSelected\n * @returns {DrawFeature[]}\n */\nModeInterface.prototype.getSelected = function() {\n  return this._ctx.store.getSelected();\n};\n\n/**\n * Get the ids of all currently selected features\n * @name this.getSelectedIds\n * @returns {String[]}\n */\nModeInterface.prototype.getSelectedIds = function() {\n  return this._ctx.store.getSelectedIds();\n};\n\n/**\n * Check if a feature is selected\n * @name this.isSelected\n * @param {String} id - a feature id\n * @returns {Boolean}\n */\nModeInterface.prototype.isSelected = function(id) {\n  return this._ctx.store.isSelected(id);\n};\n\n/**\n * Get a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js) by its id\n * @name this.getFeature\n * @param {String} id - a feature id\n * @returns {DrawFeature}\n */\nModeInterface.prototype.getFeature = function(id) {\n  return this._ctx.store.get(id);\n};\n\n/**\n * Add a feature to draw's internal selected state\n * @name this.select\n * @param {String} id\n */\nModeInterface.prototype.select = function(id) {\n  return this._ctx.store.select(id);\n};\n\n/**\n * Remove a feature from draw's internal selected state\n * @name this.delete\n * @param {String} id\n */\nModeInterface.prototype.deselect = function(id) {\n  return this._ctx.store.deselect(id);\n};\n\n/**\n * Delete a feature from draw\n * @name this.deleteFeature\n * @param {String} id - a feature id\n */\nModeInterface.prototype.deleteFeature = function(id, opts = {}) {\n  return this._ctx.store.delete(id, opts);\n};\n\n/**\n * Add a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js) to draw.\n * See `this.newFeature` for converting geojson into a DrawFeature\n * @name this.addFeature\n * @param {DrawFeature} feature - the feature to add\n */\nModeInterface.prototype.addFeature = function(feature) {\n  return this._ctx.store.add(feature);\n};\n\n/**\n * Clear all selected features\n */\nModeInterface.prototype.clearSelectedFeatures = function() {\n  return this._ctx.store.clearSelected();\n};\n\n/**\n * Clear all selected coordinates\n */\nModeInterface.prototype.clearSelectedCoordinates = function() {\n  return this._ctx.store.clearSelectedCoordinates();\n};\n\n/**\n * Indicate if the different action are currently possible with your mode\n * See [draw.actionalbe](https://github.com/mapbox/mapbox-gl-draw/blob/master/API.md#drawactionable) for a list of possible actions. All undefined actions are set to **false** by default\n * @name this.setActionableState\n * @param {Object} actions\n */\nModeInterface.prototype.setActionableState = function(actions = {}) {\n  const newSet = {\n    trash: actions.trash || false,\n    combineFeatures: actions.combineFeatures || false,\n    uncombineFeatures: actions.uncombineFeatures || false\n  };\n  return this._ctx.events.actionable(newSet);\n};\n\n/**\n * Trigger a mode change\n * @name this.changeMode\n * @param {String} mode - the mode to transition into\n * @param {Object} opts - the options object to pass to the new mode\n * @param {Object} eventOpts - used to control what kind of events are emitted.\n */\nModeInterface.prototype.changeMode = function(mode, opts = {}, eventOpts = {}) {\n  return this._ctx.events.changeMode(mode, opts, eventOpts);\n};\n\n/**\n * Update the state of draw map classes\n * @name this.updateUIClasses\n * @param {Object} opts\n */\nModeInterface.prototype.updateUIClasses = function(opts) {\n  return this._ctx.ui.queueMapClasses(opts);\n};\n\n/**\n * If a name is provided it makes that button active, else if makes all buttons inactive\n * @name this.activateUIButton\n * @param {String?} name - name of the button to make active, leave as undefined to set buttons to be inactive\n */\nModeInterface.prototype.activateUIButton = function(name) {\n  return this._ctx.ui.setActiveButton(name);\n};\n\n/**\n * Get the features at the location of an event object or in a bbox\n * @name this.featuresAt\n * @param {Event||NULL} event - a mapbox-gl event object\n * @param {BBOX||NULL} bbox - the area to get features from\n * @param {String} bufferType - is this `click` or `tap` event, defaults to click\n */\nModeInterface.prototype.featuresAt = function(event, bbox, bufferType = 'click') {\n  if (bufferType !== 'click' && bufferType !== 'touch') throw new Error('invalid buffer type');\n  return featuresAt[bufferType](event, bbox, this._ctx);\n};\n\n/**\n * Create a new [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js) from geojson\n * @name this.newFeature\n * @param {GeoJSONFeature} geojson\n * @returns {DrawFeature}\n */\nModeInterface.prototype.newFeature = function(geojson) {\n  const type = geojson.geometry.type;\n  if (type === Constants.geojsonTypes.POINT) return new Point(this._ctx, geojson);\n  if (type === Constants.geojsonTypes.LINE_STRING) return new LineString(this._ctx, geojson);\n  if (type === Constants.geojsonTypes.POLYGON) return new Polygon(this._ctx, geojson);\n  return new MultiFeature(this._ctx, geojson);\n};\n\n/**\n * Check is an object is an instance of a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/master/src/feature_types/feature.js)\n * @name this.isInstanceOf\n * @param {String} type - `Point`, `LineString`, `Polygon`, `MultiFeature`\n * @param {Object} feature - the object that needs to be checked\n * @returns {Boolean}\n */\nModeInterface.prototype.isInstanceOf = function(type, feature) {\n  if (type === Constants.geojsonTypes.POINT) return feature instanceof Point;\n  if (type === Constants.geojsonTypes.LINE_STRING) return feature instanceof LineString;\n  if (type === Constants.geojsonTypes.POLYGON) return feature instanceof Polygon;\n  if (type === 'MultiFeature') return feature instanceof MultiFeature;\n  throw new Error(`Unknown feature class: ${type}`);\n};\n\n/**\n * Force draw to rerender the feature of the provided id\n * @name this.doRender\n * @param {String} id - a feature id\n */\nModeInterface.prototype.doRender = function(id) {\n  return this._ctx.store.featureChanged(id);\n};\n\n"]},"metadata":{},"sourceType":"script"}