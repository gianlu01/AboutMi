{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/source/Tile\r\n */\n\n\nimport { abstract } from '../util.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport Event from '../events/Event.js';\nimport { equivalent } from '../proj.js';\nimport { toSize, scale as scaleSize } from '../size.js';\nimport Source from './Source.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { wrapX, getForProjection as getTileGridForProjection } from '../tilegrid.js';\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize]\r\n * @property {boolean} [opaque]\r\n * @property {number} [tilePixelRatio]\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\r\n * @property {import(\"./State.js\").default} [state]\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\r\n * @property {boolean} [wrapX=true]\r\n * @property {number} [transition]\r\n * @property {string} [key]\r\n * @property {number} [zDirection=0]\r\n */\n\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for sources providing images divided into a tile grid.\r\n * @abstract\r\n * @api\r\n */\n\nvar TileSource =\n/** @class */\nfunction (_super) {\n  __extends(TileSource, _super);\n  /**\r\n   * @param {Options} options SourceTile source options.\r\n   */\n\n\n  function TileSource(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX\n    }) || this;\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n\n\n    _this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    _this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n    /**\r\n     * @protected\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */\n\n    _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n    var cacheSize = options.cacheSize;\n\n    if (cacheSize === undefined) {\n      var tileSize = [256, 256];\n      var tileGrid = options.tileGrid;\n\n      if (tileGrid) {\n        toSize(tileGrid.getTileSize(tileGrid.getMinZoom()), tileSize);\n      }\n\n      var canUseScreen = typeof screen !== 'undefined';\n      var width = canUseScreen ? screen.availWidth || screen.width : 1920;\n      var height = canUseScreen ? screen.availHeight || screen.height : 1080;\n      cacheSize = 4 * Math.ceil(width / tileSize[0]) * Math.ceil(height / tileSize[1]);\n    }\n    /**\r\n     * @protected\r\n     * @type {import(\"../TileCache.js\").default}\r\n     */\n\n\n    _this.tileCache = new TileCache(cacheSize);\n    /**\r\n     * @protected\r\n     * @type {import(\"../size.js\").Size}\r\n     */\n\n    _this.tmpSize = [0, 0];\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\n\n    _this.key_ = options.key || '';\n    /**\r\n     * @protected\r\n     * @type {import(\"../Tile.js\").Options}\r\n     */\n\n    _this.tileOptions = {\n      transition: options.transition\n    };\n    /**\r\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\r\n     * by a renderer if the views resolution does not match any resolution of the tile source.\r\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n     * will be used. If -1, the nearest higher resolution will be used.\r\n     * @type {number}\r\n     */\n\n    _this.zDirection = options.zDirection ? options.zDirection : 0;\n    return _this;\n  }\n  /**\r\n   * @return {boolean} Can expire cache.\r\n   */\n\n\n  TileSource.prototype.canExpireCache = function () {\n    return this.tileCache.canExpireCache();\n  };\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {!Object<string, import(\"../TileRange.js\").default>} usedTiles Used tiles.\r\n   */\n\n\n  TileSource.prototype.expireCache = function (projection, usedTiles) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  };\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {number} z Zoom level.\r\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\r\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\r\n   *     loaded tile.  If the callback returns `false`, the tile will not be\r\n   *     considered loaded.\r\n   * @return {boolean} The tile range is fully covered with loaded tiles.\r\n   */\n\n\n  TileSource.prototype.forEachLoadedTile = function (projection, z, tileRange, callback) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (!tileCache) {\n      return false;\n    }\n\n    var covered = true;\n    var tile, tileCoordKey, loaded;\n\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile =\n          /** @type {!import(\"../Tile.js\").default} */\n          tileCache.get(tileCoordKey);\n          loaded = tile.getState() === TileState.LOADED;\n\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n\n    return covered;\n  };\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {number} Gutter.\r\n   */\n\n\n  TileSource.prototype.getGutterForProjection = function (projection) {\n    return 0;\n  };\n  /**\r\n   * Return the key to be used for all tiles in the source.\r\n   * @return {string} The key for all tiles.\r\n   * @protected\r\n   */\n\n\n  TileSource.prototype.getKey = function () {\n    return this.key_;\n  };\n  /**\r\n   * Set the value to be used as the key for all tiles in the source.\r\n   * @param {string} key The key for tiles.\r\n   * @protected\r\n   */\n\n\n  TileSource.prototype.setKey = function (key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  };\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {boolean} Opaque.\r\n   */\n\n\n  TileSource.prototype.getOpaque = function (projection) {\n    return this.opaque_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  TileSource.prototype.getResolutions = function () {\n    return this.tileGrid.getResolutions();\n  };\n  /**\r\n   * @abstract\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../Tile.js\").default} Tile.\r\n   */\n\n\n  TileSource.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    return abstract();\n  };\n  /**\r\n   * Return the tile grid of the tile source.\r\n   * @return {import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   * @api\r\n   */\n\n\n  TileSource.prototype.getTileGrid = function () {\n    return this.tileGrid;\n  };\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   */\n\n\n  TileSource.prototype.getTileGridForProjection = function (projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  };\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../TileCache.js\").default} Tile cache.\r\n   * @protected\r\n   */\n\n\n  TileSource.prototype.getTileCacheForProjection = function (projection) {\n    var thisProj = this.getProjection();\n\n    if (thisProj && !equivalent(thisProj, projection)) {\n      return null;\n    } else {\n      return this.tileCache;\n    }\n  };\n  /**\r\n   * Get the tile pixel ratio for this source. Subclasses may override this\r\n   * method, which is meant to return a supported pixel ratio that matches the\r\n   * provided `pixelRatio` as close as possible.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Tile pixel ratio.\r\n   */\n\n\n  TileSource.prototype.getTilePixelRatio = function (pixelRatio) {\n    return this.tilePixelRatio_;\n  };\n  /**\r\n   * @param {number} z Z.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../size.js\").Size} Tile size.\r\n   */\n\n\n  TileSource.prototype.getTilePixelSize = function (z, pixelRatio, projection) {\n    var tileGrid = this.getTileGridForProjection(projection);\n    var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  };\n  /**\r\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\r\n   * is outside the resolution and extent range of the tile grid, `null` will be\r\n   * returned.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\r\n   *     null if no tile URL should be created for the passed `tileCoord`.\r\n   */\n\n\n  TileSource.prototype.getTileCoordForTileUrlFunction = function (tileCoord, opt_projection) {\n    var projection = opt_projection !== undefined ? opt_projection : this.getProjection();\n    var tileGrid = this.getTileGridForProjection(projection);\n\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  };\n  /**\r\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\r\n   * @api\r\n   */\n\n\n  TileSource.prototype.clear = function () {\n    this.tileCache.clear();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  TileSource.prototype.refresh = function () {\n    this.clear();\n\n    _super.prototype.refresh.call(this);\n  };\n  /**\r\n   * Marks a tile coord as being used, without triggering a load.\r\n   * @abstract\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\n\n\n  TileSource.prototype.useTile = function (z, x, y, projection) {};\n\n  return TileSource;\n}(Source);\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\r\n * type.\r\n */\n\n\nvar TileSourceEvent =\n/** @class */\nfunction (_super) {\n  __extends(TileSourceEvent, _super);\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../Tile.js\").default} tile The tile.\r\n   */\n\n\n  function TileSourceEvent(type, tile) {\n    var _this = _super.call(this, type) || this;\n    /**\r\n     * The tile related to the event.\r\n     * @type {import(\"../Tile.js\").default}\r\n     * @api\r\n     */\n\n\n    _this.tile = tile;\n    return _this;\n  }\n\n  return TileSourceEvent;\n}(Event);\n\nexport { TileSourceEvent };\nexport default TileSource;","map":null,"metadata":{},"sourceType":"module"}