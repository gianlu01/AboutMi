{"ast":null,"code":"var CommonSelectors = require('../lib/common_selectors');\n\nvar doubleClickZoom = require('../lib/double_click_zoom');\n\nvar Constants = require('../constants');\n\nvar isEventAtCoordinates = require('../lib/is_event_at_coordinates');\n\nvar createVertex = require('../lib/create_vertex');\n\nvar DrawPolygon = {};\n\nDrawPolygon.onSetup = function () {\n  var polygon = this.newFeature({\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.POLYGON,\n      coordinates: [[]]\n    }\n  });\n  this.addFeature(polygon);\n  this.clearSelectedFeatures();\n  doubleClickZoom.disable(this);\n  this.updateUIClasses({\n    mouse: Constants.cursors.ADD\n  });\n  this.activateUIButton(Constants.types.POLYGON);\n  this.setActionableState({\n    trash: true\n  });\n  return {\n    polygon: polygon,\n    currentVertexPosition: 0\n  };\n};\n\nDrawPolygon.clickAnywhere = function (state, e) {\n  if (state.currentVertexPosition > 0 && isEventAtCoordinates(e, state.polygon.coordinates[0][state.currentVertexPosition - 1])) {\n    return this.changeMode(Constants.modes.SIMPLE_SELECT, {\n      featureIds: [state.polygon.id]\n    });\n  }\n\n  this.updateUIClasses({\n    mouse: Constants.cursors.ADD\n  });\n  state.polygon.updateCoordinate(\"0.\".concat(state.currentVertexPosition), e.lngLat.lng, e.lngLat.lat);\n  state.currentVertexPosition++;\n  state.polygon.updateCoordinate(\"0.\".concat(state.currentVertexPosition), e.lngLat.lng, e.lngLat.lat);\n};\n\nDrawPolygon.clickOnVertex = function (state) {\n  return this.changeMode(Constants.modes.SIMPLE_SELECT, {\n    featureIds: [state.polygon.id]\n  });\n};\n\nDrawPolygon.onMouseMove = function (state, e) {\n  state.polygon.updateCoordinate(\"0.\".concat(state.currentVertexPosition), e.lngLat.lng, e.lngLat.lat);\n\n  if (CommonSelectors.isVertex(e)) {\n    this.updateUIClasses({\n      mouse: Constants.cursors.POINTER\n    });\n  }\n};\n\nDrawPolygon.onTap = DrawPolygon.onClick = function (state, e) {\n  if (CommonSelectors.isVertex(e)) return this.clickOnVertex(state, e);\n  return this.clickAnywhere(state, e);\n};\n\nDrawPolygon.onKeyUp = function (state, e) {\n  if (CommonSelectors.isEscapeKey(e)) {\n    this.deleteFeature([state.polygon.id], {\n      silent: true\n    });\n    this.changeMode(Constants.modes.SIMPLE_SELECT);\n  } else if (CommonSelectors.isEnterKey(e)) {\n    this.changeMode(Constants.modes.SIMPLE_SELECT, {\n      featureIds: [state.polygon.id]\n    });\n  }\n};\n\nDrawPolygon.onStop = function (state) {\n  this.updateUIClasses({\n    mouse: Constants.cursors.NONE\n  });\n  doubleClickZoom.enable(this);\n  this.activateUIButton(); // check to see if we've deleted this feature\n\n  if (this.getFeature(state.polygon.id) === undefined) return; //remove last added coordinate\n\n  state.polygon.removeCoordinate(\"0.\".concat(state.currentVertexPosition));\n\n  if (state.polygon.isValid()) {\n    this.map.fire(Constants.events.CREATE, {\n      features: [state.polygon.toGeoJSON()]\n    });\n  } else {\n    this.deleteFeature([state.polygon.id], {\n      silent: true\n    });\n    this.changeMode(Constants.modes.SIMPLE_SELECT, {}, {\n      silent: true\n    });\n  }\n};\n\nDrawPolygon.toDisplayFeatures = function (state, geojson, display) {\n  var isActivePolygon = geojson.properties.id === state.polygon.id;\n  geojson.properties.active = isActivePolygon ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  if (!isActivePolygon) return display(geojson); // Don't render a polygon until it has two positions\n  // (and a 3rd which is just the first repeated)\n\n  if (geojson.geometry.coordinates.length === 0) return;\n  var coordinateCount = geojson.geometry.coordinates[0].length; // 2 coordinates after selecting a draw type\n  // 3 after creating the first point\n\n  if (coordinateCount < 3) {\n    return;\n  }\n\n  geojson.properties.meta = Constants.meta.FEATURE;\n  display(createVertex(state.polygon.id, geojson.geometry.coordinates[0][0], '0.0', false));\n\n  if (coordinateCount > 3) {\n    // Add a start position marker to the map, clicking on this will finish the feature\n    // This should only be shown when we're in a valid spot\n    var endPos = geojson.geometry.coordinates[0].length - 3;\n    display(createVertex(state.polygon.id, geojson.geometry.coordinates[0][endPos], \"0.\".concat(endPos), false));\n  }\n\n  if (coordinateCount <= 4) {\n    // If we've only drawn two positions (plus the closer),\n    // make a LineString instead of a Polygon\n    var lineCoordinates = [[geojson.geometry.coordinates[0][0][0], geojson.geometry.coordinates[0][0][1]], [geojson.geometry.coordinates[0][1][0], geojson.geometry.coordinates[0][1][1]]]; // create an initial vertex so that we can track the first point on mobile devices\n\n    display({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: geojson.properties,\n      geometry: {\n        coordinates: lineCoordinates,\n        type: Constants.geojsonTypes.LINE_STRING\n      }\n    });\n\n    if (coordinateCount === 3) {\n      return;\n    }\n  } // render the Polygon\n\n\n  return display(geojson);\n};\n\nDrawPolygon.onTrash = function (state) {\n  this.deleteFeature([state.polygon.id], {\n    silent: true\n  });\n  this.changeMode(Constants.modes.SIMPLE_SELECT);\n};\n\nmodule.exports = DrawPolygon;","map":null,"metadata":{},"sourceType":"script"}