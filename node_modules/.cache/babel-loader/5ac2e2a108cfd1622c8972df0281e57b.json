{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SnappableMode = void 0;\n\nvar _utils = require(\"../utils.js\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode.js\");\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar SnappableMode =\n/*#__PURE__*/\nfunction (_BaseGeoJsonEditMode) {\n  _inherits(SnappableMode, _BaseGeoJsonEditMode);\n\n  function SnappableMode(handler) {\n    var _this;\n\n    _classCallCheck(this, SnappableMode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SnappableMode).call(this));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_handler\", void 0);\n\n    _this._handler = handler;\n    return _this;\n  }\n\n  _createClass(SnappableMode, [{\n    key: \"_getSnappedMouseEvent\",\n    value: function _getSnappedMouseEvent(event, snapSource, snapTarget) {\n      return Object.assign(event, {\n        mapCoords: snapTarget.geometry.coordinates,\n        pointerDownMapCoords: snapSource && snapSource.geometry.coordinates\n      });\n    }\n  }, {\n    key: \"_getPickedSnapTarget\",\n    value: function _getPickedSnapTarget(picks) {\n      return (0, _utils.getPickedEditHandles)(picks).find(function (handle) {\n        return handle.properties.editHandleType === 'snap-target';\n      });\n    }\n  }, {\n    key: \"_getPickedSnapSource\",\n    value: function _getPickedSnapSource(pointerDownPicks) {\n      return (0, _utils.getPickedEditHandle)(pointerDownPicks);\n    }\n  }, {\n    key: \"_getUpdatedSnapSourceHandle\",\n    value: function _getUpdatedSnapSourceHandle(snapSourceHandle, data) {\n      var _snapSourceHandle$pro = snapSourceHandle.properties,\n          featureIndex = _snapSourceHandle$pro.featureIndex,\n          positionIndexes = _snapSourceHandle$pro.positionIndexes;\n      var snapSourceFeature = data.features[featureIndex]; // $FlowFixMe\n\n      var snapSourceCoordinates = positionIndexes.reduce(function (a, b) {\n        return a[b];\n      }, snapSourceFeature.geometry.coordinates);\n      return _objectSpread({}, snapSourceHandle, {\n        geometry: {\n          type: 'Point',\n          coordinates: snapSourceCoordinates\n        }\n      });\n    } // If additionalSnapTargets is present in modeConfig and is populated, this\n    // method will return those features along with the features\n    // that live in the current layer. Otherwise, this method will simply return the\n    // features from the current layer\n\n  }, {\n    key: \"_getSnapTargets\",\n    value: function _getSnapTargets(props) {\n      var _ref = props.modeConfig || {},\n          additionalSnapTargets = _ref.additionalSnapTargets;\n\n      additionalSnapTargets = additionalSnapTargets || [];\n\n      var features = _toConsumableArray(props.data.features).concat(_toConsumableArray(additionalSnapTargets));\n\n      return features;\n    }\n  }, {\n    key: \"_getSnapTargetHandles\",\n    value: function _getSnapTargetHandles(props) {\n      var handles = [];\n\n      var features = this._getSnapTargets(props);\n\n      for (var i = 0; i < features.length; i++) {\n        // Filter out the currently selected feature(s)\n        var isCurrentIndexFeatureNotSelected = !props.selectedIndexes.includes(i);\n\n        if (isCurrentIndexFeatureNotSelected) {\n          var geometry = features[i].geometry;\n          handles.push.apply(handles, _toConsumableArray((0, _utils.getEditHandlesForGeometry)(geometry, i, 'snap-target')));\n        }\n      }\n\n      return handles;\n    } // If no snap handle has been picked, only display the edit handles of the\n    // selected feature. If a snap handle has been picked, display said snap handle\n    // along with all snappable points on all non-selected features.\n\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var modeConfig = props.modeConfig,\n          lastPointerMoveEvent = props.lastPointerMoveEvent;\n\n      var _ref2 = modeConfig || {},\n          enableSnapping = _ref2.enableSnapping;\n\n      var guides = {\n        type: 'FeatureCollection',\n        features: _toConsumableArray(this._handler.getGuides(props).features)\n      };\n\n      if (!enableSnapping) {\n        return guides;\n      }\n\n      var snapSourceHandle = lastPointerMoveEvent && this._getPickedSnapSource(lastPointerMoveEvent.pointerDownPicks); // They started dragging a handle\n      // So render the picked handle (in its updated location) and all possible snap targets\n\n\n      if (snapSourceHandle) {\n        var _guides$features;\n\n        (_guides$features = guides.features).push.apply(_guides$features, _toConsumableArray(this._getSnapTargetHandles(props)).concat([this._getUpdatedSnapSourceHandle(snapSourceHandle, props.data)]));\n\n        return guides;\n      } // Render the possible snap source handles\n\n\n      var features = props.data.features;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = props.selectedIndexes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var index = _step.value;\n\n          if (index < features.length) {\n            var _guides$features2;\n\n            var geometry = features[index].geometry;\n\n            (_guides$features2 = guides.features).push.apply(_guides$features2, _toConsumableArray((0, _utils.getEditHandlesForGeometry)(geometry, index, 'snap-source')));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return guides;\n    }\n  }, {\n    key: \"_getSnapAwareEvent\",\n    value: function _getSnapAwareEvent(event, props) {\n      var snapSource = this._getPickedSnapSource(props.lastPointerMoveEvent.pointerDownPicks);\n\n      var snapTarget = this._getPickedSnapTarget(event.picks);\n\n      return snapSource && snapTarget ? this._getSnappedMouseEvent(event, snapSource, snapTarget) : event;\n    }\n  }, {\n    key: \"handleStartDragging\",\n    value: function handleStartDragging(event, props) {\n      this._handler.handleStartDragging(event, props);\n    }\n  }, {\n    key: \"handleStopDragging\",\n    value: function handleStopDragging(event, props) {\n      this._handler.handleStopDragging(this._getSnapAwareEvent(event, props), props);\n    }\n  }, {\n    key: \"handleDragging\",\n    value: function handleDragging(event, props) {\n      this._handler.handleDragging(this._getSnapAwareEvent(event, props), props);\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      this._handler.handlePointerMove(this._getSnapAwareEvent(event, props), props);\n    }\n  }]);\n\n  return SnappableMode;\n}(_geojsonEditMode.BaseGeoJsonEditMode);\n\nexports.SnappableMode = SnappableMode;","map":null,"metadata":{},"sourceType":"script"}