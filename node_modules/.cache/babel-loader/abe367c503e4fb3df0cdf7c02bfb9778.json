{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DrawLineStringMode = void 0;\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode.js\");\n\nvar _immutableFeatureCollection = require(\"./immutable-feature-collection.js\");\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar DrawLineStringMode =\n/*#__PURE__*/\nfunction (_BaseGeoJsonEditMode) {\n  _inherits(DrawLineStringMode, _BaseGeoJsonEditMode);\n\n  function DrawLineStringMode() {\n    _classCallCheck(this, DrawLineStringMode);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DrawLineStringMode).apply(this, arguments));\n  }\n\n  _createClass(DrawLineStringMode, [{\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var selectedFeatureIndexes = props.selectedIndexes;\n      var selectedGeometry = this.getSelectedGeometry(props);\n\n      if (selectedFeatureIndexes.length > 1 || selectedGeometry && selectedGeometry.type !== 'LineString') {\n        console.warn(\"drawLineString mode only supported for single LineString selection\"); // eslint-disable-line\n\n        return;\n      }\n\n      this.addClickSequence(event);\n      var tentativeFeature = this.getTentativeGuide(props);\n      var clickSequence = this.getClickSequence();\n\n      if (selectedGeometry && selectedGeometry.type === 'LineString') {\n        // Extend the LineString\n        var lineString = selectedGeometry;\n        var positionIndexes = [lineString.coordinates.length];\n        var modeConfig = props.modeConfig;\n\n        if (modeConfig && modeConfig.drawAtFront) {\n          positionIndexes = [0];\n        }\n\n        var featureIndex = selectedFeatureIndexes[0];\n        var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).addPosition(featureIndex, positionIndexes, event.mapCoords).getObject();\n        props.onEdit({\n          updatedData: updatedData,\n          editType: 'addPosition',\n          editContext: {\n            featureIndexes: [featureIndex],\n            positionIndexes: positionIndexes,\n            position: event.mapCoords\n          }\n        });\n        this.resetClickSequence();\n      } else if (clickSequence.length === 2 && tentativeFeature) {\n        // Add a new LineString\n        var geometry = tentativeFeature.geometry;\n        props.onEdit(this.getAddFeatureAction(geometry, props.data));\n        this.resetClickSequence();\n      }\n    }\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n      var clickSequence = this.getClickSequence();\n      var mapCoords = props.lastPointerMoveEvent && props.lastPointerMoveEvent.mapCoords;\n      var startPosition = null;\n      var selectedFeatureIndexes = props.selectedIndexes;\n      var selectedGeometry = this.getSelectedGeometry(props);\n\n      if (selectedFeatureIndexes.length > 1 || selectedGeometry && selectedGeometry.type !== 'LineString') {\n        // unsupported\n        return guides;\n      }\n\n      if (selectedGeometry && selectedGeometry.type === 'LineString') {\n        // Draw an extension line starting from one end of the selected LineString\n        startPosition = selectedGeometry.coordinates[selectedGeometry.coordinates.length - 1];\n        var modeConfig = props.modeConfig;\n\n        if (modeConfig && modeConfig.drawAtFront) {\n          startPosition = selectedGeometry.coordinates[0];\n        }\n      } else if (clickSequence.length > 0) {\n        startPosition = clickSequence[0];\n      }\n\n      if (startPosition) {\n        guides.features.push({\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [startPosition, mapCoords]\n          }\n        });\n      }\n\n      return guides;\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      props.onUpdateCursor('cell');\n    }\n  }]);\n\n  return DrawLineStringMode;\n}(_geojsonEditMode.BaseGeoJsonEditMode);\n\nexports.DrawLineStringMode = DrawLineStringMode;","map":null,"metadata":{},"sourceType":"script"}