{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/Collection\r\n */\n\n\nimport AssertionError from './AssertionError.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport BaseObject from './Object.js';\nimport Event from './events/Event.js';\n/**\r\n * @enum {string}\r\n * @private\r\n */\n\nvar Property = {\n  LENGTH: 'length'\n};\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\r\n * type.\r\n */\n\nvar CollectionEvent =\n/** @class */\nfunction (_super) {\n  __extends(CollectionEvent, _super);\n  /**\r\n   * @param {CollectionEventType} type Type.\r\n   * @param {*=} opt_element Element.\r\n   * @param {number} opt_index The index of the added or removed element.\r\n   */\n\n\n  function CollectionEvent(type, opt_element, opt_index) {\n    var _this = _super.call(this, type) || this;\n    /**\r\n     * The element that is added to or removed from the collection.\r\n     * @type {*}\r\n     * @api\r\n     */\n\n\n    _this.element = opt_element;\n    /**\r\n     * The index of the added or removed element.\r\n     * @type {number}\r\n     * @api\r\n     */\n\n    _this.index = opt_index;\n    return _this;\n  }\n\n  return CollectionEvent;\n}(Event);\n\nexport { CollectionEvent };\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [unique=false] Disallow the same item from being added to\r\n * the collection twice.\r\n */\n\n/**\r\n * @classdesc\r\n * An expanded version of standard JS Array, adding convenience methods for\r\n * manipulation. Add and remove changes to the Collection trigger a Collection\r\n * event. Note that this does not cover changes to the objects _within_ the\r\n * Collection; they trigger events on the appropriate object, not on the\r\n * Collection as a whole.\r\n *\r\n * @fires CollectionEvent\r\n *\r\n * @template T\r\n * @api\r\n */\n\nvar Collection =\n/** @class */\nfunction (_super) {\n  __extends(Collection, _super);\n  /**\r\n   * @param {Array<T>=} opt_array Array.\r\n   * @param {Options=} opt_options Collection options.\r\n   */\n\n\n  function Collection(opt_array, opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options || {};\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n\n    _this.unique_ = !!options.unique;\n    /**\r\n     * @private\r\n     * @type {!Array<T>}\r\n     */\n\n    _this.array_ = opt_array ? opt_array : [];\n\n    if (_this.unique_) {\n      for (var i = 0, ii = _this.array_.length; i < ii; ++i) {\n        _this.assertUnique_(_this.array_[i], i);\n      }\n    }\n\n    _this.updateLength_();\n\n    return _this;\n  }\n  /**\r\n   * Remove all elements from the collection.\r\n   * @api\r\n   */\n\n\n  Collection.prototype.clear = function () {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  };\n  /**\r\n   * Add elements to the collection.  This pushes each item in the provided array\r\n   * to the end of the collection.\r\n   * @param {!Array<T>} arr Array.\r\n   * @return {Collection<T>} This collection.\r\n   * @api\r\n   */\n\n\n  Collection.prototype.extend = function (arr) {\n    for (var i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n\n    return this;\n  };\n  /**\r\n   * Iterate over each element, calling the provided callback.\r\n   * @param {function(T, number, Array<T>): *} f The function to call\r\n   *     for every element. This function takes 3 arguments (the element, the\r\n   *     index and the array). The return value is ignored.\r\n   * @api\r\n   */\n\n\n  Collection.prototype.forEach = function (f) {\n    var array = this.array_;\n\n    for (var i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  };\n  /**\r\n   * Get a reference to the underlying Array object. Warning: if the array\r\n   * is mutated, no events will be dispatched by the collection, and the\r\n   * collection's \"length\" property won't be in sync with the actual length\r\n   * of the array.\r\n   * @return {!Array<T>} Array.\r\n   * @api\r\n   */\n\n\n  Collection.prototype.getArray = function () {\n    return this.array_;\n  };\n  /**\r\n   * Get the element at the provided index.\r\n   * @param {number} index Index.\r\n   * @return {T} Element.\r\n   * @api\r\n   */\n\n\n  Collection.prototype.item = function (index) {\n    return this.array_[index];\n  };\n  /**\r\n   * Get the length of this collection.\r\n   * @return {number} The length of the array.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Collection.prototype.getLength = function () {\n    return this.get(Property.LENGTH);\n  };\n  /**\r\n   * Insert an element at the provided index.\r\n   * @param {number} index Index.\r\n   * @param {T} elem Element.\r\n   * @api\r\n   */\n\n\n  Collection.prototype.insertAt = function (index, elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));\n  };\n  /**\r\n   * Remove the last element of the collection and return it.\r\n   * Return `undefined` if the collection is empty.\r\n   * @return {T|undefined} Element.\r\n   * @api\r\n   */\n\n\n  Collection.prototype.pop = function () {\n    return this.removeAt(this.getLength() - 1);\n  };\n  /**\r\n   * Insert the provided element at the end of the collection.\r\n   * @param {T} elem Element.\r\n   * @return {number} New length of the collection.\r\n   * @api\r\n   */\n\n\n  Collection.prototype.push = function (elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n\n    var n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  };\n  /**\r\n   * Remove the first occurrence of an element from the collection.\r\n   * @param {T} elem Element.\r\n   * @return {T|undefined} The removed element or undefined if none found.\r\n   * @api\r\n   */\n\n\n  Collection.prototype.remove = function (elem) {\n    var arr = this.array_;\n\n    for (var i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n\n    return undefined;\n  };\n  /**\r\n   * Remove the element at the provided index and return it.\r\n   * Return `undefined` if the collection does not contain this index.\r\n   * @param {number} index Index.\r\n   * @return {T|undefined} Value.\r\n   * @api\r\n   */\n\n\n  Collection.prototype.removeAt = function (index) {\n    var prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev, index));\n    return prev;\n  };\n  /**\r\n   * Set the element at the provided index.\r\n   * @param {number} index Index.\r\n   * @param {T} elem Element.\r\n   * @api\r\n   */\n\n\n  Collection.prototype.setAt = function (index, elem) {\n    var n = this.getLength();\n\n    if (index < n) {\n      if (this.unique_) {\n        this.assertUnique_(elem, index);\n      }\n\n      var prev = this.array_[index];\n      this.array_[index] = elem;\n      this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev, index));\n      this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));\n    } else {\n      for (var j = n; j < index; ++j) {\n        this.insertAt(j, undefined);\n      }\n\n      this.insertAt(index, elem);\n    }\n  };\n  /**\r\n   * @private\r\n   */\n\n\n  Collection.prototype.updateLength_ = function () {\n    this.set(Property.LENGTH, this.array_.length);\n  };\n  /**\r\n   * @private\r\n   * @param {T} elem Element.\r\n   * @param {number=} opt_except Optional index to ignore.\r\n   */\n\n\n  Collection.prototype.assertUnique_ = function (elem, opt_except) {\n    for (var i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== opt_except) {\n        throw new AssertionError(58);\n      }\n    }\n  };\n\n  return Collection;\n}(BaseObject);\n\nexport default Collection;","map":null,"metadata":{},"sourceType":"module"}