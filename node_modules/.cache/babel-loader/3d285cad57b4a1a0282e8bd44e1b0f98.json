{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MeasureDistanceMode = void 0;\n\nvar _distance = _interopRequireDefault(require(\"@turf/distance\"));\n\nvar _memoizee = _interopRequireDefault(require(\"memoizee\"));\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar DEFAULT_TOOLTIPS = [];\n\nvar MeasureDistanceMode =\n/*#__PURE__*/\nfunction (_BaseGeoJsonEditMode) {\n  _inherits(MeasureDistanceMode, _BaseGeoJsonEditMode);\n\n  function MeasureDistanceMode() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MeasureDistanceMode);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MeasureDistanceMode)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"startingPoint\", null);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"endingPoint\", null);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"endingPointLocked\", false);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getTooltips\", (0, _memoizee.default)(function (modeConfig, startingPoint, endingPoint) {\n      var tooltips = DEFAULT_TOOLTIPS;\n\n      if (startingPoint && endingPoint) {\n        var _ref = modeConfig || {},\n            formatTooltip = _ref.formatTooltip,\n            turfOptions = _ref.turfOptions,\n            measurementCallback = _ref.measurementCallback;\n\n        var units = turfOptions && turfOptions.units || 'kilometers';\n        var distance = (0, _distance.default)(startingPoint, endingPoint, turfOptions);\n        var text;\n\n        if (formatTooltip) {\n          text = formatTooltip(distance);\n        }\n\n        if (!formatTooltip) {\n          // By default, round to 2 decimal places and append units\n          text = \"\".concat(parseFloat(distance).toFixed(2), \" \").concat(units);\n        }\n\n        if (measurementCallback) {\n          measurementCallback(distance);\n        }\n\n        tooltips = [{\n          position: endingPoint.geometry.coordinates,\n          text: text\n        }];\n      }\n\n      return tooltips;\n    }));\n\n    return _this;\n  }\n\n  _createClass(MeasureDistanceMode, [{\n    key: \"_setEndingPoint\",\n    value: function _setEndingPoint(mapCoords) {\n      this.endingPoint = {\n        type: 'Feature',\n        properties: {\n          guideType: 'editHandle',\n          editHandleType: 'existing',\n          featureIndex: -1,\n          positionIndexes: []\n        },\n        geometry: {\n          type: 'Point',\n          coordinates: mapCoords\n        }\n      };\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      if (!this.startingPoint || this.endingPointLocked) {\n        this.startingPoint = {\n          type: 'Feature',\n          properties: {\n            guideType: 'editHandle',\n            editHandleType: 'existing',\n            featureIndex: -1,\n            positionIndexes: []\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: event.mapCoords\n          }\n        };\n        this.endingPoint = null;\n        this.endingPointLocked = false;\n      } else if (this.startingPoint) {\n        this._setEndingPoint(event.mapCoords);\n\n        this.endingPointLocked = true;\n      }\n    } // Called when the pointer moved, regardless of whether the pointer is down, up, and whether something was picked\n\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      if (this.startingPoint && !this.endingPointLocked) {\n        this._setEndingPoint(event.mapCoords);\n      }\n\n      props.onUpdateCursor('cell');\n    } // Called when the pointer went down on something rendered by this layer and the pointer started to move\n\n  }, {\n    key: \"handleStartDragging\",\n    value: function handleStartDragging(event, props) {} // Called when the pointer went down on something rendered by this layer, the pointer moved, and now the pointer is up\n\n  }, {\n    key: \"handleStopDragging\",\n    value: function handleStopDragging(event, props) {} // Return features that can be used as a guide for editing the data\n\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n      var features = guides.features;\n\n      if (this.startingPoint) {\n        features.push(this.startingPoint);\n      }\n\n      if (this.endingPoint) {\n        features.push(this.endingPoint);\n      }\n\n      if (this.startingPoint && this.endingPoint) {\n        features.push({\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [this.startingPoint.geometry.coordinates, this.endingPoint.geometry.coordinates]\n          }\n        });\n      }\n\n      return guides;\n    }\n  }, {\n    key: \"getTooltips\",\n    value: function getTooltips(props) {\n      return this._getTooltips(props.modeConfig, this.startingPoint, this.endingPoint);\n    }\n  }]);\n\n  return MeasureDistanceMode;\n}(_geojsonEditMode.BaseGeoJsonEditMode);\n\nexports.MeasureDistanceMode = MeasureDistanceMode;","map":null,"metadata":{},"sourceType":"script"}