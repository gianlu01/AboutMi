{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DrawPolygonMode = void 0;\n\nvar _utils = require(\"../utils.js\");\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode.js\");\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar DrawPolygonMode =\n/*#__PURE__*/\nfunction (_BaseGeoJsonEditMode) {\n  _inherits(DrawPolygonMode, _BaseGeoJsonEditMode);\n\n  function DrawPolygonMode() {\n    _classCallCheck(this, DrawPolygonMode);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DrawPolygonMode).apply(this, arguments));\n  }\n\n  _createClass(DrawPolygonMode, [{\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var _guides$features;\n\n      var lastPointerMoveEvent = props.lastPointerMoveEvent;\n      var clickSequence = this.getClickSequence();\n      var lastCoords = lastPointerMoveEvent ? [lastPointerMoveEvent.mapCoords] : [];\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n      var tentativeFeature;\n\n      if (clickSequence.length === 1 || clickSequence.length === 2) {\n        tentativeFeature = {\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: _toConsumableArray(clickSequence).concat(lastCoords)\n          }\n        };\n      } else if (clickSequence.length > 2) {\n        tentativeFeature = {\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'Polygon',\n            coordinates: [_toConsumableArray(clickSequence).concat(lastCoords, [clickSequence[0]])]\n          }\n        };\n      }\n\n      if (tentativeFeature) {\n        guides.features.push(tentativeFeature);\n      }\n\n      var editHandles = clickSequence.map(function (clickedCoord, index) {\n        return {\n          type: 'Feature',\n          properties: {\n            guideType: 'editHandle',\n            editHandleType: 'existing',\n            featureIndex: -1,\n            positionIndexes: [index]\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickedCoord\n          }\n        };\n      });\n\n      (_guides$features = guides.features).push.apply(_guides$features, _toConsumableArray(editHandles));\n\n      return guides;\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      var picks = event.picks;\n      var clickedEditHandle = (0, _utils.getPickedEditHandle)(picks);\n\n      if (!clickedEditHandle) {\n        // Don't add another point right next to an existing one\n        this.addClickSequence(event);\n      }\n\n      var clickSequence = this.getClickSequence();\n\n      if (clickSequence.length > 2 && clickedEditHandle && (clickedEditHandle.properties.positionIndexes[0] === 0 || clickedEditHandle.properties.positionIndexes[0] === clickSequence.length - 1)) {\n        // They clicked the first or last point (or double-clicked), so complete the polygon\n        // Remove the hovered position\n        var polygonToAdd = {\n          type: 'Polygon',\n          coordinates: [_toConsumableArray(clickSequence).concat([clickSequence[0]])]\n        };\n        this.resetClickSequence();\n        var editAction = this.getAddFeatureOrBooleanPolygonAction(polygonToAdd, props);\n\n        if (editAction) {\n          props.onEdit(editAction);\n        }\n      } // Trigger pointer move right away in order for it to update edit handles (to support double-click)\n\n\n      var fakePointerMoveEvent = {\n        screenCoords: [-1, -1],\n        mapCoords: event.mapCoords,\n        picks: [],\n        pointerDownPicks: null,\n        pointerDownScreenCoords: null,\n        pointerDownMapCoords: null,\n        cancelPan: function cancelPan() {},\n        sourceEvent: null\n      };\n      this.handlePointerMove(fakePointerMoveEvent, props);\n    }\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(_ref, props) {\n      var mapCoords = _ref.mapCoords;\n      props.onUpdateCursor('cell');\n    }\n  }]);\n\n  return DrawPolygonMode;\n}(_geojsonEditMode.BaseGeoJsonEditMode);\n\nexports.DrawPolygonMode = DrawPolygonMode;","map":null,"metadata":{},"sourceType":"script"}