{"ast":null,"code":"/**\r\n * @module ol/render/canvas\r\n */\nimport { getFontParameters } from '../css.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { clear } from '../obj.js';\nimport { create as createTransform } from '../transform.js';\nimport LabelCache from './canvas/LabelCache.js';\n/**\r\n * @typedef {Object} FillState\r\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle\r\n */\n\n/**\r\n * @typedef {Object} FillStrokeState\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle]\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle]\r\n * @property {CanvasLineCap} [currentLineCap]\r\n * @property {Array<number>} currentLineDash\r\n * @property {number} [currentLineDashOffset]\r\n * @property {CanvasLineJoin} [currentLineJoin]\r\n * @property {number} [currentLineWidth]\r\n * @property {number} [currentMiterLimit]\r\n * @property {number} [lastStroke]\r\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle]\r\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle]\r\n * @property {CanvasLineCap} [lineCap]\r\n * @property {Array<number>} lineDash\r\n * @property {number} [lineDashOffset]\r\n * @property {CanvasLineJoin} [lineJoin]\r\n * @property {number} [lineWidth]\r\n * @property {number} [miterLimit]\r\n */\n\n/**\r\n * @typedef {Object} StrokeState\r\n * @property {CanvasLineCap} lineCap\r\n * @property {Array<number>} lineDash\r\n * @property {number} lineDashOffset\r\n * @property {CanvasLineJoin} lineJoin\r\n * @property {number} lineWidth\r\n * @property {number} miterLimit\r\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle\r\n */\n\n/**\r\n * @typedef {Object} TextState\r\n * @property {string} font\r\n * @property {string} [textAlign]\r\n * @property {string} textBaseline\r\n * @property {string} [placement]\r\n * @property {number} [maxAngle]\r\n * @property {boolean} [overflow]\r\n * @property {import(\"../style/Fill.js\").default} [backgroundFill]\r\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke]\r\n * @property {number} [scale]\r\n * @property {Array<number>} [padding]\r\n */\n\n/**\r\n * Container for decluttered replay instructions that need to be rendered or\r\n * omitted together, i.e. when styles render both an image and text, or for the\r\n * characters that form text along lines. The basic elements of this array are\r\n * `[minX, minY, maxX, maxY, count]`, where the first four entries are the\r\n * rendered extent of the group in pixel space. `count` is the number of styles\r\n * in the group, i.e. 2 when an image and a text are grouped, or 1 otherwise.\r\n * In addition to these four elements, declutter instruction arrays (i.e. the\r\n * arguments to {@link module:ol/render/canvas~drawImage} are appended to the array.\r\n * @typedef {Array<*>} DeclutterGroup\r\n */\n\n/**\r\n * Declutter groups for support of multi geometries.\r\n * @typedef {Array<DeclutterGroup>} DeclutterGroups\r\n */\n\n/**\r\n * @const\r\n * @type {string}\r\n */\n\nexport var defaultFont = '10px sans-serif';\n/**\r\n * @const\r\n * @type {import(\"../colorlike.js\").ColorLike}\r\n */\n\nexport var defaultFillStyle = '#000';\n/**\r\n * @const\r\n * @type {CanvasLineCap}\r\n */\n\nexport var defaultLineCap = 'round';\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\n\nexport var defaultLineDash = [];\n/**\r\n * @const\r\n * @type {number}\r\n */\n\nexport var defaultLineDashOffset = 0;\n/**\r\n * @const\r\n * @type {CanvasLineJoin}\r\n */\n\nexport var defaultLineJoin = 'round';\n/**\r\n * @const\r\n * @type {number}\r\n */\n\nexport var defaultMiterLimit = 10;\n/**\r\n * @const\r\n * @type {import(\"../colorlike.js\").ColorLike}\r\n */\n\nexport var defaultStrokeStyle = '#000';\n/**\r\n * @const\r\n * @type {string}\r\n */\n\nexport var defaultTextAlign = 'center';\n/**\r\n * @const\r\n * @type {string}\r\n */\n\nexport var defaultTextBaseline = 'middle';\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\n\nexport var defaultPadding = [0, 0, 0, 0];\n/**\r\n * @const\r\n * @type {number}\r\n */\n\nexport var defaultLineWidth = 1;\n/**\r\n * The label cache for text rendering. To change the default cache size of 2048\r\n * entries, use {@link module:ol/structs/LRUCache#setSize}.\r\n * @type {LabelCache}\r\n * @api\r\n */\n\nexport var labelCache = new LabelCache();\n/**\r\n * @type {!Object<string, number>}\r\n */\n\nexport var checkedFonts = {};\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\n\nvar measureContext = null;\n/**\r\n * @type {string}\r\n */\n\nvar measureFont;\n/**\r\n * @type {!Object<string, number>}\r\n */\n\nexport var textHeights = {};\n/**\r\n * Clears the label cache when a font becomes available.\r\n * @param {string} fontSpec CSS font spec.\r\n */\n\nexport var checkFont = function () {\n  var retries = 100;\n  var checked = checkedFonts;\n  var size = '32px ';\n  var referenceFonts = ['monospace', 'serif'];\n  var len = referenceFonts.length;\n  var text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\n  var interval, referenceWidth;\n  /**\r\n   * @param {string} fontStyle Css font-style\r\n   * @param {string} fontWeight Css font-weight\r\n   * @param {*} fontFamily Css font-family\r\n   * @return {boolean} Font with style and weight is available\r\n   */\n\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\n    var context = getMeasureContext();\n    var available = true;\n\n    for (var i = 0; i < len; ++i) {\n      var referenceFont = referenceFonts[i];\n      context.font = fontStyle + ' ' + fontWeight + ' ' + size + referenceFont;\n      referenceWidth = context.measureText(text).width;\n\n      if (fontFamily != referenceFont) {\n        context.font = fontStyle + ' ' + fontWeight + ' ' + size + fontFamily + ',' + referenceFont;\n        var width = context.measureText(text).width; // If width and referenceWidth are the same, then the fallback was used\n        // instead of the font we wanted, so the font is not available.\n\n        available = available && width != referenceWidth;\n      }\n    }\n\n    if (available) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function check() {\n    var done = true;\n\n    for (var font in checked) {\n      if (checked[font] < retries) {\n        if (isAvailable.apply(this, font.split('\\n'))) {\n          checked[font] = retries;\n          clear(textHeights); // Make sure that loaded fonts are picked up by Safari\n\n          measureContext = null;\n          measureFont = undefined;\n\n          if (labelCache.getCount()) {\n            labelCache.clear();\n          }\n        } else {\n          ++checked[font];\n          done = false;\n        }\n      }\n    }\n\n    if (done) {\n      clearInterval(interval);\n      interval = undefined;\n    }\n  }\n\n  return function (fontSpec) {\n    var font = getFontParameters(fontSpec);\n\n    if (!font) {\n      return;\n    }\n\n    var families = font.families;\n\n    for (var i = 0, ii = families.length; i < ii; ++i) {\n      var family = families[i];\n      var key = font.style + '\\n' + font.weight + '\\n' + family;\n\n      if (!(key in checked)) {\n        checked[key] = retries;\n\n        if (!isAvailable(font.style, font.weight, family)) {\n          checked[key] = 0;\n\n          if (interval === undefined) {\n            interval = setInterval(check, 32);\n          }\n        }\n      }\n    }\n  };\n}();\n/**\r\n * @return {CanvasRenderingContext2D} Measure context.\r\n */\n\nfunction getMeasureContext() {\n  if (!measureContext) {\n    measureContext = createCanvasContext2D(1, 1);\n  }\n\n  return measureContext;\n}\n/**\r\n * @param {string} font Font to use for measuring.\r\n * @return {import(\"../size.js\").Size} Measurement.\r\n */\n\n\nexport var measureTextHeight = function () {\n  /**\r\n   * @type {HTMLDivElement}\r\n   */\n  var div;\n  var heights = textHeights;\n  return function (font) {\n    var height = heights[font];\n\n    if (height == undefined) {\n      if (!div) {\n        div = document.createElement('div');\n        div.innerHTML = 'M';\n        div.style.margin = '0 !important';\n        div.style.padding = '0 !important';\n        div.style.position = 'absolute !important';\n        div.style.left = '-99999px !important';\n      }\n\n      div.style.font = font;\n      document.body.appendChild(div);\n      height = div.offsetHeight;\n      heights[font] = height;\n      document.body.removeChild(div);\n    }\n\n    return height;\n  };\n}();\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {number} Width.\r\n */\n\nexport function measureTextWidth(font, text) {\n  var measureContext = getMeasureContext();\n\n  if (font != measureFont) {\n    measureContext.font = font;\n    measureFont = measureContext.font;\n  }\n\n  return measureContext.measureText(text).width;\n}\n/**\r\n * Measure text width using a cache.\r\n * @param {string} font The font.\r\n * @param {string} text The text to measure.\r\n * @param {Object<string, number>} cache A lookup of cached widths by text.\r\n * @returns {number} The text width.\r\n */\n\nexport function measureAndCacheTextWidth(font, text, cache) {\n  if (text in cache) {\n    return cache[text];\n  }\n\n  var width = measureTextWidth(font, text);\n  cache[text] = width;\n  return width;\n}\n/**\r\n * @param {string} font Font to use for measuring.\r\n * @param {Array<string>} lines Lines to measure.\r\n * @param {Array<number>} widths Array will be populated with the widths of\r\n * each line.\r\n * @return {number} Width of the whole text.\r\n */\n\nexport function measureTextWidths(font, lines, widths) {\n  var numLines = lines.length;\n  var width = 0;\n\n  for (var i = 0; i < numLines; ++i) {\n    var currentWidth = measureTextWidth(font, lines[i]);\n    width = Math.max(width, currentWidth);\n    widths.push(currentWidth);\n  }\n\n  return width;\n}\n/**\r\n * @param {CanvasRenderingContext2D} context Context.\r\n * @param {number} rotation Rotation.\r\n * @param {number} offsetX X offset.\r\n * @param {number} offsetY Y offset.\r\n */\n\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\n  if (rotation !== 0) {\n    context.translate(offsetX, offsetY);\n    context.rotate(rotation);\n    context.translate(-offsetX, -offsetY);\n  }\n}\nexport var resetTransform = createTransform();\n/**\r\n * @param {CanvasRenderingContext2D} context Context.\r\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\r\n * @param {number} opacity Opacity.\r\n * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.\r\n * @param {number} originX Origin X.\r\n * @param {number} originY Origin Y.\r\n * @param {number} w Width.\r\n * @param {number} h Height.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {number} scale Scale.\r\n */\n\nexport function drawImage(context, transform, opacity, image, originX, originY, w, h, x, y, scale) {\n  var alpha;\n\n  if (opacity != 1) {\n    alpha = context.globalAlpha;\n    context.globalAlpha = alpha * opacity;\n  }\n\n  if (transform) {\n    context.setTransform.apply(context, transform);\n  }\n\n  context.drawImage(image, originX, originY, w, h, x, y, w * scale, h * scale);\n\n  if (opacity != 1) {\n    context.globalAlpha = alpha;\n  }\n\n  if (transform) {\n    context.setTransform.apply(context, resetTransform);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}