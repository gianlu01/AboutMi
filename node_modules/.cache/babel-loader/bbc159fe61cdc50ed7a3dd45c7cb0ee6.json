{"ast":null,"code":"function throttle(fn, time, context) {\n  var lock, args;\n\n  function later() {\n    // reset lock and call if queued\n    lock = false;\n\n    if (args) {\n      wrapperFn.apply(context, args);\n      args = false;\n    }\n  }\n\n  function wrapperFn() {\n    if (lock) {\n      // called too soon, queue to call later\n      args = arguments;\n    } else {\n      // lock until later then call\n      lock = true;\n      fn.apply(context, arguments);\n      setTimeout(later, time);\n    }\n  }\n\n  return wrapperFn;\n}\n\nmodule.exports = throttle;","map":null,"metadata":{},"sourceType":"script"}