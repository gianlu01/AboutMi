{"ast":null,"code":"var Feature = require('./feature');\n\nvar Polygon = function Polygon(ctx, geojson) {\n  Feature.call(this, ctx, geojson);\n  this.coordinates = this.coordinates.map(function (ring) {\n    return ring.slice(0, -1);\n  });\n};\n\nPolygon.prototype = Object.create(Feature.prototype);\n\nPolygon.prototype.isValid = function () {\n  if (this.coordinates.length === 0) return false;\n  return this.coordinates.every(function (ring) {\n    return ring.length > 2;\n  });\n}; // Expects valid geoJSON polygon geometry: first and last positions must be equivalent.\n\n\nPolygon.prototype.incomingCoords = function (coords) {\n  this.coordinates = coords.map(function (ring) {\n    return ring.slice(0, -1);\n  });\n  this.changed();\n}; // Does NOT expect valid geoJSON polygon geometry: first and last positions should not be equivalent.\n\n\nPolygon.prototype.setCoordinates = function (coords) {\n  this.coordinates = coords;\n  this.changed();\n};\n\nPolygon.prototype.addCoordinate = function (path, lng, lat) {\n  this.changed();\n  var ids = path.split('.').map(function (x) {\n    return parseInt(x, 10);\n  });\n  var ring = this.coordinates[ids[0]];\n  ring.splice(ids[1], 0, [lng, lat]);\n};\n\nPolygon.prototype.removeCoordinate = function (path) {\n  this.changed();\n  var ids = path.split('.').map(function (x) {\n    return parseInt(x, 10);\n  });\n  var ring = this.coordinates[ids[0]];\n\n  if (ring) {\n    ring.splice(ids[1], 1);\n\n    if (ring.length < 3) {\n      this.coordinates.splice(ids[0], 1);\n    }\n  }\n};\n\nPolygon.prototype.getCoordinate = function (path) {\n  var ids = path.split('.').map(function (x) {\n    return parseInt(x, 10);\n  });\n  var ring = this.coordinates[ids[0]];\n  return JSON.parse(JSON.stringify(ring[ids[1]]));\n};\n\nPolygon.prototype.getCoordinates = function () {\n  return this.coordinates.map(function (coords) {\n    return coords.concat([coords[0]]);\n  });\n};\n\nPolygon.prototype.updateCoordinate = function (path, lng, lat) {\n  this.changed();\n  var parts = path.split('.');\n  var ringId = parseInt(parts[0], 10);\n  var coordId = parseInt(parts[1], 10);\n\n  if (this.coordinates[ringId] === undefined) {\n    this.coordinates[ringId] = [];\n  }\n\n  this.coordinates[ringId][coordId] = [lng, lat];\n};\n\nmodule.exports = Polygon;","map":{"version":3,"sources":["C:/Users/michele/Desktop/IT/Code/react/aboutmi/node_modules/@mapbox/mapbox-gl-draw/src/feature_types/polygon.js"],"names":["Feature","require","Polygon","ctx","geojson","call","coordinates","map","ring","slice","prototype","Object","create","isValid","length","every","incomingCoords","coords","changed","setCoordinates","addCoordinate","path","lng","lat","ids","split","x","parseInt","splice","removeCoordinate","getCoordinate","JSON","parse","stringify","getCoordinates","concat","updateCoordinate","parts","ringId","coordId","undefined","module","exports"],"mappings":"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","sourcesContent":["const Feature = require('./feature');\r\n\r\nconst Polygon = function(ctx, geojson) {\r\n  Feature.call(this, ctx, geojson);\r\n  this.coordinates = this.coordinates.map(ring => ring.slice(0, -1));\r\n};\r\n\r\nPolygon.prototype = Object.create(Feature.prototype);\r\n\r\nPolygon.prototype.isValid = function() {\r\n  if (this.coordinates.length === 0) return false;\r\n  return this.coordinates.every(ring => ring.length > 2);\r\n};\r\n\r\n// Expects valid geoJSON polygon geometry: first and last positions must be equivalent.\r\nPolygon.prototype.incomingCoords = function(coords) {\r\n  this.coordinates = coords.map(ring => ring.slice(0, -1));\r\n  this.changed();\r\n};\r\n\r\n// Does NOT expect valid geoJSON polygon geometry: first and last positions should not be equivalent.\r\nPolygon.prototype.setCoordinates = function(coords) {\r\n  this.coordinates = coords;\r\n  this.changed();\r\n};\r\n\r\nPolygon.prototype.addCoordinate = function(path, lng, lat) {\r\n  this.changed();\r\n  const ids = path.split('.').map(x => parseInt(x, 10));\r\n\r\n  const ring = this.coordinates[ids[0]];\r\n\r\n  ring.splice(ids[1], 0, [lng, lat]);\r\n};\r\n\r\nPolygon.prototype.removeCoordinate = function(path) {\r\n  this.changed();\r\n  const ids = path.split('.').map(x => parseInt(x, 10));\r\n  const ring = this.coordinates[ids[0]];\r\n  if (ring) {\r\n    ring.splice(ids[1], 1);\r\n    if (ring.length < 3) {\r\n      this.coordinates.splice(ids[0], 1);\r\n    }\r\n  }\r\n};\r\n\r\nPolygon.prototype.getCoordinate = function(path) {\r\n  const ids = path.split('.').map(x => parseInt(x, 10));\r\n  const ring = this.coordinates[ids[0]];\r\n  return JSON.parse(JSON.stringify(ring[ids[1]]));\r\n};\r\n\r\nPolygon.prototype.getCoordinates = function() {\r\n  return this.coordinates.map(coords => coords.concat([coords[0]]));\r\n};\r\n\r\nPolygon.prototype.updateCoordinate = function(path, lng, lat) {\r\n  this.changed();\r\n  const parts = path.split('.');\r\n  const ringId = parseInt(parts[0], 10);\r\n  const coordId = parseInt(parts[1], 10);\r\n\r\n  if (this.coordinates[ringId] === undefined) {\r\n    this.coordinates[ringId] = [];\r\n  }\r\n\r\n  this.coordinates[ringId][coordId] = [lng, lat];\r\n};\r\n\r\nmodule.exports = Polygon;\r\n"]},"metadata":{},"sourceType":"script"}