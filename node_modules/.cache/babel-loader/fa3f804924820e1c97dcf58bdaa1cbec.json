{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\michi\\\\OneDrive\\\\Desktop\\\\AboutMi\\\\src\\\\components\\\\Maps.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactMapboxGl, { Layer, Marker, Feature, GeoJSONLayer, Cluster } from \"react-mapbox-gl\";\nimport DrawControl from \"react-mapbox-gl-draw\";\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\nimport * as turf from '@turf/turf'; //import Dati from '../data/Dati.json'\n//accessToken: 'pk.eyJ1IjoiZ2lhbmx1MDEiLCJhIjoiY2s1ejQ0a2gyMDY5NjNtcWp5cGF4Y21wMiJ9.S2-22wqQvv8B0aiya-Mh7A';\n//site URL: mapbox://styles/gianlu01/ck5z9olku3d2r1jov9drsa1uu\n//geoJson URL: http://dati.comune.milano.it/dataset/ds252-economia-locali-pubblico-spettacolo/resource/e5e1c5ed-03b9-415e-9880-a2c163e4973f/view/76fa6876-f208-440f-a57c-6b3d71e52278\n\nconst Map = ReactMapboxGl({\n  accessToken: \"pk.eyJ1IjoiZ2lhbmx1MDEiLCJhIjoiY2s1ejQ0a2gyMDY5NjNtcWp5cGF4Y21wMiJ9.S2-22wqQvv8B0aiya-Mh7A\"\n});\n\nconst mounter = () => {\n  fetch('https://michelebanfi.github.io/datasethosting/economia_locale_pubblico_spettacolo.geojson', {\n    method: \"GET\"\n  }).then(response => {\n    return response.text();\n  }).then(a => {\n    this.setState({\n      markers: JSON.parse(a)\n    });\n  });\n};\n\nclass Maps extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stato: false,\n      markers: this.mounter\n    };\n  }\n\n  render() {\n    const controls = {\n      polygon: true,\n      trash: true,\n      point: false,\n      line_string: false,\n      combine_features: false,\n      uncombine_features: false\n    };\n\n    const checker = () => {\n      console.log(\"chiamato\");\n      if (this.state.stato) return this.state.markers;else return {};\n    };\n\n    const onDrawCreate = ({\n      features\n    }) => {\n      var c = JSON.parse(this.state.markers);\n      console.log(c);\n\n      for (var u = 0; u < c.features.length; u++) {\n        if (c.features[u].geometry.coordinates.length == 0) c.features.splice(u, 1);\n      }\n\n      var result = turf.pointsWithinPolygon(c, this.drawControl.draw.getAll());\n\n      if (result.features.length <= 0) {\n        alert(\"Locals not founds\");\n      } else {\n        this.setState({\n          stato: true,\n          markers: result\n        });\n      }\n    };\n\n    const onDrawUpdate = ({\n      features\n    }) => {//onDrawCreate(features);\n    };\n    /*\r\n    <GeoJSONLayer\r\n      data={'https://michelebanfi.github.io/datasethosting/economia_locale_pubblico_spettacolo.geojson'}\r\n      symbolLayout={{\r\n        'text-field': \"A\"\r\n        }}\r\n      ></GeoJSONLayer>\r\n      this.state.markers.features.map(point=>(\r\n        <Marker\r\n          coordinates={point.coordinates}\r\n        >\r\n        </Marker>\r\n      ))\r\n    */\n\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Map, {\n      style: \"mapbox://styles/mapbox/streets-v9\" // eslint-disable-line\n      ,\n      containerStyle: {\n        height: \"100vh\",\n        width: \"100%\"\n      },\n      center: [9.19, 45.466944],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"//@TODO pasto sai cosa devi fare ahahaha\", React.createElement(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"ahhhhhhhhh\",\n      style: {\n        position: 'absolute'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), () => {\n      if (this.state.stato) {\n        console.log(\"rende\");\n        this.state.markers.features.map(point => React.createElement(Marker, {\n          coordinates: point.coordinates,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }));\n      }\n    }, React.createElement(DrawControl, {\n      onDrawCreate: onDrawCreate,\n      onDrawUpdate: onDrawUpdate,\n      controls: controls,\n      ref: drawControl => {\n        this.drawControl = drawControl;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Maps;","map":{"version":3,"sources":["C:/Users/michi/OneDrive/Desktop/AboutMi/src/components/Maps.js"],"names":["React","ReactDOM","ReactMapboxGl","Layer","Marker","Feature","GeoJSONLayer","Cluster","DrawControl","turf","Map","accessToken","mounter","fetch","method","then","response","text","a","setState","markers","JSON","parse","Maps","Component","constructor","props","state","stato","render","controls","polygon","trash","point","line_string","combine_features","uncombine_features","checker","console","log","onDrawCreate","features","c","u","length","geometry","coordinates","splice","result","pointsWithinPolygon","drawControl","draw","getAll","alert","onDrawUpdate","height","width","textAlign","position","map"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ReactMapboxGl, {\r\n  Layer,\r\n  Marker,\r\n  Feature,\r\n  GeoJSONLayer,\r\n  Cluster\r\n} from \"react-mapbox-gl\";\r\nimport DrawControl from \"react-mapbox-gl-draw\";\r\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\r\nimport * as turf from '@turf/turf';\r\n//import Dati from '../data/Dati.json'\r\n//accessToken: 'pk.eyJ1IjoiZ2lhbmx1MDEiLCJhIjoiY2s1ejQ0a2gyMDY5NjNtcWp5cGF4Y21wMiJ9.S2-22wqQvv8B0aiya-Mh7A';\r\n//site URL: mapbox://styles/gianlu01/ck5z9olku3d2r1jov9drsa1uu\r\n//geoJson URL: http://dati.comune.milano.it/dataset/ds252-economia-locali-pubblico-spettacolo/resource/e5e1c5ed-03b9-415e-9880-a2c163e4973f/view/76fa6876-f208-440f-a57c-6b3d71e52278\r\n\r\nconst Map = ReactMapboxGl({\r\n  accessToken: \"pk.eyJ1IjoiZ2lhbmx1MDEiLCJhIjoiY2s1ejQ0a2gyMDY5NjNtcWp5cGF4Y21wMiJ9.S2-22wqQvv8B0aiya-Mh7A\"\r\n});\r\n\r\nconst mounter=()=>{\r\n  fetch('https://michelebanfi.github.io/datasethosting/economia_locale_pubblico_spettacolo.geojson', {\r\n    method: \"GET\"\r\n  }).then(response => {\r\n    return(response.text())\r\n  }).then(a =>{\r\n    this.setState({\r\n      markers: JSON.parse(a)\r\n    });\r\n  })\r\n}\r\n\r\nclass Maps extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stato: false,\r\n      markers: this.mounter\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const controls = {\r\n      polygon: true,\r\n      trash: true,\r\n      point: false,\r\n      line_string: false,\r\n      combine_features: false,\r\n      uncombine_features: false\r\n    }\r\n\r\n    const checker = () => {\r\n      console.log(\"chiamato\")\r\n      if (this.state.stato) return this.state.markers\r\n      else return {}\r\n    }\r\n\r\n\r\n\r\n    const onDrawCreate = ({features}) => {\r\n      var c = JSON.parse(this.state.markers);\r\n      console.log(c);\r\n      for (var u =0 ; u< c.features.length; u++){\r\n        if (c.features[u].geometry.coordinates.length == 0)  c.features.splice(u,1);\r\n      }\r\n      var result = turf.pointsWithinPolygon(c, this.drawControl.draw.getAll());\r\n      if (result.features.length <= 0) {\r\n        alert(\"Locals not founds\")\r\n      } else {\r\n        this.setState({\r\n          stato: true,\r\n          markers: result\r\n        });\r\n      }\r\n    };\r\n\r\n    const onDrawUpdate = ({ features}) => {\r\n            //onDrawCreate(features);\r\n    };\r\n\r\n    /*\r\n    <GeoJSONLayer\r\n      data={'https://michelebanfi.github.io/datasethosting/economia_locale_pubblico_spettacolo.geojson'}\r\n      symbolLayout={{\r\n        'text-field': \"A\"\r\n        }}\r\n      ></GeoJSONLayer>\r\n      this.state.markers.features.map(point=>(\r\n        <Marker\r\n          coordinates={point.coordinates}\r\n        >\r\n        </Marker>\r\n      ))\r\n*/\r\n\r\n\r\n\r\n    return (\r\n      <div>\r\n        <Map style=\"mapbox://styles/mapbox/streets-v9\" // eslint-disable-line\r\n          containerStyle={{\r\n            height: \"100vh\",\r\n            width: \"100%\"\r\n          }}\r\n          center={\r\n          [9.19, 45.466944]\r\n          } >\r\n              //@TODO pasto sai cosa devi fare ahahaha\r\n          <div style={{\r\n            textAlign: 'center'\r\n          }} >\r\n            <input type='text'\r\n              placeholder='ahhhhhhhhh'\r\n              style={{\r\n                position: 'absolute'\r\n                    }} >\r\n            </input>\r\n          </div>\r\n          {()=>{\r\n            if(this.state.stato){\r\n              console.log(\"rende\")\r\n              this.state.markers.features.map(point=>(\r\n                <Marker\r\n                  coordinates={point.coordinates}\r\n                >\r\n                </Marker>\r\n              ))\r\n            }\r\n          }}\r\n            <DrawControl\r\n              onDrawCreate={onDrawCreate}\r\n              onDrawUpdate={onDrawUpdate}\r\n              controls={controls}\r\n              ref={(drawControl) => { this.drawControl = drawControl; }}\r\n            />\r\n        </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Maps;\r\n"]},"metadata":{},"sourceType":"module"}