{"ast":null,"code":"import { coordEach } from '@turf/meta';\nimport { isObject } from '@turf/helpers';\nimport { getCoords } from '@turf/invariant';\nimport clone from '@turf/clone';\nimport rhumbDestination from '@turf/rhumb-destination';\n/**\n * Moves any geojson Feature or Geometry of a specified distance along a Rhumb Line\n * on the provided direction angle.\n *\n * @name transformTranslate\n * @param {GeoJSON} geojson object to be translated\n * @param {number} distance length of the motion; negative values determine motion in opposite direction\n * @param {number} direction of the motion; angle from North in decimal degrees, positive clockwise\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] in which `distance` will be express; miles, kilometers, degrees, or radians\n * @param {number} [options.zTranslation=0] length of the vertical motion, same unit of distance\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} the translated GeoJSON object\n * @example\n * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * var translatedPoly = turf.transformTranslate(poly, 100, 35);\n *\n * //addToMap\n * var addToMap = [poly, translatedPoly];\n * translatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\n\nfunction transformTranslate(geojson, distance, direction, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error('options is invalid');\n  var units = options.units;\n  var zTranslation = options.zTranslation;\n  var mutate = options.mutate; // Input validation\n\n  if (!geojson) throw new Error('geojson is required');\n  if (distance === undefined || distance === null || isNaN(distance)) throw new Error('distance is required');\n  if (zTranslation && typeof zTranslation !== 'number' && isNaN(zTranslation)) throw new Error('zTranslation is not a number'); // Shortcut no-motion\n\n  zTranslation = zTranslation !== undefined ? zTranslation : 0;\n  if (distance === 0 && zTranslation === 0) return geojson;\n  if (direction === undefined || direction === null || isNaN(direction)) throw new Error('direction is required'); // Invert with negative distances\n\n  if (distance < 0) {\n    distance = -distance;\n    direction = -direction;\n  } // Clone geojson to avoid side effects\n\n\n  if (mutate === false || mutate === undefined) geojson = clone(geojson); // Translate each coordinate\n\n  coordEach(geojson, function (pointCoords) {\n    var newCoords = getCoords(rhumbDestination(pointCoords, distance, direction, {\n      units: units\n    }));\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n    if (zTranslation && pointCoords.length === 3) pointCoords[2] += zTranslation;\n  });\n  return geojson;\n}\n\nexport default transformTranslate;","map":null,"metadata":{},"sourceType":"module"}