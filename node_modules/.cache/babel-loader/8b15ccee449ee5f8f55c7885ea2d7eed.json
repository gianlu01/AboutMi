{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/control/Control\r\n */\n\n\nimport { VOID } from '../functions.js';\nimport MapEventType from '../MapEventType.js';\nimport BaseObject from '../Object.js';\nimport { removeNode } from '../dom.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\r\n * @typedef {Object} Options\r\n * @property {HTMLElement} [element] The element is the control's\r\n * container element. This only needs to be specified if you're developing\r\n * a custom control.\r\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when\r\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n * @property {HTMLElement|string} [target] Specify a target if you want\r\n * the control to be rendered outside of the map's viewport.\r\n */\n\n/**\r\n * @classdesc\r\n * A control is a visible widget with a DOM element in a fixed position on the\r\n * screen. They can involve user input (buttons), or be informational only;\r\n * the position is determined using CSS. By default these are placed in the\r\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\r\n * any outside DOM element.\r\n *\r\n * This is the base class for controls. You can use it for simple custom\r\n * controls by creating the element with listeners, creating an instance:\r\n * ```js\r\n * var myControl = new Control({element: myElement});\r\n * ```\r\n * and then adding this to the map.\r\n *\r\n * The main advantage of having this as a control rather than a simple separate\r\n * DOM element is that preventing propagation is handled for you. Controls\r\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\r\n *\r\n * You can also extend this base for your own control class. See\r\n * examples/custom-controls for an example of how to do this.\r\n *\r\n * @api\r\n */\n\nvar Control =\n/** @class */\nfunction (_super) {\n  __extends(Control, _super);\n  /**\r\n   * @param {Options} options Control options.\r\n   */\n\n\n  function Control(options) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * @protected\r\n     * @type {HTMLElement}\r\n     */\n\n\n    _this.element = options.element ? options.element : null;\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\n\n    _this.target_ = null;\n    /**\r\n     * @private\r\n     * @type {import(\"../PluggableMap.js\").default}\r\n     */\n\n    _this.map_ = null;\n    /**\r\n     * @protected\r\n     * @type {!Array<import(\"../events.js\").EventsKey>}\r\n     */\n\n    _this.listenerKeys = [];\n    /**\r\n     * @type {function(import(\"../MapEvent.js\").default): void}\r\n     */\n\n    _this.render = options.render ? options.render : VOID;\n\n    if (options.target) {\n      _this.setTarget(options.target);\n    }\n\n    return _this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Control.prototype.disposeInternal = function () {\n    removeNode(this.element);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\r\n   * Get the map associated with this control.\r\n   * @return {import(\"../PluggableMap.js\").default} Map.\r\n   * @api\r\n   */\n\n\n  Control.prototype.getMap = function () {\n    return this.map_;\n  };\n  /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../PluggableMap.js\").default} map Map.\r\n   * @api\r\n   */\n\n\n  Control.prototype.setMap = function (map) {\n    if (this.map_) {\n      removeNode(this.element);\n    }\n\n    for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n\n    if (this.map_) {\n      var target = this.target_ ? this.target_ : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n\n      if (this.render !== VOID) {\n        this.listenerKeys.push(listen(map, MapEventType.POSTRENDER, this.render, this));\n      }\n\n      map.render();\n    }\n  };\n  /**\r\n   * This function is used to set a target element for the control. It has no\r\n   * effect if it is called after the control has been added to the map (i.e.\r\n   * after `setMap` is called on the control). If no `target` is set in the\r\n   * options passed to the control constructor and if `setTarget` is not called\r\n   * then the control is added to the map's overlay container.\r\n   * @param {HTMLElement|string} target Target.\r\n   * @api\r\n   */\n\n\n  Control.prototype.setTarget = function (target) {\n    this.target_ = typeof target === 'string' ? document.getElementById(target) : target;\n  };\n\n  return Control;\n}(BaseObject);\n\nexport default Control;","map":null,"metadata":{},"sourceType":"module"}