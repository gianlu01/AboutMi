{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/VectorRenderTile\r\n */\n\n\nimport { getUid } from './util.js';\nimport Tile from './Tile.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { unlistenByKey } from './events.js';\n/**\r\n * @typedef {Object} ReplayState\r\n * @property {boolean} dirty\r\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder\r\n * @property {number} renderedTileRevision\r\n * @property {number} renderedResolution\r\n * @property {number} renderedRevision\r\n * @property {number} renderedZ\r\n * @property {number} renderedTileResolution\r\n * @property {number} renderedTileZ\r\n */\n\nvar VectorRenderTile =\n/** @class */\nfunction (_super) {\n  __extends(VectorRenderTile, _super);\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\r\n   * @param {import(\"./tilegrid/TileGrid.js\").default} sourceTileGrid Tile grid of the source.\r\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\r\n   * to get an source tiles for this tile.\r\n   * @param {function(VectorRenderTile):void} removeSourceTiles Function to remove this tile from its\r\n   * source tiles's consumer count.\r\n   */\n\n\n  function VectorRenderTile(tileCoord, state, urlTileCoord, sourceTileGrid, getSourceTiles, removeSourceTiles) {\n    var _this = _super.call(this, tileCoord, state, {\n      transition: 0\n    }) || this;\n    /**\r\n     * @private\r\n     * @type {!Object<string, CanvasRenderingContext2D>}\r\n     */\n\n\n    _this.context_ = {};\n    /**\r\n     * Executor groups by layer uid. Entries are read/written by the renderer.\r\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\r\n     */\n\n    _this.executorGroups = {};\n    /**\r\n     * Number of loading source tiles. Read/written by the source.\r\n     * @type {number}\r\n     */\n\n    _this.loadingSourceTiles = 0;\n    /**\r\n     * Tile keys of error source tiles. Read/written by the source.\r\n     * @type {Object<string, boolean>}\r\n     */\n\n    _this.errorSourceTileKeys = {};\n    /**\r\n     * @type {ImageData}\r\n     */\n\n    _this.hitDetectionImageData = null;\n    /**\r\n     * @private\r\n     * @type {!Object<string, ReplayState>}\r\n     */\n\n    _this.replayState_ = {};\n    /**\r\n     * @type {number}\r\n     */\n\n    _this.wantedResolution;\n    /**\r\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\r\n     */\n\n    _this.getSourceTiles = getSourceTiles.bind(_this, _this);\n    /**\r\n     * @type {!function(import(\"./VectorRenderTile.js\").default):void}\r\n     */\n\n    _this.removeSourceTiles_ = removeSourceTiles;\n    /**\r\n     * @private\r\n     * @type {import(\"./tilegrid/TileGrid.js\").default}\r\n     */\n\n    _this.sourceTileGrid_ = sourceTileGrid;\n    /**\r\n     * @type {Array<import(\"./events.js\").EventsKey>}\r\n     */\n\n    _this.sourceTileListenerKeys = [];\n    /**\r\n     * z of the source tiles of the last getSourceTiles call.\r\n     * @type {number}\r\n     */\n\n    _this.sourceZ = -1;\n    /**\r\n     * True when all tiles for this tile's nominal resolution are available.\r\n     * @type {boolean}\r\n     */\n\n    _this.hifi = false;\n    /**\r\n     * @type {import(\"./tilecoord.js\").TileCoord}\r\n     */\n\n    _this.wrappedTileCoord = urlTileCoord;\n    return _this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  VectorRenderTile.prototype.disposeInternal = function () {\n    this.sourceTileListenerKeys.forEach(unlistenByKey);\n    this.sourceTileListenerKeys.length = 0;\n    this.removeSourceTiles_(this);\n\n    for (var key in this.context_) {\n      var canvas = this.context_[key].canvas;\n      canvas.width = 0;\n      canvas.height = 0;\n    }\n\n    for (var key in this.executorGroups) {\n      var executorGroups = this.executorGroups[key];\n\n      for (var i = 0, ii = executorGroups.length; i < ii; ++i) {\n        executorGroups[i].disposeInternal();\n      }\n    }\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {CanvasRenderingContext2D} The rendering context.\r\n   */\n\n\n  VectorRenderTile.prototype.getContext = function (layer) {\n    var key = getUid(layer);\n\n    if (!(key in this.context_)) {\n      this.context_[key] = createCanvasContext2D();\n    }\n\n    return this.context_[key];\n  };\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {boolean} Tile has a rendering context for the given layer.\r\n   */\n\n\n  VectorRenderTile.prototype.hasContext = function (layer) {\n    return getUid(layer) in this.context_;\n  };\n  /**\r\n   * Get the Canvas for this tile.\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {HTMLCanvasElement} Canvas.\r\n   */\n\n\n  VectorRenderTile.prototype.getImage = function (layer) {\n    return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n  };\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {ReplayState} The replay state.\r\n   */\n\n\n  VectorRenderTile.prototype.getReplayState = function (layer) {\n    var key = getUid(layer);\n\n    if (!(key in this.replayState_)) {\n      this.replayState_[key] = {\n        dirty: false,\n        renderedRenderOrder: null,\n        renderedResolution: NaN,\n        renderedRevision: -1,\n        renderedTileResolution: NaN,\n        renderedTileRevision: -1,\n        renderedZ: -1,\n        renderedTileZ: -1\n      };\n    }\n\n    return this.replayState_[key];\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  VectorRenderTile.prototype.load = function () {\n    this.getSourceTiles();\n  };\n\n  return VectorRenderTile;\n}(Tile);\n\nexport default VectorRenderTile;","map":null,"metadata":{},"sourceType":"module"}