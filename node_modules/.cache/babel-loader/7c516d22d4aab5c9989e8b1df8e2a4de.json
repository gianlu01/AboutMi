{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport MapContext from './map-context';\nimport assert from '../utils/assert';\nimport deepEqual from '../utils/deep-equal';\nvar propTypes = {\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string\n};\nvar sourceCounter = 0;\n\nvar Source = function (_PureComponent) {\n  _inherits(Source, _PureComponent);\n\n  function Source(_props) {\n    var _this;\n\n    _classCallCheck(this, Source);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Source).call(this, _props));\n\n    _defineProperty(_assertThisInitialized(_this), \"id\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_map\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_sourceOptions\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateSource\", function () {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          type = _assertThisInitialize.type,\n          map = _assertThisInitialize._map;\n\n      if (!map) {\n        return;\n      }\n\n      var _assertThisInitialize2 = _assertThisInitialized(_this),\n          sourceOptions = _assertThisInitialize2._sourceOptions,\n          props = _assertThisInitialize2.props;\n\n      assert(!props.id || props.id === _this.id, 'source id changed');\n      assert(props.type === type, 'source type changed');\n      var changedKey = '';\n      var changedKeyCount = 0;\n\n      for (var key in props) {\n        if (key !== 'children' && key !== 'id' && !deepEqual(sourceOptions[key], props[key])) {\n          sourceOptions[key] = props[key];\n          changedKey = key;\n          changedKeyCount++;\n        }\n      }\n\n      var source = _this.getSource();\n\n      if (!source) {\n        _this._createSource(sourceOptions);\n\n        return;\n      }\n\n      if (!changedKeyCount) {\n        return;\n      }\n\n      if (type === 'geojson') {\n        source.setData(sourceOptions.data);\n      } else if (type === 'image') {\n        source.updateImage({\n          url: sourceOptions.url,\n          coordinates: sourceOptions.coordinates\n        });\n      } else if ((type === 'canvas' || type === 'video') && changedKeyCount === 1 && changedKey === 'coordinates') {\n        source.setCoordinates(sourceOptions.coordinates);\n      } else {\n        console.warn(\"Unable to update <Source> prop: \".concat(changedKey));\n      }\n    });\n\n    _this.id = _props.id || \"jsx-source-\".concat(sourceCounter++);\n    _this.type = _props.type;\n    return _this;\n  }\n\n  _createClass(Source, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this2 = this;\n\n      var map = this._map;\n\n      if (map) {\n        map.off('styledata', this._updateSource);\n\n        if (map.style) {\n          requestAnimationFrame(function () {\n            return map.removeSource(_this2.id);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource() {\n      var map = this._map;\n      return map && map.style && map.getSource(this.id);\n    }\n  }, {\n    key: \"_createSource\",\n    value: function _createSource(sourceOptions) {\n      var map = this._map;\n\n      if (map.style && map.style._loaded) {\n        map.addSource(this.id, sourceOptions);\n      }\n    }\n  }, {\n    key: \"_render\",\n    value: function _render(context) {\n      var _this3 = this;\n\n      if (!this._map) {\n        this._map = context.map;\n\n        this._map.on('styledata', this._updateSource);\n      }\n\n      this._updateSource();\n\n      return React.Children.map(this.props.children, function (child) {\n        return cloneElement(child, {\n          source: _this3.id\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(MapContext.Consumer, null, this._render.bind(this));\n    }\n  }]);\n\n  return Source;\n}(PureComponent);\n\n_defineProperty(Source, \"propTypes\", propTypes);\n\nexport { Source as default };","map":null,"metadata":{},"sourceType":"module"}