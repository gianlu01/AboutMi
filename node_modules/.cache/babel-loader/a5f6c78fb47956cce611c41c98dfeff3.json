{"ast":null,"code":"const euclideanDistance = require('./euclidean_distance');\n\nconst TOLERANCE = 25;\nconst INTERVAL = 250;\n\nmodule.exports = function isTap(start, end, options = {}) {\n  const tolerance = options.tolerance != null ? options.tolerance : TOLERANCE;\n  const interval = options.interval != null ? options.interval : INTERVAL;\n  start.point = start.point || end.point;\n  start.time = start.time || end.time;\n  const moveDistance = euclideanDistance(start.point, end.point);\n  return moveDistance < tolerance && end.time - start.time < interval;\n};","map":{"version":3,"sources":["/home/gianluca/Documenti/Scuola/Informatica/Progetto/AboutMi/node_modules/@mapbox/mapbox-gl-draw/src/lib/is_tap.js"],"names":["euclideanDistance","require","TOLERANCE","INTERVAL","module","exports","isTap","start","end","options","tolerance","interval","point","time","moveDistance"],"mappings":"AAAA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,sBAAD,CAAjC;;AAEA,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAMC,QAAQ,GAAG,GAAjB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,OAAO,GAAG,EAArC,EAAyC;AACxD,QAAMC,SAAS,GAAID,OAAO,CAACC,SAAR,IAAqB,IAAtB,GAA8BD,OAAO,CAACC,SAAtC,GAAkDR,SAApE;AACA,QAAMS,QAAQ,GAAIF,OAAO,CAACE,QAAR,IAAoB,IAArB,GAA6BF,OAAO,CAACE,QAArC,GAAgDR,QAAjE;AAEAI,EAAAA,KAAK,CAACK,KAAN,GAAcL,KAAK,CAACK,KAAN,IAAeJ,GAAG,CAACI,KAAjC;AACAL,EAAAA,KAAK,CAACM,IAAN,GAAaN,KAAK,CAACM,IAAN,IAAcL,GAAG,CAACK,IAA/B;AACA,QAAMC,YAAY,GAAGd,iBAAiB,CAACO,KAAK,CAACK,KAAP,EAAcJ,GAAG,CAACI,KAAlB,CAAtC;AAEA,SAAOE,YAAY,GAAGJ,SAAf,IAA6BF,GAAG,CAACK,IAAJ,GAAWN,KAAK,CAACM,IAAlB,GAA0BF,QAA7D;AACD,CATD","sourcesContent":["const euclideanDistance = require('./euclidean_distance');\n\nconst TOLERANCE = 25;\nconst INTERVAL = 250;\n\nmodule.exports = function isTap(start, end, options = {}) {\n  const tolerance = (options.tolerance != null) ? options.tolerance : TOLERANCE;\n  const interval = (options.interval != null) ? options.interval : INTERVAL;\n\n  start.point = start.point || end.point;\n  start.time = start.time || end.time;\n  const moveDistance = euclideanDistance(start.point, end.point);\n\n  return moveDistance < tolerance && (end.time - start.time) < interval;\n};\n"]},"metadata":{},"sourceType":"script"}