{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"../constants\");\n\nvar _baseMode = _interopRequireDefault(require(\"./base-mode\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar EditingMode =\n/*#__PURE__*/\nfunction (_BaseMode) {\n  _inherits(EditingMode, _BaseMode);\n\n  function EditingMode() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditingMode);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditingMode)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function (event, props) {\n      var pickedObject = event.picks && event.picks[0] && event.picks[0].object;\n      var selectedFeatureIndex = props.selectedIndexes && props.selectedIndexes[0];\n\n      if (!pickedObject || pickedObject.featureIndex !== selectedFeatureIndex) {\n        return;\n      }\n\n      var featureIndex = pickedObject.featureIndex,\n          index = pickedObject.index;\n\n      var feature = _this.getSelectedFeature(props, featureIndex);\n\n      if (feature && (feature.geometry.type === _constants.RENDER_TYPE.POLYGON || feature.geometry.type === _constants.RENDER_TYPE.LINE_STRING) && pickedObject.type === _constants.ELEMENT_TYPE.SEGMENT) {\n        var coordinates = (0, _utils.getFeatureCoordinates)(feature);\n\n        if (!coordinates) {\n          return;\n        }\n\n        var insertIndex = (index + 1) % coordinates.length;\n        var positionIndexes = feature.geometry.type === _constants.RENDER_TYPE.POLYGON ? [0, insertIndex] : [insertIndex];\n\n        var insertMapCoords = _this._getPointOnSegment(feature, pickedObject, event.mapCoords);\n\n        var updatedData = props.data.addPosition(featureIndex, positionIndexes, insertMapCoords).getObject();\n        props.onEdit({\n          editType: _constants.EDIT_TYPE.ADD_POSITION,\n          updatedData: updatedData,\n          editContext: [{\n            featureIndex: featureIndex,\n            editHandleIndex: insertIndex,\n            screenCoords: props.viewport && props.viewport.project(insertMapCoords),\n            mapCoords: insertMapCoords\n          }]\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_handleDragging\", function (event, props) {\n      var onEdit = props.onEdit;\n\n      var selectedFeature = _this.getSelectedFeature(props); // nothing clicked\n\n\n      var isDragging = event.isDragging,\n          pointerDownPicks = event.pointerDownPicks,\n          screenCoords = event.screenCoords;\n      var lastPointerMoveEvent = props.lastPointerMoveEvent;\n      var clickedObject = pointerDownPicks && pointerDownPicks[0] && pointerDownPicks[0].object;\n\n      if (!clickedObject || !(0, _utils.isNumeric)(clickedObject.featureIndex)) {\n        return;\n      }\n\n      var editHandleIndex = clickedObject.index; // not dragging\n\n      var updatedData = null;\n      var editType = isDragging ? _constants.EDIT_TYPE.MOVE_POSITION : _constants.EDIT_TYPE.FINISH_MOVE_POSITION;\n\n      switch (clickedObject.type) {\n        case _constants.ELEMENT_TYPE.FEATURE:\n        case _constants.ELEMENT_TYPE.FILL:\n        case _constants.ELEMENT_TYPE.SEGMENT:\n          // dragging feature\n          var dx = screenCoords[0] - lastPointerMoveEvent.screenCoords[0];\n          var dy = screenCoords[1] - lastPointerMoveEvent.screenCoords[1];\n          updatedData = _this._updateFeature(props, 'feature', {\n            dx: dx,\n            dy: dy\n          });\n          onEdit({\n            editType: editType,\n            updatedData: updatedData,\n            editContext: null\n          });\n          break;\n\n        case _constants.ELEMENT_TYPE.EDIT_HANDLE:\n          // dragging editHandle\n          // dragging rectangle or other shapes\n          var updateType = selectedFeature.properties.renderType === _constants.RENDER_TYPE.RECTANGLE ? 'rectangle' : 'editHandle';\n          updatedData = _this._updateFeature(props, updateType, {\n            editHandleIndex: editHandleIndex,\n            mapCoords: event.mapCoords\n          });\n          onEdit({\n            editType: editType,\n            updatedData: updatedData,\n            editContext: null\n          });\n          break;\n\n        default:\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handlePointerMove\", function (event, props) {\n      // no selected feature\n      var selectedFeature = _this.getSelectedFeature(props);\n\n      if (!selectedFeature) {\n        return;\n      }\n\n      if (!event.isDragging) {\n        return;\n      }\n\n      _this._handleDragging(event, props);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_updateFeature\", function (props, type) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var data = props.data,\n          selectedIndexes = props.selectedIndexes,\n          viewport = props.viewport;\n      var featureIndex = selectedIndexes && selectedIndexes[0];\n\n      var feature = _this.getSelectedFeature(props, featureIndex);\n\n      var geometry = null;\n      var coordinates = (0, _utils.getFeatureCoordinates)(feature);\n\n      if (!coordinates) {\n        return null;\n      }\n\n      var newCoordinates = _toConsumableArray(coordinates);\n\n      switch (type) {\n        case 'editHandle':\n          var positionIndexes = feature.geometry.type === _constants.GEOJSON_TYPE.POLYGON ? [0, options.editHandleIndex] : [options.editHandleIndex];\n          return data.replacePosition(featureIndex, positionIndexes, options.mapCoords).getObject();\n\n        case 'feature':\n          var dx = options.dx,\n              dy = options.dy;\n          newCoordinates = newCoordinates.map(function (mapCoords) {\n            var pixels = viewport && viewport.project(mapCoords);\n\n            if (pixels) {\n              pixels[0] += dx;\n              pixels[1] += dy;\n              return viewport && viewport.unproject(pixels);\n            }\n\n            return null;\n          }).filter(Boolean);\n          geometry = {\n            type: feature.geometry.type,\n            coordinates: feature.geometry.type === _constants.GEOJSON_TYPE.POLYGON ? [newCoordinates] : newCoordinates\n          };\n          return data.replaceGeometry(featureIndex, geometry).getObject();\n\n        case 'rectangle':\n          // moved editHandleIndex and destination mapCoords\n          newCoordinates = (0, _utils.updateRectanglePosition)(feature, options.editHandleIndex, options.mapCoords);\n          geometry = {\n            type: _constants.GEOJSON_TYPE.POLYGON,\n            coordinates: newCoordinates\n          };\n          return data.replaceGeometry(featureIndex, geometry).getObject();\n\n        default:\n          return data && data.getObject();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getCursorEditHandle\", function (event, feature) {\n      var isDragging = event.isDragging,\n          picks = event.picks; // if not pick segment\n\n      var pickedObject = picks && picks[0] && picks[0].object;\n\n      if (!pickedObject || !(0, _utils.isNumeric)(pickedObject.featureIndex) || pickedObject.type !== _constants.ELEMENT_TYPE.SEGMENT) {\n        return null;\n      } // if dragging or feature is neither polygon nor line string\n\n\n      if (isDragging || feature.properties.renderType !== _constants.GEOJSON_TYPE.POLYGON && feature.properties.renderType !== _constants.GEOJSON_TYPE.LINE_STRING) {\n        return null;\n      }\n\n      var insertMapCoords = _this._getPointOnSegment(feature, pickedObject, event.mapCoords);\n\n      if (!insertMapCoords) {\n        return null;\n      }\n\n      return {\n        type: 'Feature',\n        properties: {\n          guideType: _constants.GUIDE_TYPE.CURSOR_EDIT_HANDLE,\n          renderType: feature.properties.renderType,\n          positionIndexes: [null]\n        },\n        geometry: {\n          type: _constants.GEOJSON_TYPE.POINT,\n          coordinates: [insertMapCoords]\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getGuides\", function (props) {\n      var selectedFeature = _this.getSelectedFeature(props);\n\n      var selectedFeatureIndex = props.selectedIndexes && props.selectedIndexes[0];\n\n      if (!selectedFeature || selectedFeature.geometry.type === _constants.GEOJSON_TYPE.POINT) {\n        return null;\n      }\n\n      var event = props.lastPointerMoveEvent; // feature editHandles\n\n      var editHandles = _this.getEditHandlesFromFeature(selectedFeature, selectedFeatureIndex) || []; // cursor editHandle\n\n      var cursorEditHandle = _this._getCursorEditHandle(event, selectedFeature);\n\n      if (cursorEditHandle) {\n        editHandles.push(_this._getCursorEditHandle(event, selectedFeature));\n      }\n\n      return {\n        editHandles: editHandles.length ? editHandles : null\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(EditingMode, [{\n    key: \"handleStopDragging\",\n    value: function handleStopDragging(event, props) {\n      // replace point\n      var pickedObject = event.picks && event.picks[0] && event.picks[0].object;\n\n      if (!pickedObject || !(0, _utils.isNumeric)(pickedObject.featureIndex)) {\n        return;\n      }\n\n      switch (pickedObject.type) {\n        case _constants.ELEMENT_TYPE.FEATURE:\n        case _constants.ELEMENT_TYPE.EDIT_HANDLE:\n          this._handleDragging(event, props);\n\n          break;\n\n        default:\n      }\n    }\n  }, {\n    key: \"_getPointOnSegment\",\n    value: function _getPointOnSegment(feature, pickedObject, pickedMapCoords) {\n      var coordinates = (0, _utils.getFeatureCoordinates)(feature);\n\n      if (!coordinates) {\n        return null;\n      }\n\n      var srcVertexIndex = pickedObject.index;\n      var targetVertexIndex = pickedObject.index + 1;\n      return (0, _utils.findClosestPointOnLineSegment)(coordinates[srcVertexIndex], coordinates[targetVertexIndex], pickedMapCoords);\n    }\n  }]);\n\n  return EditingMode;\n}(_baseMode.default);\n\nexports.default = EditingMode;","map":null,"metadata":{},"sourceType":"script"}