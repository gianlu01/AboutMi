{"ast":null,"code":"/**\r\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\r\n *\r\n * @name feature\r\n * @param {Geometry} geometry input geometry\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature} a GeoJSON Feature\r\n * @example\r\n * var geometry = {\r\n *   \"type\": \"Point\",\r\n *   \"coordinates\": [110, 50]\r\n * };\r\n *\r\n * var feature = turf.feature(geometry);\r\n *\r\n * //=feature\r\n */\nfunction feature(geometry, properties, bbox, id) {\n  if (geometry === undefined) throw new Error('geometry is required');\n  if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');\n  if (bbox && bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n  if (id && ['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\n  var feat = {\n    type: 'Feature'\n  };\n  if (id) feat.id = id;\n  if (bbox) feat.bbox = bbox;\n  feat.properties = properties || {};\n  feat.geometry = geometry;\n  return feat;\n}\n/**\r\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\r\n * For GeometryCollection type use `helpers.geometryCollection`\r\n *\r\n * @name geometry\r\n * @param {string} type Geometry Type\r\n * @param {Array<number>} coordinates Coordinates\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @returns {Geometry} a GeoJSON Geometry\r\n * @example\r\n * var type = 'Point';\r\n * var coordinates = [110, 50];\r\n *\r\n * var geometry = turf.geometry(type, coordinates);\r\n *\r\n * //=geometry\r\n */\n\n\nfunction geometry(type, coordinates, bbox) {\n  // Validation\n  if (!type) throw new Error('type is required');\n  if (!coordinates) throw new Error('coordinates is required');\n  if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n  if (bbox && bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n  var geom;\n\n  switch (type) {\n    case 'Point':\n      geom = point(coordinates).geometry;\n      break;\n\n    case 'LineString':\n      geom = lineString(coordinates).geometry;\n      break;\n\n    case 'Polygon':\n      geom = polygon(coordinates).geometry;\n      break;\n\n    case 'MultiPoint':\n      geom = multiPoint(coordinates).geometry;\n      break;\n\n    case 'MultiLineString':\n      geom = multiLineString(coordinates).geometry;\n      break;\n\n    case 'MultiPolygon':\n      geom = multiPolygon(coordinates).geometry;\n      break;\n\n    default:\n      throw new Error(type + ' is invalid');\n  }\n\n  if (bbox) geom.bbox = bbox;\n  return geom;\n}\n/**\r\n * Takes coordinates and properties (optional) and returns a new {@link Point} feature.\r\n *\r\n * @name point\r\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<Point>} a Point feature\r\n * @example\r\n * var point = turf.point([-75.343, 39.984]);\r\n *\r\n * //=point\r\n */\n\n\nfunction point(coordinates, properties, bbox, id) {\n  if (!coordinates) throw new Error('No coordinates passed');\n  if (coordinates.length === undefined) throw new Error('Coordinates must be an array');\n  if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');\n  if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) throw new Error('Coordinates must contain numbers');\n  return feature({\n    type: 'Point',\n    coordinates: coordinates\n  }, properties, bbox, id);\n}\n/**\r\n * Takes an array of LinearRings and optionally an {@link Object} with properties and returns a {@link Polygon} feature.\r\n *\r\n * @name polygon\r\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<Polygon>} a Polygon feature\r\n * @throws {Error} throw an error if a LinearRing of the polygon has too few positions\r\n * or if a LinearRing of the Polygon does not have matching Positions at the beginning & end.\r\n * @example\r\n * var polygon = turf.polygon([[\r\n *   [-2.275543, 53.464547],\r\n *   [-2.275543, 53.489271],\r\n *   [-2.215118, 53.489271],\r\n *   [-2.215118, 53.464547],\r\n *   [-2.275543, 53.464547]\r\n * ]], { name: 'poly1', population: 400});\r\n *\r\n * //=polygon\r\n */\n\n\nfunction polygon(coordinates, properties, bbox, id) {\n  if (!coordinates) throw new Error('No coordinates passed');\n\n  for (var i = 0; i < coordinates.length; i++) {\n    var ring = coordinates[i];\n\n    if (ring.length < 4) {\n      throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n    }\n\n    for (var j = 0; j < ring[ring.length - 1].length; j++) {\n      // Check if first point of Polygon contains two numbers\n      if (i === 0 && j === 0 && !isNumber(ring[0][0]) || !isNumber(ring[0][1])) throw new Error('Coordinates must contain numbers');\n\n      if (ring[ring.length - 1][j] !== ring[0][j]) {\n        throw new Error('First and last Position are not equivalent.');\n      }\n    }\n  }\n\n  return feature({\n    type: 'Polygon',\n    coordinates: coordinates\n  }, properties, bbox, id);\n}\n/**\r\n * Creates a {@link LineString} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name lineString\r\n * @param {Array<Array<number>>} coordinates an array of Positions\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<LineString>} a LineString feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var linestring1 = turf.lineString([\r\n *   [-21.964416, 64.148203],\r\n *   [-21.956176, 64.141316],\r\n *   [-21.93901, 64.135924],\r\n *   [-21.927337, 64.136673]\r\n * ]);\r\n * var linestring2 = turf.lineString([\r\n *   [-21.929054, 64.127985],\r\n *   [-21.912918, 64.134726],\r\n *   [-21.916007, 64.141016],\r\n *   [-21.930084, 64.14446]\r\n * ], {name: 'line 1', distance: 145});\r\n *\r\n * //=linestring1\r\n *\r\n * //=linestring2\r\n */\n\n\nfunction lineString(coordinates, properties, bbox, id) {\n  if (!coordinates) throw new Error('No coordinates passed');\n  if (coordinates.length < 2) throw new Error('Coordinates must be an array of two or more positions'); // Check if first point of LineString contains two numbers\n\n  if (!isNumber(coordinates[0][1]) || !isNumber(coordinates[0][1])) throw new Error('Coordinates must contain numbers');\n  return feature({\n    type: 'LineString',\n    coordinates: coordinates\n  }, properties, bbox, id);\n}\n/**\r\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\r\n *\r\n * @name featureCollection\r\n * @param {Feature[]} features input features\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {FeatureCollection} a FeatureCollection of input features\r\n * @example\r\n * var features = [\r\n *  turf.point([-75.343, 39.984], {name: 'Location A'}),\r\n *  turf.point([-75.833, 39.284], {name: 'Location B'}),\r\n *  turf.point([-75.534, 39.123], {name: 'Location C'})\r\n * ];\r\n *\r\n * var collection = turf.featureCollection(features);\r\n *\r\n * //=collection\r\n */\n\n\nfunction featureCollection(features, bbox, id) {\n  if (!features) throw new Error('No features passed');\n  if (!Array.isArray(features)) throw new Error('features must be an Array');\n  if (bbox && bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n  if (id && ['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\n  var fc = {\n    type: 'FeatureCollection'\n  };\n  if (id) fc.id = id;\n  if (bbox) fc.bbox = bbox;\n  fc.features = features;\n  return fc;\n}\n/**\r\n * Creates a {@link Feature<MultiLineString>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name multiLineString\r\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<MultiLineString>} a MultiLineString feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\r\n *\r\n * //=multiLine\r\n */\n\n\nfunction multiLineString(coordinates, properties, bbox, id) {\n  if (!coordinates) throw new Error('No coordinates passed');\n  return feature({\n    type: 'MultiLineString',\n    coordinates: coordinates\n  }, properties, bbox, id);\n}\n/**\r\n * Creates a {@link Feature<MultiPoint>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name multiPoint\r\n * @param {Array<Array<number>>} coordinates an array of Positions\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<MultiPoint>} a MultiPoint feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\r\n *\r\n * //=multiPt\r\n */\n\n\nfunction multiPoint(coordinates, properties, bbox, id) {\n  if (!coordinates) throw new Error('No coordinates passed');\n  return feature({\n    type: 'MultiPoint',\n    coordinates: coordinates\n  }, properties, bbox, id);\n}\n/**\r\n * Creates a {@link Feature<MultiPolygon>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name multiPolygon\r\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<MultiPolygon>} a multipolygon feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\r\n *\r\n * //=multiPoly\r\n *\r\n */\n\n\nfunction multiPolygon(coordinates, properties, bbox, id) {\n  if (!coordinates) throw new Error('No coordinates passed');\n  return feature({\n    type: 'MultiPolygon',\n    coordinates: coordinates\n  }, properties, bbox, id);\n}\n/**\r\n * Creates a {@link Feature<GeometryCollection>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name geometryCollection\r\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\r\n * @example\r\n * var pt = {\r\n *     \"type\": \"Point\",\r\n *       \"coordinates\": [100, 0]\r\n *     };\r\n * var line = {\r\n *     \"type\": \"LineString\",\r\n *     \"coordinates\": [ [101, 0], [102, 1] ]\r\n *   };\r\n * var collection = turf.geometryCollection([pt, line]);\r\n *\r\n * //=collection\r\n */\n\n\nfunction geometryCollection(geometries, properties, bbox, id) {\n  if (!geometries) throw new Error('geometries is required');\n  if (!Array.isArray(geometries)) throw new Error('geometries must be an Array');\n  return feature({\n    type: 'GeometryCollection',\n    geometries: geometries\n  }, properties, bbox, id);\n} // https://en.wikipedia.org/wiki/Great-circle_distance#Radius_for_spherical_Earth\n\n\nvar factors = {\n  miles: 3960,\n  nauticalmiles: 3441.145,\n  degrees: 57.2957795,\n  radians: 1,\n  inches: 250905600,\n  yards: 6969600,\n  meters: 6373000,\n  metres: 6373000,\n  centimeters: 6.373e+8,\n  centimetres: 6.373e+8,\n  kilometers: 6373,\n  kilometres: 6373,\n  feet: 20908792.65\n};\nvar areaFactors = {\n  kilometers: 0.000001,\n  kilometres: 0.000001,\n  meters: 1,\n  metres: 1,\n  centimetres: 10000,\n  millimeter: 1000000,\n  acres: 0.000247105,\n  miles: 3.86e-7,\n  yards: 1.195990046,\n  feet: 10.763910417,\n  inches: 1550.003100006\n};\n/**\r\n * Round number to precision\r\n *\r\n * @param {number} num Number\r\n * @param {number} [precision=0] Precision\r\n * @returns {number} rounded number\r\n * @example\r\n * turf.round(120.4321)\r\n * //=120\r\n *\r\n * turf.round(120.4321, 2)\r\n * //=120.43\r\n */\n\nfunction round(num, precision) {\n  if (num === undefined || num === null || isNaN(num)) throw new Error('num is required');\n  if (precision && !(precision >= 0)) throw new Error('precision must be a positive number');\n  var multiplier = Math.pow(10, precision || 0);\n  return Math.round(num * multiplier) / multiplier;\n}\n/**\r\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\r\n *\r\n * @name radiansToDistance\r\n * @param {number} radians in radians across the sphere\r\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\r\n * @returns {number} distance\r\n */\n\n\nfunction radiansToDistance(radians, units) {\n  if (radians === undefined || radians === null) throw new Error('radians is required');\n  var factor = factors[units || 'kilometers'];\n  if (!factor) throw new Error('units is invalid');\n  return radians * factor;\n}\n/**\r\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\r\n *\r\n * @name distanceToRadians\r\n * @param {number} distance in real units\r\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\r\n * @returns {number} radians\r\n */\n\n\nfunction distanceToRadians(distance, units) {\n  if (distance === undefined || distance === null) throw new Error('distance is required');\n  var factor = factors[units || 'kilometers'];\n  if (!factor) throw new Error('units is invalid');\n  return distance / factor;\n}\n/**\r\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\r\n *\r\n * @name distanceToDegrees\r\n * @param {number} distance in real units\r\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\r\n * @returns {number} degrees\r\n */\n\n\nfunction distanceToDegrees(distance, units) {\n  return radians2degrees(distanceToRadians(distance, units));\n}\n/**\r\n * Converts any bearing angle from the north line direction (positive clockwise)\r\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\r\n *\r\n * @name bearingToAngle\r\n * @param {number} bearing angle, between -180 and +180 degrees\r\n * @returns {number} angle between 0 and 360 degrees\r\n */\n\n\nfunction bearingToAngle(bearing) {\n  if (bearing === null || bearing === undefined) throw new Error('bearing is required');\n  var angle = bearing % 360;\n  if (angle < 0) angle += 360;\n  return angle;\n}\n/**\r\n * Converts an angle in radians to degrees\r\n *\r\n * @name radians2degrees\r\n * @param {number} radians angle in radians\r\n * @returns {number} degrees between 0 and 360 degrees\r\n */\n\n\nfunction radians2degrees(radians) {\n  if (radians === null || radians === undefined) throw new Error('radians is required');\n  var degrees = radians % (2 * Math.PI);\n  return degrees * 180 / Math.PI;\n}\n/**\r\n * Converts an angle in degrees to radians\r\n *\r\n * @name degrees2radians\r\n * @param {number} degrees angle between 0 and 360 degrees\r\n * @returns {number} angle in radians\r\n */\n\n\nfunction degrees2radians(degrees) {\n  if (degrees === null || degrees === undefined) throw new Error('degrees is required');\n  var radians = degrees % 360;\n  return radians * Math.PI / 180;\n}\n/**\r\n * Converts a distance to the requested unit.\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\r\n *\r\n * @param {number} distance to be converted\r\n * @param {string} originalUnit of the distance\r\n * @param {string} [finalUnit=kilometers] returned unit\r\n * @returns {number} the converted distance\r\n */\n\n\nfunction convertDistance(distance, originalUnit, finalUnit) {\n  if (distance === null || distance === undefined) throw new Error('distance is required');\n  if (!(distance >= 0)) throw new Error('distance must be a positive number');\n  var convertedDistance = radiansToDistance(distanceToRadians(distance, originalUnit), finalUnit || 'kilometers');\n  return convertedDistance;\n}\n/**\r\n * Converts a area to the requested unit.\r\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeter, acre, mile, yard, foot, inch\r\n * @param {number} area to be converted\r\n * @param {string} [originalUnit=meters] of the distance\r\n * @param {string} [finalUnit=kilometers] returned unit\r\n * @returns {number} the converted distance\r\n */\n\n\nfunction convertArea(area, originalUnit, finalUnit) {\n  if (area === null || area === undefined) throw new Error('area is required');\n  if (!(area >= 0)) throw new Error('area must be a positive number');\n  var startFactor = areaFactors[originalUnit || 'meters'];\n  if (!startFactor) throw new Error('invalid original units');\n  var finalFactor = areaFactors[finalUnit || 'kilometers'];\n  if (!finalFactor) throw new Error('invalid final units');\n  return area / startFactor * finalFactor;\n}\n/**\r\n * isNumber\r\n *\r\n * @param {*} num Number to validate\r\n * @returns {boolean} true/false\r\n * @example\r\n * turf.isNumber(123)\r\n * //=true\r\n * turf.isNumber('foo')\r\n * //=false\r\n */\n\n\nfunction isNumber(num) {\n  return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n\nmodule.exports = {\n  feature: feature,\n  geometry: geometry,\n  featureCollection: featureCollection,\n  geometryCollection: geometryCollection,\n  point: point,\n  multiPoint: multiPoint,\n  lineString: lineString,\n  multiLineString: multiLineString,\n  polygon: polygon,\n  multiPolygon: multiPolygon,\n  radiansToDistance: radiansToDistance,\n  distanceToRadians: distanceToRadians,\n  distanceToDegrees: distanceToDegrees,\n  radians2degrees: radians2degrees,\n  degrees2radians: degrees2radians,\n  bearingToAngle: bearingToAngle,\n  convertDistance: convertDistance,\n  convertArea: convertArea,\n  round: round,\n  isNumber: isNumber\n};","map":{"version":3,"sources":["C:/Users/michele/Desktop/IT/Code/react/aboutmi/node_modules/react-mapbox-gl/node_modules/@turf/helpers/index.js"],"names":["feature","geometry","properties","bbox","id","undefined","Error","constructor","Object","length","indexOf","feat","type","coordinates","Array","isArray","geom","point","lineString","polygon","multiPoint","multiLineString","multiPolygon","isNumber","i","ring","j","featureCollection","features","fc","geometryCollection","geometries","factors","miles","nauticalmiles","degrees","radians","inches","yards","meters","metres","centimeters","centimetres","kilometers","kilometres","feet","areaFactors","millimeter","acres","round","num","precision","isNaN","multiplier","Math","pow","radiansToDistance","units","factor","distanceToRadians","distance","distanceToDegrees","radians2degrees","bearingToAngle","bearing","angle","PI","degrees2radians","convertDistance","originalUnit","finalUnit","convertedDistance","convertArea","area","startFactor","finalFactor","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\r\n *\r\n * @name feature\r\n * @param {Geometry} geometry input geometry\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature} a GeoJSON Feature\r\n * @example\r\n * var geometry = {\r\n *   \"type\": \"Point\",\r\n *   \"coordinates\": [110, 50]\r\n * };\r\n *\r\n * var feature = turf.feature(geometry);\r\n *\r\n * //=feature\r\n */\r\nfunction feature(geometry, properties, bbox, id) {\r\n    if (geometry === undefined) throw new Error('geometry is required');\r\n    if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');\r\n    if (bbox && bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\r\n    if (id && ['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\r\n\r\n    var feat = {type: 'Feature'};\r\n    if (id) feat.id = id;\r\n    if (bbox) feat.bbox = bbox;\r\n    feat.properties = properties || {};\r\n    feat.geometry = geometry;\r\n    return feat;\r\n}\r\n\r\n/**\r\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\r\n * For GeometryCollection type use `helpers.geometryCollection`\r\n *\r\n * @name geometry\r\n * @param {string} type Geometry Type\r\n * @param {Array<number>} coordinates Coordinates\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @returns {Geometry} a GeoJSON Geometry\r\n * @example\r\n * var type = 'Point';\r\n * var coordinates = [110, 50];\r\n *\r\n * var geometry = turf.geometry(type, coordinates);\r\n *\r\n * //=geometry\r\n */\r\nfunction geometry(type, coordinates, bbox) {\r\n    // Validation\r\n    if (!type) throw new Error('type is required');\r\n    if (!coordinates) throw new Error('coordinates is required');\r\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\r\n    if (bbox && bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\r\n\r\n    var geom;\r\n    switch (type) {\r\n    case 'Point': geom = point(coordinates).geometry; break;\r\n    case 'LineString': geom = lineString(coordinates).geometry; break;\r\n    case 'Polygon': geom = polygon(coordinates).geometry; break;\r\n    case 'MultiPoint': geom = multiPoint(coordinates).geometry; break;\r\n    case 'MultiLineString': geom = multiLineString(coordinates).geometry; break;\r\n    case 'MultiPolygon': geom = multiPolygon(coordinates).geometry; break;\r\n    default: throw new Error(type + ' is invalid');\r\n    }\r\n    if (bbox) geom.bbox = bbox;\r\n    return geom;\r\n}\r\n\r\n/**\r\n * Takes coordinates and properties (optional) and returns a new {@link Point} feature.\r\n *\r\n * @name point\r\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<Point>} a Point feature\r\n * @example\r\n * var point = turf.point([-75.343, 39.984]);\r\n *\r\n * //=point\r\n */\r\nfunction point(coordinates, properties, bbox, id) {\r\n    if (!coordinates) throw new Error('No coordinates passed');\r\n    if (coordinates.length === undefined) throw new Error('Coordinates must be an array');\r\n    if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');\r\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) throw new Error('Coordinates must contain numbers');\r\n\r\n    return feature({\r\n        type: 'Point',\r\n        coordinates: coordinates\r\n    }, properties, bbox, id);\r\n}\r\n\r\n/**\r\n * Takes an array of LinearRings and optionally an {@link Object} with properties and returns a {@link Polygon} feature.\r\n *\r\n * @name polygon\r\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<Polygon>} a Polygon feature\r\n * @throws {Error} throw an error if a LinearRing of the polygon has too few positions\r\n * or if a LinearRing of the Polygon does not have matching Positions at the beginning & end.\r\n * @example\r\n * var polygon = turf.polygon([[\r\n *   [-2.275543, 53.464547],\r\n *   [-2.275543, 53.489271],\r\n *   [-2.215118, 53.489271],\r\n *   [-2.215118, 53.464547],\r\n *   [-2.275543, 53.464547]\r\n * ]], { name: 'poly1', population: 400});\r\n *\r\n * //=polygon\r\n */\r\nfunction polygon(coordinates, properties, bbox, id) {\r\n    if (!coordinates) throw new Error('No coordinates passed');\r\n\r\n    for (var i = 0; i < coordinates.length; i++) {\r\n        var ring = coordinates[i];\r\n        if (ring.length < 4) {\r\n            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\r\n        }\r\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\r\n            // Check if first point of Polygon contains two numbers\r\n            if (i === 0 && j === 0 && !isNumber(ring[0][0]) || !isNumber(ring[0][1])) throw new Error('Coordinates must contain numbers');\r\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\r\n                throw new Error('First and last Position are not equivalent.');\r\n            }\r\n        }\r\n    }\r\n\r\n    return feature({\r\n        type: 'Polygon',\r\n        coordinates: coordinates\r\n    }, properties, bbox, id);\r\n}\r\n\r\n/**\r\n * Creates a {@link LineString} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name lineString\r\n * @param {Array<Array<number>>} coordinates an array of Positions\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<LineString>} a LineString feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var linestring1 = turf.lineString([\r\n *   [-21.964416, 64.148203],\r\n *   [-21.956176, 64.141316],\r\n *   [-21.93901, 64.135924],\r\n *   [-21.927337, 64.136673]\r\n * ]);\r\n * var linestring2 = turf.lineString([\r\n *   [-21.929054, 64.127985],\r\n *   [-21.912918, 64.134726],\r\n *   [-21.916007, 64.141016],\r\n *   [-21.930084, 64.14446]\r\n * ], {name: 'line 1', distance: 145});\r\n *\r\n * //=linestring1\r\n *\r\n * //=linestring2\r\n */\r\nfunction lineString(coordinates, properties, bbox, id) {\r\n    if (!coordinates) throw new Error('No coordinates passed');\r\n    if (coordinates.length < 2) throw new Error('Coordinates must be an array of two or more positions');\r\n    // Check if first point of LineString contains two numbers\r\n    if (!isNumber(coordinates[0][1]) || !isNumber(coordinates[0][1])) throw new Error('Coordinates must contain numbers');\r\n\r\n    return feature({\r\n        type: 'LineString',\r\n        coordinates: coordinates\r\n    }, properties, bbox, id);\r\n}\r\n\r\n/**\r\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\r\n *\r\n * @name featureCollection\r\n * @param {Feature[]} features input features\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {FeatureCollection} a FeatureCollection of input features\r\n * @example\r\n * var features = [\r\n *  turf.point([-75.343, 39.984], {name: 'Location A'}),\r\n *  turf.point([-75.833, 39.284], {name: 'Location B'}),\r\n *  turf.point([-75.534, 39.123], {name: 'Location C'})\r\n * ];\r\n *\r\n * var collection = turf.featureCollection(features);\r\n *\r\n * //=collection\r\n */\r\nfunction featureCollection(features, bbox, id) {\r\n    if (!features) throw new Error('No features passed');\r\n    if (!Array.isArray(features)) throw new Error('features must be an Array');\r\n    if (bbox && bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\r\n    if (id && ['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\r\n\r\n    var fc = {type: 'FeatureCollection'};\r\n    if (id) fc.id = id;\r\n    if (bbox) fc.bbox = bbox;\r\n    fc.features = features;\r\n    return fc;\r\n}\r\n\r\n/**\r\n * Creates a {@link Feature<MultiLineString>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name multiLineString\r\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<MultiLineString>} a MultiLineString feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\r\n *\r\n * //=multiLine\r\n */\r\nfunction multiLineString(coordinates, properties, bbox, id) {\r\n    if (!coordinates) throw new Error('No coordinates passed');\r\n\r\n    return feature({\r\n        type: 'MultiLineString',\r\n        coordinates: coordinates\r\n    }, properties, bbox, id);\r\n}\r\n\r\n/**\r\n * Creates a {@link Feature<MultiPoint>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name multiPoint\r\n * @param {Array<Array<number>>} coordinates an array of Positions\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<MultiPoint>} a MultiPoint feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\r\n *\r\n * //=multiPt\r\n */\r\nfunction multiPoint(coordinates, properties, bbox, id) {\r\n    if (!coordinates) throw new Error('No coordinates passed');\r\n\r\n    return feature({\r\n        type: 'MultiPoint',\r\n        coordinates: coordinates\r\n    }, properties, bbox, id);\r\n}\r\n\r\n/**\r\n * Creates a {@link Feature<MultiPolygon>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name multiPolygon\r\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<MultiPolygon>} a multipolygon feature\r\n * @throws {Error} if no coordinates are passed\r\n * @example\r\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\r\n *\r\n * //=multiPoly\r\n *\r\n */\r\nfunction multiPolygon(coordinates, properties, bbox, id) {\r\n    if (!coordinates) throw new Error('No coordinates passed');\r\n\r\n    return feature({\r\n        type: 'MultiPolygon',\r\n        coordinates: coordinates\r\n    }, properties, bbox, id);\r\n}\r\n\r\n/**\r\n * Creates a {@link Feature<GeometryCollection>} based on a\r\n * coordinate array. Properties can be added optionally.\r\n *\r\n * @name geometryCollection\r\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\r\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\r\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\r\n * @param {string|number} [id] Identifier\r\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\r\n * @example\r\n * var pt = {\r\n *     \"type\": \"Point\",\r\n *       \"coordinates\": [100, 0]\r\n *     };\r\n * var line = {\r\n *     \"type\": \"LineString\",\r\n *     \"coordinates\": [ [101, 0], [102, 1] ]\r\n *   };\r\n * var collection = turf.geometryCollection([pt, line]);\r\n *\r\n * //=collection\r\n */\r\nfunction geometryCollection(geometries, properties, bbox, id) {\r\n    if (!geometries) throw new Error('geometries is required');\r\n    if (!Array.isArray(geometries)) throw new Error('geometries must be an Array');\r\n\r\n    return feature({\r\n        type: 'GeometryCollection',\r\n        geometries: geometries\r\n    }, properties, bbox, id);\r\n}\r\n\r\n// https://en.wikipedia.org/wiki/Great-circle_distance#Radius_for_spherical_Earth\r\nvar factors = {\r\n    miles: 3960,\r\n    nauticalmiles: 3441.145,\r\n    degrees: 57.2957795,\r\n    radians: 1,\r\n    inches: 250905600,\r\n    yards: 6969600,\r\n    meters: 6373000,\r\n    metres: 6373000,\r\n    centimeters: 6.373e+8,\r\n    centimetres: 6.373e+8,\r\n    kilometers: 6373,\r\n    kilometres: 6373,\r\n    feet: 20908792.65\r\n};\r\n\r\nvar areaFactors = {\r\n    kilometers: 0.000001,\r\n    kilometres: 0.000001,\r\n    meters: 1,\r\n    metres: 1,\r\n    centimetres: 10000,\r\n    millimeter: 1000000,\r\n    acres: 0.000247105,\r\n    miles: 3.86e-7,\r\n    yards: 1.195990046,\r\n    feet: 10.763910417,\r\n    inches: 1550.003100006\r\n};\r\n/**\r\n * Round number to precision\r\n *\r\n * @param {number} num Number\r\n * @param {number} [precision=0] Precision\r\n * @returns {number} rounded number\r\n * @example\r\n * turf.round(120.4321)\r\n * //=120\r\n *\r\n * turf.round(120.4321, 2)\r\n * //=120.43\r\n */\r\nfunction round(num, precision) {\r\n    if (num === undefined || num === null || isNaN(num)) throw new Error('num is required');\r\n    if (precision && !(precision >= 0)) throw new Error('precision must be a positive number');\r\n    var multiplier = Math.pow(10, precision || 0);\r\n    return Math.round(num * multiplier) / multiplier;\r\n}\r\n\r\n/**\r\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\r\n *\r\n * @name radiansToDistance\r\n * @param {number} radians in radians across the sphere\r\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\r\n * @returns {number} distance\r\n */\r\nfunction radiansToDistance(radians, units) {\r\n    if (radians === undefined || radians === null) throw new Error('radians is required');\r\n\r\n    var factor = factors[units || 'kilometers'];\r\n    if (!factor) throw new Error('units is invalid');\r\n    return radians * factor;\r\n}\r\n\r\n/**\r\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\r\n *\r\n * @name distanceToRadians\r\n * @param {number} distance in real units\r\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\r\n * @returns {number} radians\r\n */\r\nfunction distanceToRadians(distance, units) {\r\n    if (distance === undefined || distance === null) throw new Error('distance is required');\r\n\r\n    var factor = factors[units || 'kilometers'];\r\n    if (!factor) throw new Error('units is invalid');\r\n    return distance / factor;\r\n}\r\n\r\n/**\r\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\r\n *\r\n * @name distanceToDegrees\r\n * @param {number} distance in real units\r\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\r\n * @returns {number} degrees\r\n */\r\nfunction distanceToDegrees(distance, units) {\r\n    return radians2degrees(distanceToRadians(distance, units));\r\n}\r\n\r\n/**\r\n * Converts any bearing angle from the north line direction (positive clockwise)\r\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\r\n *\r\n * @name bearingToAngle\r\n * @param {number} bearing angle, between -180 and +180 degrees\r\n * @returns {number} angle between 0 and 360 degrees\r\n */\r\nfunction bearingToAngle(bearing) {\r\n    if (bearing === null || bearing === undefined) throw new Error('bearing is required');\r\n\r\n    var angle = bearing % 360;\r\n    if (angle < 0) angle += 360;\r\n    return angle;\r\n}\r\n\r\n/**\r\n * Converts an angle in radians to degrees\r\n *\r\n * @name radians2degrees\r\n * @param {number} radians angle in radians\r\n * @returns {number} degrees between 0 and 360 degrees\r\n */\r\nfunction radians2degrees(radians) {\r\n    if (radians === null || radians === undefined) throw new Error('radians is required');\r\n\r\n    var degrees = radians % (2 * Math.PI);\r\n    return degrees * 180 / Math.PI;\r\n}\r\n\r\n/**\r\n * Converts an angle in degrees to radians\r\n *\r\n * @name degrees2radians\r\n * @param {number} degrees angle between 0 and 360 degrees\r\n * @returns {number} angle in radians\r\n */\r\nfunction degrees2radians(degrees) {\r\n    if (degrees === null || degrees === undefined) throw new Error('degrees is required');\r\n\r\n    var radians = degrees % 360;\r\n    return radians * Math.PI / 180;\r\n}\r\n\r\n\r\n/**\r\n * Converts a distance to the requested unit.\r\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\r\n *\r\n * @param {number} distance to be converted\r\n * @param {string} originalUnit of the distance\r\n * @param {string} [finalUnit=kilometers] returned unit\r\n * @returns {number} the converted distance\r\n */\r\nfunction convertDistance(distance, originalUnit, finalUnit) {\r\n    if (distance === null || distance === undefined) throw new Error('distance is required');\r\n    if (!(distance >= 0)) throw new Error('distance must be a positive number');\r\n\r\n    var convertedDistance = radiansToDistance(distanceToRadians(distance, originalUnit), finalUnit || 'kilometers');\r\n    return convertedDistance;\r\n}\r\n\r\n/**\r\n * Converts a area to the requested unit.\r\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeter, acre, mile, yard, foot, inch\r\n * @param {number} area to be converted\r\n * @param {string} [originalUnit=meters] of the distance\r\n * @param {string} [finalUnit=kilometers] returned unit\r\n * @returns {number} the converted distance\r\n */\r\nfunction convertArea(area, originalUnit, finalUnit) {\r\n    if (area === null || area === undefined) throw new Error('area is required');\r\n    if (!(area >= 0)) throw new Error('area must be a positive number');\r\n\r\n    var startFactor = areaFactors[originalUnit || 'meters'];\r\n    if (!startFactor) throw new Error('invalid original units');\r\n\r\n    var finalFactor = areaFactors[finalUnit || 'kilometers'];\r\n    if (!finalFactor) throw new Error('invalid final units');\r\n\r\n    return (area / startFactor) * finalFactor;\r\n}\r\n\r\n/**\r\n * isNumber\r\n *\r\n * @param {*} num Number to validate\r\n * @returns {boolean} true/false\r\n * @example\r\n * turf.isNumber(123)\r\n * //=true\r\n * turf.isNumber('foo')\r\n * //=false\r\n */\r\nfunction isNumber(num) {\r\n    return !isNaN(num) && num !== null && !Array.isArray(num);\r\n}\r\n\r\nmodule.exports = {\r\n    feature: feature,\r\n    geometry: geometry,\r\n    featureCollection: featureCollection,\r\n    geometryCollection: geometryCollection,\r\n    point: point,\r\n    multiPoint: multiPoint,\r\n    lineString: lineString,\r\n    multiLineString: multiLineString,\r\n    polygon: polygon,\r\n    multiPolygon: multiPolygon,\r\n    radiansToDistance: radiansToDistance,\r\n    distanceToRadians: distanceToRadians,\r\n    distanceToDegrees: distanceToDegrees,\r\n    radians2degrees: radians2degrees,\r\n    degrees2radians: degrees2radians,\r\n    bearingToAngle: bearingToAngle,\r\n    convertDistance: convertDistance,\r\n    convertArea: convertArea,\r\n    round: round,\r\n    isNumber: isNumber\r\n};\r\n"]},"metadata":{},"sourceType":"script"}