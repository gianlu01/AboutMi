{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/control/MousePosition\r\n */\n\n\nimport { listen } from '../events.js';\nimport EventType from '../pointer/EventType.js';\nimport { getChangeEventType } from '../Object.js';\nimport Control from './Control.js';\nimport { getTransformFromProjections, identityTransform, get as getProjection, getUserProjection } from '../proj.js';\nimport '@openlayers/pepjs';\n/**\r\n * @type {string}\r\n */\n\nvar PROJECTION = 'projection';\n/**\r\n * @type {string}\r\n */\n\nvar COORDINATE_FORMAT = 'coordinateFormat';\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-mouse-position'] CSS class name.\r\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the\r\n * control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the\r\n * control to be rendered outside of the map's viewport.\r\n * @property {string} [undefinedHTML='&#160;'] Markup to show when coordinates are not\r\n * available (e.g. when the pointer leaves the map viewport).  By default, the last position\r\n * will be replaced with `'&#160;'` (`&nbsp;`) when the pointer leaves the viewport.  To\r\n * retain the last rendered position, set this option to something falsey (like an empty\r\n * string `''`).\r\n */\n\n/**\r\n * @classdesc\r\n * A control to show the 2D coordinates of the mouse cursor. By default, these\r\n * are in the view projection, but can be in any supported projection.\r\n * By default the control is shown in the top right corner of the map, but this\r\n * can be changed by using the css selector `.ol-mouse-position`.\r\n *\r\n * On touch devices, which usually do not have a mouse cursor, the coordinates\r\n * of the currently touched position are shown.\r\n *\r\n * @api\r\n */\n\nvar MousePosition =\n/** @class */\nfunction (_super) {\n  __extends(MousePosition, _super);\n  /**\r\n   * @param {Options=} opt_options Mouse position options.\r\n   */\n\n\n  function MousePosition(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var element = document.createElement('div');\n    element.className = options.className !== undefined ? options.className : 'ol-mouse-position';\n    _this = _super.call(this, {\n      element: element,\n      render: options.render || render,\n      target: options.target\n    }) || this;\n\n    _this.addEventListener(getChangeEventType(PROJECTION), _this.handleProjectionChanged_);\n\n    if (options.coordinateFormat) {\n      _this.setCoordinateFormat(options.coordinateFormat);\n    }\n\n    if (options.projection) {\n      _this.setProjection(options.projection);\n    }\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\n\n\n    _this.undefinedHTML_ = options.undefinedHTML !== undefined ? options.undefinedHTML : '&#160;';\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n\n    _this.renderOnMouseOut_ = !!_this.undefinedHTML_;\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\n\n    _this.renderedHTML_ = element.innerHTML;\n    /**\r\n     * @private\r\n     * @type {?import(\"../proj/Projection.js\").default}\r\n     */\n\n    _this.mapProjection_ = null;\n    /**\r\n     * @private\r\n     * @type {?import(\"../proj.js\").TransformFunction}\r\n     */\n\n    _this.transform_ = null;\n    return _this;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  MousePosition.prototype.handleProjectionChanged_ = function () {\n    this.transform_ = null;\n  };\n  /**\r\n   * Return the coordinate format type used to render the current position or\r\n   * undefined.\r\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\r\n   *     position in.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  MousePosition.prototype.getCoordinateFormat = function () {\n    return (\n      /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */\n      this.get(COORDINATE_FORMAT)\n    );\n  };\n  /**\r\n   * Return the projection that is used to report the mouse position.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\r\n   *     position in.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  MousePosition.prototype.getProjection = function () {\n    return (\n      /** @type {import(\"../proj/Projection.js\").default|undefined} */\n      this.get(PROJECTION)\n    );\n  };\n  /**\r\n   * @param {Event} event Browser event.\r\n   * @protected\r\n   */\n\n\n  MousePosition.prototype.handleMouseMove = function (event) {\n    var map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  };\n  /**\r\n   * @param {Event} event Browser event.\r\n   * @protected\r\n   */\n\n\n  MousePosition.prototype.handleMouseOut = function (event) {\n    this.updateHTML_(null);\n  };\n  /**\r\n   * @inheritDoc\r\n   * @api\r\n   */\n\n\n  MousePosition.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n\n    if (map) {\n      var viewport = map.getViewport();\n      this.listenerKeys.push(listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this));\n\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this));\n      }\n    }\n  };\n  /**\r\n   * Set the coordinate format type used to render the current position.\r\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\r\n   *     position in.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  MousePosition.prototype.setCoordinateFormat = function (format) {\n    this.set(COORDINATE_FORMAT, format);\n  };\n  /**\r\n   * Set the projection that is used to report the mouse position.\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\r\n   *     position in.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  MousePosition.prototype.setProjection = function (projection) {\n    this.set(PROJECTION, getProjection(projection));\n  };\n  /**\r\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @private\r\n   */\n\n\n  MousePosition.prototype.updateHTML_ = function (pixel) {\n    var html = this.undefinedHTML_;\n\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        var projection = this.getProjection();\n\n        if (projection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, projection);\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n\n      var map = this.getMap();\n      var coordinate = map.getCoordinateFromPixelInternal(pixel);\n\n      if (coordinate) {\n        var userProjection = getUserProjection();\n\n        if (userProjection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, userProjection);\n        }\n\n        this.transform_(coordinate, coordinate);\n        var coordinateFormat = this.getCoordinateFormat();\n\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  };\n\n  return MousePosition;\n}(Control);\n/**\r\n * Update the projection. Rendering of the coordinates is done in\r\n * `handleMouseMove` and `handleMouseUp`.\r\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n * @this {MousePosition}\r\n * @api\r\n */\n\n\nexport function render(mapEvent) {\n  var frameState = mapEvent.frameState;\n\n  if (!frameState) {\n    this.mapProjection_ = null;\n  } else {\n    if (this.mapProjection_ != frameState.viewState.projection) {\n      this.mapProjection_ = frameState.viewState.projection;\n      this.transform_ = null;\n    }\n  }\n}\nexport default MousePosition;","map":null,"metadata":{},"sourceType":"module"}