{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/control/Attribution\r\n */\n\n\nimport { equals } from '../array.js';\nimport Control from './Control.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_COLLAPSED } from '../css.js';\nimport { removeChildren, replaceNode } from '../dom.js';\nimport EventType from '../events/EventType.js';\nimport { inView } from '../layer/Layer.js';\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-attribution'] CSS class name.\r\n * @property {HTMLElement|string} [target] Specify a target if you\r\n * want the control to be rendered outside of the map's\r\n * viewport.\r\n * @property {boolean} [collapsible] Specify if attributions can\r\n * be collapsed. If not specified, sources control this behavior with their\r\n * `attributionsCollapsible` setting.\r\n * @property {boolean} [collapsed=true] Specify if attributions should\r\n * be collapsed at startup.\r\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\r\n * @property {string} [label='i'] Text label to use for the\r\n * collapsed attributions button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string|HTMLElement} [collapseLabel='Â»'] Text label to use\r\n * for the expanded attributions button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when\r\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n */\n\n/**\r\n * @classdesc\r\n * Control to show all the attributions associated with the layer sources\r\n * in the map. This control is one of the default controls included in maps.\r\n * By default it will show in the bottom right portion of the map, but this can\r\n * be changed by using a css selector for `.ol-attribution`.\r\n *\r\n * @api\r\n */\n\nvar Attribution =\n/** @class */\nfunction (_super) {\n  __extends(Attribution, _super);\n  /**\r\n   * @param {Options=} opt_options Attribution options.\r\n   */\n\n\n  function Attribution(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    }) || this;\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\n\n    _this.ulElement_ = document.createElement('ul');\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n\n    _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n\n    _this.overrideCollapsible_ = options.collapsible !== undefined;\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n\n    _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!_this.collapsible_) {\n      _this.collapsed_ = false;\n    }\n\n    var className = options.className !== undefined ? options.className : 'ol-attribution';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB';\n\n    if (typeof collapseLabel === 'string') {\n      /**\r\n       * @private\r\n       * @type {HTMLElement}\r\n       */\n      _this.collapseLabel_ = document.createElement('span');\n      _this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      _this.collapseLabel_ = collapseLabel;\n    }\n\n    var label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\r\n       * @private\r\n       * @type {HTMLElement}\r\n       */\n      _this.label_ = document.createElement('span');\n      _this.label_.textContent = label;\n    } else {\n      _this.label_ = label;\n    }\n\n    var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (_this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.ulElement_);\n    element.appendChild(button);\n    /**\r\n     * A list of currently rendered resolutions.\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\n\n    _this.renderedAttributions_ = [];\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n\n    _this.renderedVisible_ = true;\n    return _this;\n  }\n  /**\r\n   * Collect a list of visible attributions and set the collapsible state.\r\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\r\n   * @return {Array<string>} Attributions.\r\n   * @private\r\n   */\n\n\n  Attribution.prototype.collectSourceAttributions_ = function (frameState) {\n    /**\r\n     * Used to determine if an attribution already exists.\r\n     * @type {!Object<string, boolean>}\r\n     */\n    var lookup = {};\n    /**\r\n     * A list of visible attributions.\r\n     * @type {Array<string>}\r\n     */\n\n    var visibleAttributions = [];\n    var layerStatesArray = frameState.layerStatesArray;\n\n    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      var layerState = layerStatesArray[i];\n\n      if (!inView(layerState, frameState.viewState)) {\n        continue;\n      }\n\n      var source =\n      /** @type {import(\"../layer/Layer.js\").default} */\n      layerState.layer.getSource();\n\n      if (!source) {\n        continue;\n      }\n\n      var attributionGetter = source.getAttributions();\n\n      if (!attributionGetter) {\n        continue;\n      }\n\n      var attributions = attributionGetter(frameState);\n\n      if (!attributions) {\n        continue;\n      }\n\n      if (!this.overrideCollapsible_ && source.getAttributionsCollapsible() === false) {\n        this.setCollapsible(false);\n      }\n\n      if (Array.isArray(attributions)) {\n        for (var j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n\n    return visibleAttributions;\n  };\n  /**\r\n   * @private\r\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\r\n   */\n\n\n  Attribution.prototype.updateElement_ = function (frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n\n      return;\n    }\n\n    var attributions = this.collectSourceAttributions_(frameState);\n    var visible = attributions.length > 0;\n\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_); // append the attributions\n\n    for (var i = 0, ii = attributions.length; i < ii; ++i) {\n      var element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  };\n  /**\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */\n\n\n  Attribution.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n  /**\r\n   * @private\r\n   */\n\n\n  Attribution.prototype.handleToggle_ = function () {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n\n    this.collapsed_ = !this.collapsed_;\n  };\n  /**\r\n   * Return `true` if the attribution is collapsible, `false` otherwise.\r\n   * @return {boolean} True if the widget is collapsible.\r\n   * @api\r\n   */\n\n\n  Attribution.prototype.getCollapsible = function () {\n    return this.collapsible_;\n  };\n  /**\r\n   * Set whether the attribution should be collapsible.\r\n   * @param {boolean} collapsible True if the widget is collapsible.\r\n   * @api\r\n   */\n\n\n  Attribution.prototype.setCollapsible = function (collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\r\n   * Collapse or expand the attribution according to the passed parameter. Will\r\n   * not do anything if the attribution isn't collapsible or if the current\r\n   * collapsed state is already the one requested.\r\n   * @param {boolean} collapsed True if the widget is collapsed.\r\n   * @api\r\n   */\n\n\n  Attribution.prototype.setCollapsed = function (collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n\n    this.handleToggle_();\n  };\n  /**\r\n   * Return `true` when the attribution is currently collapsed or `false`\r\n   * otherwise.\r\n   * @return {boolean} True if the widget is collapsed.\r\n   * @api\r\n   */\n\n\n  Attribution.prototype.getCollapsed = function () {\n    return this.collapsed_;\n  };\n\n  return Attribution;\n}(Control);\n/**\r\n * Update the attribution element.\r\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n * @this {Attribution}\r\n * @api\r\n */\n\n\nexport function render(mapEvent) {\n  this.updateElement_(mapEvent.frameState);\n}\nexport default Attribution;","map":null,"metadata":{},"sourceType":"module"}