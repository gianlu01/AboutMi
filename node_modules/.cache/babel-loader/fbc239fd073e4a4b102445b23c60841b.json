{"ast":null,"code":"export default function within(ids, coords, qx, qy, r, nodeSize) {\n  const stack = [0, ids.length - 1, 0];\n  const result = [];\n  const r2 = r * r;\n\n  while (stack.length) {\n    const axis = stack.pop();\n    const right = stack.pop();\n    const left = stack.pop();\n\n    if (right - left <= nodeSize) {\n      for (let i = left; i <= right; i++) {\n        if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2) result.push(ids[i]);\n      }\n\n      continue;\n    }\n\n    const m = Math.floor((left + right) / 2);\n    const x = coords[2 * m];\n    const y = coords[2 * m + 1];\n    if (sqDist(x, y, qx, qy) <= r2) result.push(ids[m]);\n    const nextAxis = (axis + 1) % 2;\n\n    if (axis === 0 ? qx - r <= x : qy - r <= y) {\n      stack.push(left);\n      stack.push(m - 1);\n      stack.push(nextAxis);\n    }\n\n    if (axis === 0 ? qx + r >= x : qy + r >= y) {\n      stack.push(m + 1);\n      stack.push(right);\n      stack.push(nextAxis);\n    }\n  }\n\n  return result;\n}\n\nfunction sqDist(ax, ay, bx, by) {\n  const dx = ax - bx;\n  const dy = ay - by;\n  return dx * dx + dy * dy;\n}","map":null,"metadata":{},"sourceType":"module"}