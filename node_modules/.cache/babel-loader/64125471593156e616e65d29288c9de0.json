{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/style/Icon\r\n */\n\n\nimport { getUid } from '../util.js';\nimport ImageState from '../ImageState.js';\nimport { assert } from '../asserts.js';\nimport { asArray } from '../color.js';\nimport EventType from '../events/EventType.js';\nimport IconAnchorUnits from './IconAnchorUnits.js';\nimport { get as getIconImage } from './IconImage.js';\nimport IconOrigin from './IconOrigin.js';\nimport ImageStyle from './Image.js';\n/**\r\n * @typedef {Object} Options\r\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\r\n * @property {import(\"./IconOrigin.js\").default} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorXUnits='fraction'] Units in which the anchor x value is\r\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the x value in pixels.\r\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorYUnits='fraction'] Units in which the anchor y value is\r\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the y value in pixels.\r\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\r\n * the icon will be left as is.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\r\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\r\n * provided image must already be loaded. And in that case, it is required\r\n * to provide the size of the image, with the `imgSize` option.\r\n * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\r\n * sub-rectangle to use from the original icon image.\r\n * @property {import(\"./IconOrigin.js\").default} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {number} [opacity=1] Opacity of the icon.\r\n * @property {number} [scale=1] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {import(\"../size.js\").Size} [size] Icon size in pixel. Can be used together with `offset` to define the\r\n * sub-rectangle to use from the origin (sprite) icon image.\r\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and\r\n * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.\r\n * @property {string} [src] Image source URI.\r\n */\n\n/**\r\n * @classdesc\r\n * Set icon style for vector features.\r\n * @api\r\n */\n\nvar Icon =\n/** @class */\nfunction (_super) {\n  __extends(Icon, _super);\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\n\n\n  function Icon(opt_options) {\n    var _this = this;\n\n    var options = opt_options || {};\n    /**\r\n     * @type {number}\r\n     */\n\n    var opacity = options.opacity !== undefined ? options.opacity : 1;\n    /**\r\n     * @type {number}\r\n     */\n\n    var rotation = options.rotation !== undefined ? options.rotation : 0;\n    /**\r\n     * @type {number}\r\n     */\n\n    var scale = options.scale !== undefined ? options.scale : 1;\n    /**\r\n     * @type {boolean}\r\n     */\n\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _super.call(this, {\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      rotateWithView: rotateWithView\n    }) || this;\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\n\n    _this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\n\n    _this.normalizedAnchor_ = null;\n    /**\r\n     * @private\r\n     * @type {import(\"./IconOrigin.js\").default}\r\n     */\n\n    _this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : IconOrigin.TOP_LEFT;\n    /**\r\n     * @private\r\n     * @type {import(\"./IconAnchorUnits.js\").default}\r\n     */\n\n    _this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : IconAnchorUnits.FRACTION;\n    /**\r\n     * @private\r\n     * @type {import(\"./IconAnchorUnits.js\").default}\r\n     */\n\n    _this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : IconAnchorUnits.FRACTION;\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\n\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\r\n     * @type {HTMLImageElement|HTMLCanvasElement}\r\n     */\n\n    var image = options.img !== undefined ? options.img : null;\n    /**\r\n     * @type {import(\"../size.js\").Size}\r\n     */\n\n    var imgSize = options.imgSize !== undefined ? options.imgSize : null;\n    /**\r\n     * @type {string|undefined}\r\n     */\n\n    var src = options.src;\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n\n    assert(!image || image && imgSize, 5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src =\n      /** @type {HTMLImageElement} */\n      image.src || getUid(image);\n    }\n\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n    /**\r\n     * @type {import(\"../ImageState.js\").default}\r\n     */\n\n    var imageState = options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color}\r\n     */\n\n    _this.color_ = options.color !== undefined ? asArray(options.color) : null;\n    /**\r\n     * @private\r\n     * @type {import(\"./IconImage.js\").default}\r\n     */\n\n    _this.iconImage_ = getIconImage(image,\n    /** @type {string} */\n    src, imgSize, _this.crossOrigin_, imageState, _this.color_);\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\n\n    _this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\r\n     * @private\r\n     * @type {import(\"./IconOrigin.js\").default}\r\n     */\n\n    _this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : IconOrigin.TOP_LEFT;\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\n\n    _this.origin_ = null;\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\n\n    _this.size_ = options.size !== undefined ? options.size : null;\n    return _this;\n  }\n  /**\r\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\r\n   * @return {Icon} The cloned style.\r\n   * @api\r\n   */\n\n\n  Icon.prototype.clone = function () {\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      crossOrigin: this.crossOrigin_,\n      color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n      src: this.getSrc(),\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      opacity: this.getOpacity(),\n      scale: this.getScale(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView()\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   * @api\r\n   */\n\n\n  Icon.prototype.getAnchor = function () {\n    if (this.normalizedAnchor_) {\n      return this.normalizedAnchor_;\n    }\n\n    var anchor = this.anchor_;\n    var size = this.getSize();\n\n    if (this.anchorXUnits_ == IconAnchorUnits.FRACTION || this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n      if (!size) {\n        return null;\n      }\n\n      anchor = this.anchor_.slice();\n\n      if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[0] *= size[0];\n      }\n\n      if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[1] *= size[1];\n      }\n    }\n\n    if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {\n      if (!size) {\n        return null;\n      }\n\n      if (anchor === this.anchor_) {\n        anchor = this.anchor_.slice();\n      }\n\n      if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT || this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[0] = -anchor[0] + size[0];\n      }\n\n      if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT || this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[1] = -anchor[1] + size[1];\n      }\n    }\n\n    this.normalizedAnchor_ = anchor;\n    return this.normalizedAnchor_;\n  };\n  /**\r\n   * Set the anchor point. The anchor determines the center point for the\r\n   * symbolizer.\r\n   *\r\n   * @param {Array<number>} anchor Anchor.\r\n   * @api\r\n   */\n\n\n  Icon.prototype.setAnchor = function (anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  };\n  /**\r\n   * Get the icon color.\r\n   * @return {import(\"../color.js\").Color} Color.\r\n   * @api\r\n   */\n\n\n  Icon.prototype.getColor = function () {\n    return this.color_;\n  };\n  /**\r\n   * Get the image icon.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\r\n   * @override\r\n   * @api\r\n   */\n\n\n  Icon.prototype.getImage = function (pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  Icon.prototype.getImageSize = function () {\n    return this.iconImage_.getSize();\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  Icon.prototype.getHitDetectionImageSize = function () {\n    return this.getImageSize();\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  Icon.prototype.getImageState = function () {\n    return this.iconImage_.getImageState();\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  Icon.prototype.getHitDetectionImage = function (pixelRatio) {\n    return this.iconImage_.getHitDetectionImage(pixelRatio);\n  };\n  /**\r\n   * @inheritDoc\r\n   * @api\r\n   */\n\n\n  Icon.prototype.getOrigin = function () {\n    if (this.origin_) {\n      return this.origin_;\n    }\n\n    var offset = this.offset_;\n\n    if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {\n      var size = this.getSize();\n      var iconImageSize = this.iconImage_.getSize();\n\n      if (!size || !iconImageSize) {\n        return null;\n      }\n\n      offset = offset.slice();\n\n      if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT || this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n\n      if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT || this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n\n    this.origin_ = offset;\n    return this.origin_;\n  };\n  /**\r\n   * Get the image URL.\r\n   * @return {string|undefined} Image src.\r\n   * @api\r\n   */\n\n\n  Icon.prototype.getSrc = function () {\n    return this.iconImage_.getSrc();\n  };\n  /**\r\n   * @inheritDoc\r\n   * @api\r\n   */\n\n\n  Icon.prototype.getSize = function () {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  Icon.prototype.listenImageChange = function (listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  };\n  /**\r\n   * Load not yet loaded URI.\r\n   * When rendering a feature with an icon style, the vector renderer will\r\n   * automatically call this method. However, you might want to call this\r\n   * method yourself for preloading or other purposes.\r\n   * @override\r\n   * @api\r\n   */\n\n\n  Icon.prototype.load = function () {\n    this.iconImage_.load();\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  Icon.prototype.unlistenImageChange = function (listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  };\n\n  return Icon;\n}(ImageStyle);\n\nexport default Icon;","map":null,"metadata":{},"sourceType":"module"}