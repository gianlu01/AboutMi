{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/events/Target\r\n */\n\n\nimport Disposable from '../Disposable.js';\nimport { VOID } from '../functions.js';\nimport Event from './Event.js';\nimport { clear } from '../obj.js';\n/**\r\n * @typedef {EventTarget|Target} EventTargetLike\r\n */\n\n/**\r\n * @classdesc\r\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\r\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\r\n *\r\n * There are two important simplifications compared to the specification:\r\n *\r\n * 1. The handling of `useCapture` in `addEventListener` and\r\n *    `removeEventListener`. There is no real capture model.\r\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\r\n *    There is no event target hierarchy. When a listener calls\r\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\r\n *    more listeners after this one will be called. Same as when the listener\r\n *    returns false.\r\n */\n\nvar Target =\n/** @class */\nfunction (_super) {\n  __extends(Target, _super);\n  /**\r\n   * @param {*=} opt_target Default event target for dispatched events.\r\n   */\n\n\n  function Target(opt_target) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * @private\r\n     * @type {*}\r\n     */\n\n\n    _this.eventTarget_ = opt_target;\n    /**\r\n     * @private\r\n     * @type {!Object<string, number>}\r\n     */\n\n    _this.pendingRemovals_ = {};\n    /**\r\n     * @private\r\n     * @type {!Object<string, number>}\r\n     */\n\n    _this.dispatching_ = {};\n    /**\r\n     * @private\r\n     * @type {!Object<string, Array<import(\"../events.js\").ListenerFunction>>}\r\n     */\n\n    _this.listeners_ = {};\n    return _this;\n  }\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../events.js\").ListenerFunction} listener Listener.\r\n   */\n\n\n  Target.prototype.addEventListener = function (type, listener) {\n    if (!type || !listener) {\n      return;\n    }\n\n    var listeners = this.listeners_[type];\n\n    if (!listeners) {\n      listeners = [];\n      this.listeners_[type] = listeners;\n    }\n\n    if (listeners.indexOf(listener) === -1) {\n      listeners.push(listener);\n    }\n  };\n  /**\r\n   * Dispatches an event and calls all listeners listening for events\r\n   * of this type. The event parameter can either be a string or an\r\n   * Object with a `type` property.\r\n   *\r\n   * @param {{type: string,\r\n   *     target: (EventTargetLike|undefined),\r\n   *     propagationStopped: (boolean|undefined)}|\r\n   *     import(\"./Event.js\").default|string} event Event object.\r\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\r\n   *     event object or if any of the listeners returned false.\r\n   * @api\r\n   */\n\n\n  Target.prototype.dispatchEvent = function (event) {\n    var evt = typeof event === 'string' ? new Event(event) : event;\n    var type = evt.type;\n\n    if (!evt.target) {\n      evt.target = this.eventTarget_ || this;\n    }\n\n    var listeners = this.listeners_[type];\n    var propagate;\n\n    if (listeners) {\n      if (!(type in this.dispatching_)) {\n        this.dispatching_[type] = 0;\n        this.pendingRemovals_[type] = 0;\n      }\n\n      ++this.dispatching_[type];\n\n      for (var i = 0, ii = listeners.length; i < ii; ++i) {\n        if (listeners[i].call(this, evt) === false || evt.propagationStopped) {\n          propagate = false;\n          break;\n        }\n      }\n\n      --this.dispatching_[type];\n\n      if (this.dispatching_[type] === 0) {\n        var pendingRemovals = this.pendingRemovals_[type];\n        delete this.pendingRemovals_[type];\n\n        while (pendingRemovals--) {\n          this.removeEventListener(type, VOID);\n        }\n\n        delete this.dispatching_[type];\n      }\n\n      return propagate;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Target.prototype.disposeInternal = function () {\n    clear(this.listeners_);\n  };\n  /**\r\n   * Get the listeners for a specified event type. Listeners are returned in the\r\n   * order that they will be called in.\r\n   *\r\n   * @param {string} type Type.\r\n   * @return {Array<import(\"../events.js\").ListenerFunction>} Listeners.\r\n   */\n\n\n  Target.prototype.getListeners = function (type) {\n    return this.listeners_[type];\n  };\n  /**\r\n   * @param {string=} opt_type Type. If not provided,\r\n   *     `true` will be returned if this event target has any listeners.\r\n   * @return {boolean} Has listeners.\r\n   */\n\n\n  Target.prototype.hasListener = function (opt_type) {\n    return opt_type ? opt_type in this.listeners_ : Object.keys(this.listeners_).length > 0;\n  };\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../events.js\").ListenerFunction} listener Listener.\r\n   */\n\n\n  Target.prototype.removeEventListener = function (type, listener) {\n    var listeners = this.listeners_[type];\n\n    if (listeners) {\n      var index = listeners.indexOf(listener);\n\n      if (index !== -1) {\n        if (type in this.pendingRemovals_) {\n          // make listener a no-op, and remove later in #dispatchEvent()\n          listeners[index] = VOID;\n          ++this.pendingRemovals_[type];\n        } else {\n          listeners.splice(index, 1);\n\n          if (listeners.length === 0) {\n            delete this.listeners_[type];\n          }\n        }\n      }\n    }\n  };\n\n  return Target;\n}(Disposable);\n\nexport default Target;","map":null,"metadata":{},"sourceType":"module"}