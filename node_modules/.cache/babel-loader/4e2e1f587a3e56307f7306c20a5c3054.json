{"ast":null,"code":"const ModeInterface = require('./mode_interface');\n\nconst eventMapper = {\n  drag: 'onDrag',\n  click: 'onClick',\n  mousemove: 'onMouseMove',\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseout: 'onMouseOut',\n  keyup: 'onKeyUp',\n  keydown: 'onKeyDown',\n  touchstart: 'onTouchStart',\n  touchmove: 'onTouchMove',\n  touchend: 'onTouchEnd',\n  tap: 'onTap'\n};\nconst eventKeys = Object.keys(eventMapper);\n\nmodule.exports = function (modeObject) {\n  const modeObjectKeys = Object.keys(modeObject);\n  return function (ctx, startOpts = {}) {\n    let state = {};\n    const mode = modeObjectKeys.reduce((m, k) => {\n      m[k] = modeObject[k];\n      return m;\n    }, new ModeInterface(ctx));\n\n    function wrapper(eh) {\n      return function (e) {\n        mode[eh](state, e);\n      };\n    }\n\n    return {\n      start: function () {\n        state = mode.onSetup(startOpts); // this should set ui buttons\n        // Adds event handlers for all event options\n        // add sets the selector to false for all\n        // handlers that are not present in the mode\n        // to reduce on render calls for functions that\n        // have no logic\n\n        eventKeys.forEach(key => {\n          const modeHandler = eventMapper[key];\n\n          let selector = () => false;\n\n          if (modeObject[modeHandler]) {\n            selector = () => true;\n          }\n\n          this.on(key, selector, wrapper(modeHandler));\n        });\n      },\n      stop: function () {\n        mode.onStop(state);\n      },\n      trash: function () {\n        mode.onTrash(state);\n      },\n      combineFeatures: function () {\n        mode.onCombineFeatures(state);\n      },\n      uncombineFeatures: function () {\n        mode.onUncombineFeatures(state);\n      },\n      render: function (geojson, push) {\n        mode.toDisplayFeatures(state, geojson, push);\n      }\n    };\n  };\n};","map":null,"metadata":{},"sourceType":"script"}