{"ast":null,"code":"var wgs84 = require('wgs84');\n\nmodule.exports.geometry = geometry;\nmodule.exports.ring = ringArea;\n\nfunction geometry(_) {\n  var area = 0,\n      i;\n\n  switch (_.type) {\n    case 'Polygon':\n      return polygonArea(_.coordinates);\n\n    case 'MultiPolygon':\n      for (i = 0; i < _.coordinates.length; i++) {\n        area += polygonArea(_.coordinates[i]);\n      }\n\n      return area;\n\n    case 'Point':\n    case 'MultiPoint':\n    case 'LineString':\n    case 'MultiLineString':\n      return 0;\n\n    case 'GeometryCollection':\n      for (i = 0; i < _.geometries.length; i++) {\n        area += geometry(_.geometries[i]);\n      }\n\n      return area;\n  }\n}\n\nfunction polygonArea(coords) {\n  var area = 0;\n\n  if (coords && coords.length > 0) {\n    area += Math.abs(ringArea(coords[0]));\n\n    for (var i = 1; i < coords.length; i++) {\n      area -= Math.abs(ringArea(coords[i]));\n    }\n  }\n\n  return area;\n}\n/**\r\n * Calculate the approximate area of the polygon were it projected onto\r\n *     the earth.  Note that this area will be positive if ring is oriented\r\n *     clockwise, otherwise it will be negative.\r\n *\r\n * Reference:\r\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\r\n *     Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\r\n *     Laboratory, Pasadena, CA, June 2007 http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409\r\n *\r\n * Returns:\r\n * {float} The approximate signed geodesic area of the polygon in square\r\n *     meters.\r\n */\n\n\nfunction ringArea(coords) {\n  var p1,\n      p2,\n      p3,\n      lowerIndex,\n      middleIndex,\n      upperIndex,\n      i,\n      area = 0,\n      coordsLength = coords.length;\n\n  if (coordsLength > 2) {\n    for (i = 0; i < coordsLength; i++) {\n      if (i === coordsLength - 2) {\n        // i = N-2\n        lowerIndex = coordsLength - 2;\n        middleIndex = coordsLength - 1;\n        upperIndex = 0;\n      } else if (i === coordsLength - 1) {\n        // i = N-1\n        lowerIndex = coordsLength - 1;\n        middleIndex = 0;\n        upperIndex = 1;\n      } else {\n        // i = 0 to N-3\n        lowerIndex = i;\n        middleIndex = i + 1;\n        upperIndex = i + 2;\n      }\n\n      p1 = coords[lowerIndex];\n      p2 = coords[middleIndex];\n      p3 = coords[upperIndex];\n      area += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));\n    }\n\n    area = area * wgs84.RADIUS * wgs84.RADIUS / 2;\n  }\n\n  return area;\n}\n\nfunction rad(_) {\n  return _ * Math.PI / 180;\n}","map":null,"metadata":{},"sourceType":"script"}