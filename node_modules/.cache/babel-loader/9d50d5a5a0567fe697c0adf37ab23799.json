{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/layer/Layer\r\n */\n\n\nimport { listen, unlistenByKey } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { getChangeEventType } from '../Object.js';\nimport BaseLayer from './Base.js';\nimport LayerProperty from './Property.js';\nimport { assign } from '../obj.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\n/**\r\n * @typedef {function(import(\"../PluggableMap.js\").FrameState):HTMLElement} RenderFunction\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {import(\"../source/Source.js\").default} [source] Source for this layer.  If not provided to the constructor,\r\n * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after\r\n * construction.\r\n * @property {import(\"../PluggableMap.js\").default} [map] Map.\r\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\r\n * HTML element. Will overwrite the default rendering for the layer.\r\n */\n\n/**\r\n * @typedef {Object} State\r\n * @property {import(\"./Base.js\").default} layer\r\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\r\n * @property {SourceState} sourceState\r\n * @property {boolean} visible\r\n * @property {boolean} managed\r\n * @property {import(\"../extent.js\").Extent} [extent]\r\n * @property {number} zIndex\r\n * @property {number} maxResolution\r\n * @property {number} minResolution\r\n * @property {number} minZoom\r\n * @property {number} maxZoom\r\n */\n\n/**\r\n * @classdesc\r\n * Base class from which all layer types are derived. This should only be instantiated\r\n * in the case where a custom layer is be added to the map with a custom `render` function.\r\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\r\n *\r\n * A visual representation of raster or vector map data.\r\n * Layers group together those properties that pertain to how the data is to be\r\n * displayed, irrespective of the source of that data.\r\n *\r\n * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components\r\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\r\n * internally. These unmanaged layers are associated with the map using\r\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\r\n *\r\n * A generic `change` event is fired when the state of the source changes.\r\n *\r\n * Please note that for performance reasons several layers might get rendered to\r\n * the same HTML element, which will cause {@link module:ol/Map~Map#forEachLayerAtPixel} to\r\n * give false positives. To avoid this, apply different `className` properties to the\r\n * layers at creation time.\r\n *\r\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\r\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\r\n *\r\n * @template {import(\"../source/Source.js\").default} SourceType\r\n * @api\r\n */\n\nvar Layer =\n/** @class */\nfunction (_super) {\n  __extends(Layer, _super);\n  /**\r\n   * @param {Options} options Layer options.\r\n   */\n\n\n  function Layer(options) {\n    var _this = this;\n\n    var baseOptions = assign({}, options);\n    delete baseOptions.source;\n    _this = _super.call(this, baseOptions) || this;\n    /**\r\n     * @private\r\n     * @type {?import(\"../events.js\").EventsKey}\r\n     */\n\n    _this.mapPrecomposeKey_ = null;\n    /**\r\n     * @private\r\n     * @type {?import(\"../events.js\").EventsKey}\r\n     */\n\n    _this.mapRenderKey_ = null;\n    /**\r\n     * @private\r\n     * @type {?import(\"../events.js\").EventsKey}\r\n     */\n\n    _this.sourceChangeKey_ = null;\n    /**\r\n     * @private\r\n     * @type {import(\"../renderer/Layer.js\").default}\r\n     */\n\n    _this.renderer_ = null; // Overwrite default render method with a custom one\n\n    if (options.render) {\n      _this.render = options.render;\n    }\n\n    if (options.map) {\n      _this.setMap(options.map);\n    }\n\n    _this.addEventListener(getChangeEventType(LayerProperty.SOURCE), _this.handleSourcePropertyChange_);\n\n    var source = options.source ?\n    /** @type {SourceType} */\n    options.source : null;\n\n    _this.setSource(source);\n\n    return _this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Layer.prototype.getLayersArray = function (opt_array) {\n    var array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Layer.prototype.getLayerStatesArray = function (opt_states) {\n    var states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  };\n  /**\r\n   * Get the layer source.\r\n   * @return {SourceType} The layer source (or `null` if not yet set).\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Layer.prototype.getSource = function () {\n    return (\n      /** @type {SourceType} */\n      this.get(LayerProperty.SOURCE) || null\n    );\n  };\n  /**\r\n    * @inheritDoc\r\n    */\n\n\n  Layer.prototype.getSourceState = function () {\n    var source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  };\n  /**\r\n   * @private\r\n   */\n\n\n  Layer.prototype.handleSourceChange_ = function () {\n    this.changed();\n  };\n  /**\r\n   * @private\r\n   */\n\n\n  Layer.prototype.handleSourcePropertyChange_ = function () {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n\n    var source = this.getSource();\n\n    if (source) {\n      this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n    }\n\n    this.changed();\n  };\n  /**\r\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\r\n   * an array of features.\r\n   */\n\n\n  Layer.prototype.getFeatures = function (pixel) {\n    return this.renderer_.getFeatures(pixel);\n  };\n  /**\r\n   * In charge to manage the rendering of the layer. One layer type is\r\n   * bounded with one layer renderer.\r\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\r\n   * for rendering its content.\r\n   * @return {HTMLElement} The rendered element.\r\n   */\n\n\n  Layer.prototype.render = function (frameState, target) {\n    var layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  };\n  /**\r\n   * Sets the layer to be rendered on top of other layers on a map. The map will\r\n   * not manage this layer in its layers collection, and the callback in\r\n   * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This\r\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\r\n   * use `#setMap(null)`.\r\n   *\r\n   * To add the layer to a map and have it managed by the map, use\r\n   * {@link module:ol/Map#addLayer} instead.\r\n   * @param {import(\"../PluggableMap.js\").default} map Map.\r\n   * @api\r\n   */\n\n\n  Layer.prototype.setMap = function (map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n\n    if (!map) {\n      this.changed();\n    }\n\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n        var renderEvent =\n        /** @type {import(\"../render/Event.js\").default} */\n        evt;\n        renderEvent.frameState.layerStatesArray.push(this.getLayerState(false));\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  };\n  /**\r\n   * Set the layer source.\r\n   * @param {SourceType} source The layer source.\r\n   * @observable\r\n   * @api\r\n   */\n\n\n  Layer.prototype.setSource = function (source) {\n    this.set(LayerProperty.SOURCE, source);\n  };\n  /**\r\n   * Get the renderer for this layer.\r\n   * @return {import(\"../renderer/Layer.js\").default} The layer renderer.\r\n   */\n\n\n  Layer.prototype.getRenderer = function () {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n\n    return this.renderer_;\n  };\n  /**\r\n   * @return {boolean} The layer has a renderer.\r\n   */\n\n\n  Layer.prototype.hasRenderer = function () {\n    return !!this.renderer_;\n  };\n  /**\r\n   * Create a renderer for this layer.\r\n   * @return {import(\"../renderer/Layer.js\").default} A layer renderer.\r\n   * @protected\r\n   */\n\n\n  Layer.prototype.createRenderer = function () {\n    return null;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Layer.prototype.disposeInternal = function () {\n    this.setSource(null);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return Layer;\n}(BaseLayer);\n/**\r\n * Return `true` if the layer is visible and if the provided view state\r\n * has resolution and zoom levels that are in range of the layer's min/max.\r\n * @param {State} layerState Layer state.\r\n * @param {import(\"../View.js\").State} viewState View state.\r\n * @return {boolean} The layer is visible at the given view state.\r\n */\n\n\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n\n  var resolution = viewState.resolution;\n\n  if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {\n    return false;\n  }\n\n  var zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nexport default Layer;","map":null,"metadata":{},"sourceType":"module"}