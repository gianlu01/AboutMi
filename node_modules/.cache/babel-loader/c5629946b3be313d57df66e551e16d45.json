{"ast":null,"code":"/**\r\n * @module ol/TileRange\r\n */\n\n/**\r\n * A representation of a contiguous block of tiles.  A tile range is specified\r\n * by its min/max tile coordinates and is inclusive of coordinates.\r\n */\nvar TileRange =\n/** @class */\nfunction () {\n  /**\r\n   * @param {number} minX Minimum X.\r\n   * @param {number} maxX Maximum X.\r\n   * @param {number} minY Minimum Y.\r\n   * @param {number} maxY Maximum Y.\r\n   */\n  function TileRange(minX, maxX, minY, maxY) {\n    /**\r\n     * @type {number}\r\n     */\n    this.minX = minX;\n    /**\r\n     * @type {number}\r\n     */\n\n    this.maxX = maxX;\n    /**\r\n     * @type {number}\r\n     */\n\n    this.minY = minY;\n    /**\r\n     * @type {number}\r\n     */\n\n    this.maxY = maxY;\n  }\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {boolean} Contains tile coordinate.\r\n   */\n\n\n  TileRange.prototype.contains = function (tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  };\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Contains.\r\n   */\n\n\n  TileRange.prototype.containsTileRange = function (tileRange) {\n    return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n  };\n  /**\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @return {boolean} Contains coordinate.\r\n   */\n\n\n  TileRange.prototype.containsXY = function (x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  };\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Equals.\r\n   */\n\n\n  TileRange.prototype.equals = function (tileRange) {\n    return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n  };\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   */\n\n\n  TileRange.prototype.extend = function (tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  };\n  /**\r\n   * @return {number} Height.\r\n   */\n\n\n  TileRange.prototype.getHeight = function () {\n    return this.maxY - this.minY + 1;\n  };\n  /**\r\n   * @return {import(\"./size.js\").Size} Size.\r\n   */\n\n\n  TileRange.prototype.getSize = function () {\n    return [this.getWidth(), this.getHeight()];\n  };\n  /**\r\n   * @return {number} Width.\r\n   */\n\n\n  TileRange.prototype.getWidth = function () {\n    return this.maxX - this.minX + 1;\n  };\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Intersects.\r\n   */\n\n\n  TileRange.prototype.intersects = function (tileRange) {\n    return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;\n  };\n\n  return TileRange;\n}();\n/**\r\n * @param {number} minX Minimum X.\r\n * @param {number} maxX Maximum X.\r\n * @param {number} minY Minimum Y.\r\n * @param {number} maxY Maximum Y.\r\n * @param {TileRange=} tileRange TileRange.\r\n * @return {TileRange} Tile range.\r\n */\n\n\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  } else {\n    return new TileRange(minX, maxX, minY, maxY);\n  }\n}\nexport default TileRange;","map":null,"metadata":{},"sourceType":"module"}