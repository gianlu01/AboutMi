{"ast":null,"code":"/**\r\n * @module ol/style/Text\r\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\n/**\r\n * The default fill color to use if no fill was set at construction time; a\r\n * blackish `#333`.\r\n *\r\n * @const {string}\r\n */\n\nvar DEFAULT_FILL_COLOR = '#333';\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [font] Font style as CSS 'font' value, see:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\r\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\r\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\r\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\r\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\r\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\r\n * the width of the polygon at the label position or the length of the path that it follows.\r\n * @property {import(\"./TextPlacement.js\").default|string} [placement='point'] Text placement.\r\n * @property {number} [scale] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {string} [text] Text content.\r\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\r\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\r\n * placement where `maxAngle` is not exceeded.\r\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\r\n * 'hanging', 'ideographic'.\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\r\n * `'point'`. Default is no fill.\r\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\r\n * is `'point'`. Default is no stroke.\r\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\r\n * values in the array is `[top, right, bottom, left]`.\r\n */\n\n/**\r\n * @classdesc\r\n * Set text style for vector features.\r\n * @api\r\n */\n\nvar Text =\n/** @class */\nfunction () {\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\n  function Text(opt_options) {\n    var options = opt_options || {};\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\n\n    this.font_ = options.font;\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n\n    this.rotation_ = options.rotation;\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\n\n    this.rotateWithView_ = options.rotateWithView;\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n\n    this.scale_ = options.scale;\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\n\n    this.text_ = options.text;\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\n\n    this.textAlign_ = options.textAlign;\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\n\n    this.textBaseline_ = options.textBaseline;\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default}\r\n     */\n\n    this.fill_ = options.fill !== undefined ? options.fill : new Fill({\n      color: DEFAULT_FILL_COLOR\n    });\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n    /**\r\n     * @private\r\n     * @type {import(\"./TextPlacement.js\").default|string}\r\n     */\n\n    this.placement_ = options.placement !== undefined ? options.placement : TextPlacement.POINT;\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n\n    this.overflow_ = !!options.overflow;\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default}\r\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default}\r\n     */\n\n    this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default}\r\n     */\n\n    this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\n\n    this.padding_ = options.padding === undefined ? null : options.padding;\n  }\n  /**\r\n   * Clones the style.\r\n   * @return {Text} The cloned style.\r\n   * @api\r\n   */\n\n\n  Text.prototype.clone = function () {\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: this.getScale(),\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n      backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,\n      padding: this.getPadding()\n    });\n  };\n  /**\r\n   * Get the `overflow` configuration.\r\n   * @return {boolean} Let text overflow the length of the path they follow.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getOverflow = function () {\n    return this.overflow_;\n  };\n  /**\r\n   * Get the font name.\r\n   * @return {string|undefined} Font.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getFont = function () {\n    return this.font_;\n  };\n  /**\r\n   * Get the maximum angle between adjacent characters.\r\n   * @return {number} Angle in radians.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getMaxAngle = function () {\n    return this.maxAngle_;\n  };\n  /**\r\n   * Get the label placement.\r\n   * @return {import(\"./TextPlacement.js\").default|string} Text placement.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getPlacement = function () {\n    return this.placement_;\n  };\n  /**\r\n   * Get the x-offset for the text.\r\n   * @return {number} Horizontal text offset.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getOffsetX = function () {\n    return this.offsetX_;\n  };\n  /**\r\n   * Get the y-offset for the text.\r\n   * @return {number} Vertical text offset.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getOffsetY = function () {\n    return this.offsetY_;\n  };\n  /**\r\n   * Get the fill style for the text.\r\n   * @return {import(\"./Fill.js\").default} Fill style.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\r\n   * Determine whether the text rotates with the map.\r\n   * @return {boolean|undefined} Rotate with map.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\r\n   * Get the text rotation.\r\n   * @return {number|undefined} Rotation.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getRotation = function () {\n    return this.rotation_;\n  };\n  /**\r\n   * Get the text scale.\r\n   * @return {number|undefined} Scale.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getScale = function () {\n    return this.scale_;\n  };\n  /**\r\n   * Get the stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default} Stroke style.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\r\n   * Get the text to be rendered.\r\n   * @return {string|undefined} Text.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getText = function () {\n    return this.text_;\n  };\n  /**\r\n   * Get the text alignment.\r\n   * @return {string|undefined} Text align.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getTextAlign = function () {\n    return this.textAlign_;\n  };\n  /**\r\n   * Get the text baseline.\r\n   * @return {string|undefined} Text baseline.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getTextBaseline = function () {\n    return this.textBaseline_;\n  };\n  /**\r\n   * Get the background fill style for the text.\r\n   * @return {import(\"./Fill.js\").default} Fill style.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getBackgroundFill = function () {\n    return this.backgroundFill_;\n  };\n  /**\r\n   * Get the background stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default} Stroke style.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getBackgroundStroke = function () {\n    return this.backgroundStroke_;\n  };\n  /**\r\n   * Get the padding for the text.\r\n   * @return {Array<number>} Padding.\r\n   * @api\r\n   */\n\n\n  Text.prototype.getPadding = function () {\n    return this.padding_;\n  };\n  /**\r\n   * Set the `overflow` property.\r\n   *\r\n   * @param {boolean} overflow Let text overflow the path that it follows.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setOverflow = function (overflow) {\n    this.overflow_ = overflow;\n  };\n  /**\r\n   * Set the font.\r\n   *\r\n   * @param {string|undefined} font Font.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setFont = function (font) {\n    this.font_ = font;\n  };\n  /**\r\n   * Set the maximum angle between adjacent characters.\r\n   *\r\n   * @param {number} maxAngle Angle in radians.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setMaxAngle = function (maxAngle) {\n    this.maxAngle_ = maxAngle;\n  };\n  /**\r\n   * Set the x offset.\r\n   *\r\n   * @param {number} offsetX Horizontal text offset.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setOffsetX = function (offsetX) {\n    this.offsetX_ = offsetX;\n  };\n  /**\r\n   * Set the y offset.\r\n   *\r\n   * @param {number} offsetY Vertical text offset.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setOffsetY = function (offsetY) {\n    this.offsetY_ = offsetY;\n  };\n  /**\r\n   * Set the text placement.\r\n   *\r\n   * @param {import(\"./TextPlacement.js\").default|string} placement Placement.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setPlacement = function (placement) {\n    this.placement_ = placement;\n  };\n  /**\r\n   * Set whether to rotate the text with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setRotateWithView = function (rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  };\n  /**\r\n   * Set the fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default} fill Fill style.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setFill = function (fill) {\n    this.fill_ = fill;\n  };\n  /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number|undefined} rotation Rotation.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setRotation = function (rotation) {\n    this.rotation_ = rotation;\n  };\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|undefined} scale Scale.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setScale = function (scale) {\n    this.scale_ = scale;\n  };\n  /**\r\n   * Set the stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setStroke = function (stroke) {\n    this.stroke_ = stroke;\n  };\n  /**\r\n   * Set the text.\r\n   *\r\n   * @param {string|undefined} text Text.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setText = function (text) {\n    this.text_ = text;\n  };\n  /**\r\n   * Set the text alignment.\r\n   *\r\n   * @param {string|undefined} textAlign Text align.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setTextAlign = function (textAlign) {\n    this.textAlign_ = textAlign;\n  };\n  /**\r\n   * Set the text baseline.\r\n   *\r\n   * @param {string|undefined} textBaseline Text baseline.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setTextBaseline = function (textBaseline) {\n    this.textBaseline_ = textBaseline;\n  };\n  /**\r\n   * Set the background fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default} fill Fill style.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setBackgroundFill = function (fill) {\n    this.backgroundFill_ = fill;\n  };\n  /**\r\n   * Set the background stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setBackgroundStroke = function (stroke) {\n    this.backgroundStroke_ = stroke;\n  };\n  /**\r\n   * Set the padding (`[top, right, bottom, left]`).\r\n   *\r\n   * @param {!Array<number>} padding Padding.\r\n   * @api\r\n   */\n\n\n  Text.prototype.setPadding = function (padding) {\n    this.padding_ = padding;\n  };\n\n  return Text;\n}();\n\nexport default Text;","map":null,"metadata":{},"sourceType":"module"}