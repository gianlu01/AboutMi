{"ast":null,"code":"var throttle = require('./lib/throttle');\n\nvar toDenseArray = require('./lib/to_dense_array');\n\nvar StringSet = require('./lib/string_set');\n\nvar render = require('./render');\n\nvar interactions = require('./constants').interactions;\n\nvar Store = module.exports = function (ctx) {\n  this._features = {};\n  this._featureIds = new StringSet();\n  this._selectedFeatureIds = new StringSet();\n  this._selectedCoordinates = [];\n  this._changedFeatureIds = new StringSet();\n  this._deletedFeaturesToEmit = [];\n  this._emitSelectionChange = false;\n  this._mapInitialConfig = {};\n  this.ctx = ctx;\n  this.sources = {\n    hot: [],\n    cold: []\n  };\n  this.render = throttle(render, 16, this);\n  this.isDirty = false;\n};\n/**\r\n * Delays all rendering until the returned function is invoked\r\n * @return {Function} renderBatch\r\n */\n\n\nStore.prototype.createRenderBatch = function () {\n  var _this = this;\n\n  var holdRender = this.render;\n  var numRenders = 0;\n\n  this.render = function () {\n    numRenders++;\n  };\n\n  return function () {\n    _this.render = holdRender;\n\n    if (numRenders > 0) {\n      _this.render();\n    }\n  };\n};\n/**\r\n * Sets the store's state to dirty.\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.setDirty = function () {\n  this.isDirty = true;\n  return this;\n};\n/**\r\n * Sets a feature's state to changed.\r\n * @param {string} featureId\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.featureChanged = function (featureId) {\n  this._changedFeatureIds.add(featureId);\n\n  return this;\n};\n/**\r\n * Gets the ids of all features currently in changed state.\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.getChangedIds = function () {\n  return this._changedFeatureIds.values();\n};\n/**\r\n * Sets all features to unchanged state.\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.clearChangedIds = function () {\n  this._changedFeatureIds.clear();\n\n  return this;\n};\n/**\r\n * Gets the ids of all features in the store.\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.getAllIds = function () {\n  return this._featureIds.values();\n};\n/**\r\n * Adds a feature to the store.\r\n * @param {Object} feature\r\n *\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.add = function (feature) {\n  this.featureChanged(feature.id);\n  this._features[feature.id] = feature;\n\n  this._featureIds.add(feature.id);\n\n  return this;\n};\n/**\r\n * Deletes a feature or array of features from the store.\r\n * Cleans up after the deletion by deselecting the features.\r\n * If changes were made, sets the state to the dirty\r\n * and fires an event.\r\n * @param {string | Array<string>} featureIds\r\n * @param {Object} [options]\r\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.delete = function (featureIds) {\n  var _this2 = this;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  toDenseArray(featureIds).forEach(function (id) {\n    if (!_this2._featureIds.has(id)) return;\n\n    _this2._featureIds.delete(id);\n\n    _this2._selectedFeatureIds.delete(id);\n\n    if (!options.silent) {\n      if (_this2._deletedFeaturesToEmit.indexOf(_this2._features[id]) === -1) {\n        _this2._deletedFeaturesToEmit.push(_this2._features[id]);\n      }\n    }\n\n    delete _this2._features[id];\n    _this2.isDirty = true;\n  });\n  refreshSelectedCoordinates.call(this, options);\n  return this;\n};\n/**\r\n * Returns a feature in the store matching the specified value.\r\n * @return {Object | undefined} feature\r\n */\n\n\nStore.prototype.get = function (id) {\n  return this._features[id];\n};\n/**\r\n * Returns all features in the store.\r\n * @return {Array<Object>}\r\n */\n\n\nStore.prototype.getAll = function () {\n  var _this3 = this;\n\n  return Object.keys(this._features).map(function (id) {\n    return _this3._features[id];\n  });\n};\n/**\r\n * Adds features to the current selection.\r\n * @param {string | Array<string>} featureIds\r\n * @param {Object} [options]\r\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.select = function (featureIds) {\n  var _this4 = this;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  toDenseArray(featureIds).forEach(function (id) {\n    if (_this4._selectedFeatureIds.has(id)) return;\n\n    _this4._selectedFeatureIds.add(id);\n\n    _this4._changedFeatureIds.add(id);\n\n    if (!options.silent) {\n      _this4._emitSelectionChange = true;\n    }\n  });\n  return this;\n};\n/**\r\n * Deletes features from the current selection.\r\n * @param {string | Array<string>} featureIds\r\n * @param {Object} [options]\r\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.deselect = function (featureIds) {\n  var _this5 = this;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  toDenseArray(featureIds).forEach(function (id) {\n    if (!_this5._selectedFeatureIds.has(id)) return;\n\n    _this5._selectedFeatureIds.delete(id);\n\n    _this5._changedFeatureIds.add(id);\n\n    if (!options.silent) {\n      _this5._emitSelectionChange = true;\n    }\n  });\n  refreshSelectedCoordinates.call(this, options);\n  return this;\n};\n/**\r\n * Clears the current selection.\r\n * @param {Object} [options]\r\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.clearSelected = function () {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  this.deselect(this._selectedFeatureIds.values(), {\n    silent: options.silent\n  });\n  return this;\n};\n/**\r\n * Sets the store's selection, clearing any prior values.\r\n * If no feature ids are passed, the store is just cleared.\r\n * @param {string | Array<string> | undefined} featureIds\r\n * @param {Object} [options]\r\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.setSelected = function (featureIds) {\n  var _this6 = this;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  featureIds = toDenseArray(featureIds); // Deselect any features not in the new selection\n\n  this.deselect(this._selectedFeatureIds.values().filter(function (id) {\n    return featureIds.indexOf(id) === -1;\n  }), {\n    silent: options.silent\n  }); // Select any features in the new selection that were not already selected\n\n  this.select(featureIds.filter(function (id) {\n    return !_this6._selectedFeatureIds.has(id);\n  }), {\n    silent: options.silent\n  });\n  return this;\n};\n/**\r\n * Sets the store's coordinates selection, clearing any prior values.\r\n * @param {Array<Array<string>>} coordinates\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.setSelectedCoordinates = function (coordinates) {\n  this._selectedCoordinates = coordinates;\n  this._emitSelectionChange = true;\n  return this;\n};\n/**\r\n * Clears the current coordinates selection.\r\n * @param {Object} [options]\r\n * @return {Store} this\r\n */\n\n\nStore.prototype.clearSelectedCoordinates = function () {\n  this._selectedCoordinates = [];\n  this._emitSelectionChange = true;\n  return this;\n};\n/**\r\n * Returns the ids of features in the current selection.\r\n * @return {Array<string>} Selected feature ids.\r\n */\n\n\nStore.prototype.getSelectedIds = function () {\n  return this._selectedFeatureIds.values();\n};\n/**\r\n * Returns features in the current selection.\r\n * @return {Array<Object>} Selected features.\r\n */\n\n\nStore.prototype.getSelected = function () {\n  var _this7 = this;\n\n  return this._selectedFeatureIds.values().map(function (id) {\n    return _this7.get(id);\n  });\n};\n/**\r\n * Returns selected coordinates in the currently selected feature.\r\n * @return {Array<Object>} Selected coordinates.\r\n */\n\n\nStore.prototype.getSelectedCoordinates = function () {\n  var _this8 = this;\n\n  var selected = this._selectedCoordinates.map(function (coordinate) {\n    var feature = _this8.get(coordinate.feature_id);\n\n    return {\n      coordinates: feature.getCoordinate(coordinate.coord_path)\n    };\n  });\n\n  return selected;\n};\n/**\r\n * Indicates whether a feature is selected.\r\n * @param {string} featureId\r\n * @return {boolean} `true` if the feature is selected, `false` if not.\r\n */\n\n\nStore.prototype.isSelected = function (featureId) {\n  return this._selectedFeatureIds.has(featureId);\n};\n/**\r\n * Sets a property on the given feature\r\n * @param {string} featureId\r\n * @param {string} property property\r\n * @param {string} property value\r\n*/\n\n\nStore.prototype.setFeatureProperty = function (featureId, property, value) {\n  this.get(featureId).setProperty(property, value);\n  this.featureChanged(featureId);\n};\n\nfunction refreshSelectedCoordinates(options) {\n  var _this9 = this;\n\n  var newSelectedCoordinates = this._selectedCoordinates.filter(function (point) {\n    return _this9._selectedFeatureIds.has(point.feature_id);\n  });\n\n  if (this._selectedCoordinates.length !== newSelectedCoordinates.length && !options.silent) {\n    this._emitSelectionChange = true;\n  }\n\n  this._selectedCoordinates = newSelectedCoordinates;\n}\n/**\r\n * Stores the initial config for a map, so that we can set it again after we're done.\r\n*/\n\n\nStore.prototype.storeMapConfig = function () {\n  var _this10 = this;\n\n  interactions.forEach(function (interaction) {\n    var interactionSet = _this10.ctx.map[interaction];\n\n    if (interactionSet) {\n      _this10._mapInitialConfig[interaction] = _this10.ctx.map[interaction].isEnabled();\n    }\n  });\n};\n/**\r\n * Restores the initial config for a map, ensuring all is well.\r\n*/\n\n\nStore.prototype.restoreMapConfig = function () {\n  var _this11 = this;\n\n  Object.keys(this._mapInitialConfig).forEach(function (key) {\n    var value = _this11._mapInitialConfig[key];\n\n    if (value) {\n      _this11.ctx.map[key].enable();\n    } else {\n      _this11.ctx.map[key].disable();\n    }\n  });\n};\n/**\r\n * Returns the initial state of an interaction setting.\r\n * @param {string} interaction\r\n * @return {boolean} `true` if the interaction is enabled, `false` if not.\r\n * Defaults to `true`. (Todo: include defaults.)\r\n*/\n\n\nStore.prototype.getInitialConfigValue = function (interaction) {\n  if (this._mapInitialConfig[interaction] !== undefined) {\n    return this._mapInitialConfig[interaction];\n  } else {\n    // This needs to be set to whatever the default is for that interaction\n    // It seems to be true for all cases currently, so let's send back `true`.\n    return true;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}