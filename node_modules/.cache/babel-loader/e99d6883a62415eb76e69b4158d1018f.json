{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/interaction/Select\r\n */\n\n\nimport { getUid } from '../util.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport { extend, includes } from '../array.js';\nimport Event from '../events/Event.js';\nimport { singleClick, never, shiftKeyOnly } from '../events/condition.js';\nimport { TRUE } from '../functions.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Interaction from './Interaction.js';\nimport { clear } from '../obj.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport Collection from '../Collection.js';\n/**\r\n * @enum {string}\r\n */\n\nvar SelectEventType = {\n  /**\r\n   * Triggered when feature(s) has been (de)selected.\r\n   * @event SelectEvent#select\r\n   * @api\r\n   */\n  SELECT: 'select'\n};\n/**\r\n * A function that takes an {@link module:ol/Feature} or\r\n * {@link module:ol/render/Feature} and an\r\n * {@link module:ol/layer/Layer} and returns `true` if the feature may be\r\n * selected or `false` otherwise.\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default):boolean} FilterFunction\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [addCondition] A function\r\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled.\r\n * By default, this is {@link module:ol/events/condition~never}. Use this if you\r\n * want to use different events for add and remove instead of `toggle`.\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled. This is the event\r\n * for the selected features as a whole. By default, this is\r\n * {@link module:ol/events/condition~singleClick}. Clicking on a feature selects that\r\n * feature and removes any that were in the selection. Clicking outside any\r\n * feature removes all from the selection.\r\n * See `toggle`, `add`, `remove` options for adding/removing extra features to/\r\n * from the selection.\r\n * @property {Array<import(\"../layer/Layer.js\").default>|function(import(\"../layer/Layer.js\").default): boolean} [layers]\r\n * A list of layers from which features should be selected. Alternatively, a\r\n * filter function can be provided. The function will be called for each layer\r\n * in the map and should return `true` for layers that you want to be\r\n * selectable. If the option is absent, all visible layers will be considered\r\n * selectable.\r\n * @property {import(\"../style/Style.js\").StyleLike} [style]\r\n * Style for the selected features. By default the default edit style is used\r\n * (see {@link module:ol/style}).\r\n * If set to `false` the selected feature's style will not change.\r\n * @property {import(\"../events/condition.js\").Condition} [removeCondition] A function\r\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled.\r\n * By default, this is {@link module:ol/events/condition~never}. Use this if you\r\n * want to use different events for add and remove instead of `toggle`.\r\n * @property {import(\"../events/condition.js\").Condition} [toggleCondition] A function\r\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled. This is in addition\r\n * to the `condition` event. By default,\r\n * {@link module:ol/events/condition~shiftKeyOnly}, i.e. pressing `shift` as\r\n * well as the `condition` event, adds that feature to the current selection if\r\n * it is not currently selected, and removes it if it is. See `add` and `remove`\r\n * if you want to use different events instead of a toggle.\r\n * @property {boolean} [multi=false] A boolean that determines if the default\r\n * behaviour should select only single features or all (overlapping) features at\r\n * the clicked map position. The default of `false` means single select.\r\n * @property {import(\"../Collection.js\").default<import(\"../Feature.js\").default>} [features]\r\n * Collection where the interaction will place selected features. Optional. If\r\n * not set the interaction will create a collection. In any case the collection\r\n * used by the interaction is returned by\r\n * {@link module:ol/interaction/Select~Select#getFeatures}.\r\n * @property {FilterFunction} [filter] A function\r\n * that takes an {@link module:ol/Feature} and an\r\n * {@link module:ol/layer/Layer} and returns `true` if the feature may be\r\n * selected or `false` otherwise.\r\n * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside\r\n * the radius around the given position will be checked for features.\r\n */\n\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/interaction/Select~Select} instances are instances of\r\n * this type.\r\n */\n\nvar SelectEvent =\n/** @class */\nfunction (_super) {\n  __extends(SelectEvent, _super);\n  /**\r\n   * @param {SelectEventType} type The event type.\r\n   * @param {Array<import(\"../Feature.js\").default>} selected Selected features.\r\n   * @param {Array<import(\"../Feature.js\").default>} deselected Deselected features.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Associated\r\n   *     {@link module:ol/MapBrowserEvent}.\r\n   */\n\n\n  function SelectEvent(type, selected, deselected, mapBrowserEvent) {\n    var _this = _super.call(this, type) || this;\n    /**\r\n     * Selected features array.\r\n     * @type {Array<import(\"../Feature.js\").default>}\r\n     * @api\r\n     */\n\n\n    _this.selected = selected;\n    /**\r\n     * Deselected features array.\r\n     * @type {Array<import(\"../Feature.js\").default>}\r\n     * @api\r\n     */\n\n    _this.deselected = deselected;\n    /**\r\n     * Associated {@link module:ol/MapBrowserEvent}.\r\n     * @type {import(\"../MapBrowserEvent.js\").default}\r\n     * @api\r\n     */\n\n    _this.mapBrowserEvent = mapBrowserEvent;\n    return _this;\n  }\n\n  return SelectEvent;\n}(Event);\n/**\r\n * @classdesc\r\n * Interaction for selecting vector features. By default, selected features are\r\n * styled differently, so this interaction can be used for visual highlighting,\r\n * as well as selecting features for other actions, such as modification or\r\n * output. There are three ways of controlling which features are selected:\r\n * using the browser event as defined by the `condition` and optionally the\r\n * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a\r\n * further feature filter using the `filter` option.\r\n *\r\n * Selected features are added to an internal unmanaged layer.\r\n *\r\n * @fires SelectEvent\r\n * @api\r\n */\n\n\nvar Select =\n/** @class */\nfunction (_super) {\n  __extends(Select, _super);\n  /**\r\n   * @param {Options=} opt_options Options.\r\n   */\n\n\n  function Select(opt_options) {\n    var _this = _super.call(this, {\n      handleEvent: handleEvent\n    }) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\n\n    _this.condition_ = options.condition ? options.condition : singleClick;\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\n\n    _this.addCondition_ = options.addCondition ? options.addCondition : never;\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\n\n    _this.removeCondition_ = options.removeCondition ? options.removeCondition : never;\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\n\n    _this.toggleCondition_ = options.toggleCondition ? options.toggleCondition : shiftKeyOnly;\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n\n    _this.multi_ = options.multi ? options.multi : false;\n    /**\r\n     * @private\r\n     * @type {FilterFunction}\r\n     */\n\n    _this.filter_ = options.filter ? options.filter : TRUE;\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n\n    _this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;\n    /**\r\n     * @private\r\n     * @type {import(\"../style/Style.js\").default|Array.<import(\"../style/Style.js\").default>|import(\"../style/Style.js\").StyleFunction|null}\r\n     */\n\n    _this.style_ = options.style !== undefined ? options.style : getDefaultStyleFunction();\n    /**\r\n     * An association between selected feature (key)\r\n     * and original style (value)\r\n     * @private\r\n     * @type {Object.<number, import(\"../style/Style.js\").default|Array.<import(\"../style/Style.js\").default>|import(\"../style/Style.js\").StyleFunction>}\r\n     */\n\n    _this.featureStyleAssociation_ = {};\n    /**\r\n     * @private\r\n     * @type {import(\"../Collection.js\").default}\r\n     */\n\n    _this.features_ = options.features || new Collection();\n    /** @type {function(import(\"../layer/Layer.js\").default): boolean} */\n\n    var layerFilter;\n\n    if (options.layers) {\n      if (typeof options.layers === 'function') {\n        layerFilter = options.layers;\n      } else {\n        var layers_1 = options.layers;\n\n        layerFilter = function (layer) {\n          return includes(layers_1, layer);\n        };\n      }\n    } else {\n      layerFilter = TRUE;\n    }\n    /**\r\n     * @private\r\n     * @type {function(import(\"../layer/Layer.js\").default): boolean}\r\n     */\n\n\n    _this.layerFilter_ = layerFilter;\n    /**\r\n     * An association between selected feature (key)\r\n     * and layer (value)\r\n     * @private\r\n     * @type {Object<string, import(\"../layer/Layer.js\").default>}\r\n     */\n\n    _this.featureLayerAssociation_ = {};\n\n    var features = _this.getFeatures();\n\n    features.addEventListener(CollectionEventType.ADD, _this.addFeature_.bind(_this));\n    features.addEventListener(CollectionEventType.REMOVE, _this.removeFeature_.bind(_this));\n    return _this;\n  }\n  /**\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {import(\"../layer/Layer.js\").default} layer Layer.\r\n   * @private\r\n   */\n\n\n  Select.prototype.addFeatureLayerAssociation_ = function (feature, layer) {\n    this.featureLayerAssociation_[getUid(feature)] = layer;\n  };\n  /**\r\n   * Get the selected features.\r\n   * @return {import(\"../Collection.js\").default<import(\"../Feature.js\").default>} Features collection.\r\n   * @api\r\n   */\n\n\n  Select.prototype.getFeatures = function () {\n    return this.features_;\n  };\n  /**\r\n   * Returns the Hit-detection tolerance.\r\n   * @returns {number} Hit tolerance in pixels.\r\n   * @api\r\n   */\n\n\n  Select.prototype.getHitTolerance = function () {\n    return this.hitTolerance_;\n  };\n  /**\r\n   * Returns the associated {@link module:ol/layer/Vector~Vector vectorlayer} of\r\n   * the (last) selected feature. Note that this will not work with any\r\n   * programmatic method like pushing features to\r\n   * {@link module:ol/interaction/Select~Select#getFeatures collection}.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature\r\n   * @return {import('../layer/Vector.js').default} Layer.\r\n   * @api\r\n   */\n\n\n  Select.prototype.getLayer = function (feature) {\n    return (\n      /** @type {import('../layer/Vector.js').default} */\n      this.featureLayerAssociation_[getUid(feature)]\n    );\n  };\n  /**\r\n   * Hit-detection tolerance. Pixels inside the radius around the given position\r\n   * will be checked for features.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @api\r\n   */\n\n\n  Select.prototype.setHitTolerance = function (hitTolerance) {\n    this.hitTolerance_ = hitTolerance;\n  };\n  /**\r\n   * Remove the interaction from its current map, if any,  and attach it to a new\r\n   * map, if any. Pass `null` to just remove the interaction from the current map.\r\n   * @param {import(\"../PluggableMap.js\").default} map Map.\r\n   * @override\r\n   * @api\r\n   */\n\n\n  Select.prototype.setMap = function (map) {\n    var currentMap = this.getMap();\n\n    if (currentMap && this.style_) {\n      this.features_.forEach(this.removeSelectedStyle_.bind(this));\n    }\n\n    _super.prototype.setMap.call(this, map);\n\n    if (map && this.style_) {\n      this.features_.forEach(this.giveSelectedStyle_.bind(this));\n    }\n  };\n  /**\r\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\r\n   * @private\r\n   */\n\n\n  Select.prototype.addFeature_ = function (evt) {\n    var feature = evt.element;\n\n    if (this.style_) {\n      this.giveSelectedStyle_(feature);\n    }\n  };\n  /**\r\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\r\n   * @private\r\n   */\n\n\n  Select.prototype.removeFeature_ = function (evt) {\n    var feature = evt.element;\n\n    if (this.style_) {\n      this.removeSelectedStyle_(feature);\n    }\n  };\n  /**\r\n   * @param {import(\"../Feature.js\").default} feature Feature\r\n   * @private\r\n   */\n\n\n  Select.prototype.giveSelectedStyle_ = function (feature) {\n    var key = getUid(feature);\n    this.featureStyleAssociation_[key] = feature.getStyle();\n    feature.setStyle(this.style_);\n  };\n  /**\r\n   * @param {import(\"../Feature.js\").default} feature Feature\r\n   * @private\r\n   */\n\n\n  Select.prototype.removeSelectedStyle_ = function (feature) {\n    var key = getUid(feature);\n    feature.setStyle(this.featureStyleAssociation_[key]);\n    delete this.featureStyleAssociation_[key];\n  };\n  /**\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @private\r\n   */\n\n\n  Select.prototype.removeFeatureLayerAssociation_ = function (feature) {\n    delete this.featureLayerAssociation_[getUid(feature)];\n  };\n\n  return Select;\n}(Interaction);\n/**\r\n * Handles the {@link module:ol/MapBrowserEvent map browser event} and may change the\r\n * selected state of features.\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} `false` to stop event propagation.\r\n * @this {Select}\r\n */\n\n\nfunction handleEvent(mapBrowserEvent) {\n  if (!this.condition_(mapBrowserEvent)) {\n    return true;\n  }\n\n  var add = this.addCondition_(mapBrowserEvent);\n  var remove = this.removeCondition_(mapBrowserEvent);\n  var toggle = this.toggleCondition_(mapBrowserEvent);\n  var set = !add && !remove && !toggle;\n  var map = mapBrowserEvent.map;\n  var features = this.getFeatures();\n  var deselected = [];\n  var selected = [];\n\n  if (set) {\n    // Replace the currently selected feature(s) with the feature(s) at the\n    // pixel, or clear the selected feature(s) if there is no feature at\n    // the pixel.\n    clear(this.featureLayerAssociation_);\n    map.forEachFeatureAtPixel(mapBrowserEvent.pixel,\n    /**\r\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../layer/Layer.js\").default} layer Layer.\r\n     * @return {boolean|undefined} Continue to iterate over the features.\r\n     */\n    function (feature, layer) {\n      if (this.filter_(feature, layer)) {\n        selected.push(feature);\n        this.addFeatureLayerAssociation_(feature, layer);\n        return !this.multi_;\n      }\n    }.bind(this), {\n      layerFilter: this.layerFilter_,\n      hitTolerance: this.hitTolerance_\n    });\n\n    for (var i = features.getLength() - 1; i >= 0; --i) {\n      var feature = features.item(i);\n      var index = selected.indexOf(feature);\n\n      if (index > -1) {\n        // feature is already selected\n        selected.splice(index, 1);\n      } else {\n        features.remove(feature);\n        deselected.push(feature);\n      }\n    }\n\n    if (selected.length !== 0) {\n      features.extend(selected);\n    }\n  } else {\n    // Modify the currently selected feature(s).\n    map.forEachFeatureAtPixel(mapBrowserEvent.pixel,\n    /**\r\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../layer/Layer.js\").default} layer Layer.\r\n     * @return {boolean|undefined} Continue to iterate over the features.\r\n     */\n    function (feature, layer) {\n      if (this.filter_(feature, layer)) {\n        if ((add || toggle) && !includes(features.getArray(), feature)) {\n          selected.push(feature);\n          this.addFeatureLayerAssociation_(feature, layer);\n        } else if ((remove || toggle) && includes(features.getArray(), feature)) {\n          deselected.push(feature);\n          this.removeFeatureLayerAssociation_(feature);\n        }\n\n        return !this.multi_;\n      }\n    }.bind(this), {\n      layerFilter: this.layerFilter_,\n      hitTolerance: this.hitTolerance_\n    });\n\n    for (var j = deselected.length - 1; j >= 0; --j) {\n      features.remove(deselected[j]);\n    }\n\n    features.extend(selected);\n  }\n\n  if (selected.length > 0 || deselected.length > 0) {\n    this.dispatchEvent(new SelectEvent(SelectEventType.SELECT, selected, deselected, mapBrowserEvent));\n  }\n\n  return true;\n}\n/**\r\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\r\n */\n\n\nfunction getDefaultStyleFunction() {\n  var styles = createEditingStyle();\n  extend(styles[GeometryType.POLYGON], styles[GeometryType.LINE_STRING]);\n  extend(styles[GeometryType.GEOMETRY_COLLECTION], styles[GeometryType.LINE_STRING]);\n  return function (feature) {\n    if (!feature.getGeometry()) {\n      return null;\n    }\n\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\nexport default Select;","map":null,"metadata":{},"sourceType":"module"}