{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * @module ol/interaction/Modify\r\n */\n\n\nimport { getUid } from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { equals } from '../array.js';\nimport { equals as coordinatesEqual, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, closestOnSegment } from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { always, primaryAction, altKeyOnly, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent } from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { fromUserExtent, toUserExtent, fromUserCoordinate, toUserCoordinate } from '../proj.js';\n/**\r\n * The segment index assigned to a circle's center when\r\n * breaking up a circle into ModifySegmentDataType segments.\r\n * @type {number}\r\n */\n\nvar CIRCLE_CENTER_INDEX = 0;\n/**\r\n * The segment index assigned to a circle's circumference when\r\n * breaking up a circle into ModifySegmentDataType segments.\r\n * @type {number}\r\n */\n\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n/**\r\n * @enum {string}\r\n */\n\nvar ModifyEventType = {\n  /**\r\n   * Triggered upon feature modification start\r\n   * @event ModifyEvent#modifystart\r\n   * @api\r\n   */\n  MODIFYSTART: 'modifystart',\n\n  /**\r\n   * Triggered upon feature modification end\r\n   * @event ModifyEvent#modifyend\r\n   * @api\r\n   */\n  MODIFYEND: 'modifyend'\n};\n/**\r\n * @typedef {Object} SegmentData\r\n * @property {Array<number>} [depth]\r\n * @property {Feature} feature\r\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry\r\n * @property {number} [index]\r\n * @property {Array<import(\"../extent.js\").Extent>} segment\r\n * @property {Array<SegmentData>} [featureSegments]\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event will be considered to add or move a\r\n * vertex to the sketch. Default is\r\n * {@link module:ol/events/condition~primaryAction}.\r\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\r\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled. By default,\r\n * {@link module:ol/events/condition~singleClick} with\r\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\r\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\r\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\r\n * returns a boolean to indicate whether a new vertex should be added to the sketch\r\n * features. Default is {@link module:ol/events/condition~always}.\r\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\r\n * pointer close enough to a segment or vertex for editing.\r\n * @property {import(\"../style/Style.js\").StyleLike} [style]\r\n * Style used for the features being modified. By default the default edit\r\n * style is used (see {@link module:ol/style}).\r\n * @property {VectorSource} [source] The vector source with\r\n * features to modify.  If a vector source is not provided, a feature collection\r\n * must be provided with the features option.\r\n * @property {Collection<Feature>} [features]\r\n * The features the interaction works on.  If a feature collection is not\r\n * provided, a vector source must be provided with the source option.\r\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\r\n * overlay.\r\n */\n\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\r\n * instances of this type.\r\n */\n\nvar ModifyEvent =\n/** @class */\nfunction (_super) {\n  __extends(ModifyEvent, _super);\n  /**\r\n   * @param {ModifyEventType} type Type.\r\n   * @param {Collection<Feature>} features\r\n   * The features modified.\r\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserPointerEvent\r\n   * Associated {@link module:ol/MapBrowserPointerEvent}.\r\n   */\n\n\n  function ModifyEvent(type, features, mapBrowserPointerEvent) {\n    var _this = _super.call(this, type) || this;\n    /**\r\n     * The features being modified.\r\n     * @type {Collection<Feature>}\r\n     * @api\r\n     */\n\n\n    _this.features = features;\n    /**\r\n     * Associated {@link module:ol/MapBrowserEvent}.\r\n     * @type {import(\"../MapBrowserEvent.js\").default}\r\n     * @api\r\n     */\n\n    _this.mapBrowserEvent = mapBrowserPointerEvent;\n    return _this;\n  }\n\n  return ModifyEvent;\n}(Event);\n\nexport { ModifyEvent };\n/**\r\n * @classdesc\r\n * Interaction for modifying feature geometries.  To modify features that have\r\n * been added to an existing source, construct the modify interaction with the\r\n * `source` option.  If you want to modify features in a collection (for example,\r\n * the collection used by a select interaction), construct the interaction with\r\n * the `features` option.  The interaction must be constructed with either a\r\n * `source` or `features` option.\r\n *\r\n * By default, the interaction will allow deletion of vertices when the `alt`\r\n * key is pressed.  To configure the interaction with a different condition\r\n * for deletion, use the `deleteCondition` option.\r\n * @fires ModifyEvent\r\n * @api\r\n */\n\nvar Modify =\n/** @class */\nfunction (_super) {\n  __extends(Modify, _super);\n  /**\r\n   * @param {Options} options Options.\r\n   */\n\n\n  function Modify(options) {\n    var _this = _super.call(this,\n    /** @type {import(\"./Pointer.js\").Options} */\n    options) || this;\n    /** @private */\n\n\n    _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\n\n    _this.condition_ = options.condition ? options.condition : primaryAction;\n    /**\r\n     * @private\r\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\r\n     * @return {boolean} Combined condition result.\r\n     */\n\n    _this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n    /**\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     * @private\r\n     */\n\n\n    _this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : _this.defaultDeleteCondition_;\n    /**\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     * @private\r\n     */\n\n    _this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n    /**\r\n     * Editing vertex.\r\n     * @type {Feature}\r\n     * @private\r\n     */\n\n    _this.vertexFeature_ = null;\n    /**\r\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\r\n     * @type {Object<string, boolean>}\r\n     * @private\r\n     */\n\n    _this.vertexSegments_ = null;\n    /**\r\n     * @type {import(\"../pixel.js\").Pixel}\r\n     * @private\r\n     */\n\n    _this.lastPixel_ = [0, 0];\n    /**\r\n     * Tracks if the next `singleclick` event should be ignored to prevent\r\n     * accidental deletion right after vertex creation.\r\n     * @type {boolean}\r\n     * @private\r\n     */\n\n    _this.ignoreNextSingleClick_ = false;\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\n\n    _this.modified_ = false;\n    /**\r\n     * Segment RTree for each layer\r\n     * @type {RBush<SegmentData>}\r\n     * @private\r\n     */\n\n    _this.rBush_ = new RBush();\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\n\n    _this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\n\n    _this.snappedToVertex_ = false;\n    /**\r\n     * Indicate whether the interaction is currently changing a feature's\r\n     * coordinates.\r\n     * @type {boolean}\r\n     * @private\r\n     */\n\n    _this.changingFeature_ = false;\n    /**\r\n     * @type {Array}\r\n     * @private\r\n     */\n\n    _this.dragSegments_ = [];\n    /**\r\n     * Draw overlay where sketch features are drawn.\r\n     * @type {VectorLayer}\r\n     * @private\r\n     */\n\n    _this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\r\n     * @const\r\n     * @private\r\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\r\n     */\n\n    _this.SEGMENT_WRITERS_ = {\n      'Point': _this.writePointGeometry_.bind(_this),\n      'LineString': _this.writeLineStringGeometry_.bind(_this),\n      'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n      'Polygon': _this.writePolygonGeometry_.bind(_this),\n      'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n      'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n      'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n      'Circle': _this.writeCircleGeometry_.bind(_this),\n      'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this)\n    };\n    /**\r\n     * @type {VectorSource}\r\n     * @private\r\n     */\n\n    _this.source_ = null;\n    var features;\n\n    if (options.source) {\n      _this.source_ = options.source;\n      features = new Collection(_this.source_.getFeatures());\n\n      _this.source_.addEventListener(VectorEventType.ADDFEATURE, _this.handleSourceAdd_.bind(_this));\n\n      _this.source_.addEventListener(VectorEventType.REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));\n    } else {\n      features = options.features;\n    }\n\n    if (!features) {\n      throw new Error('The modify interaction requires features or a source');\n    }\n    /**\r\n     * @type {Collection<Feature>}\r\n     * @private\r\n     */\n\n\n    _this.features_ = features;\n\n    _this.features_.forEach(_this.addFeature_.bind(_this));\n\n    _this.features_.addEventListener(CollectionEventType.ADD, _this.handleFeatureAdd_.bind(_this));\n\n    _this.features_.addEventListener(CollectionEventType.REMOVE, _this.handleFeatureRemove_.bind(_this));\n    /**\r\n     * @type {import(\"../MapBrowserPointerEvent.js\").default}\r\n     * @private\r\n     */\n\n\n    _this.lastPointerEvent_ = null;\n    return _this;\n  }\n  /**\r\n   * @param {Feature} feature Feature.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.addFeature_ = function (feature) {\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n\n    var map = this.getMap();\n\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\r\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} evt Map browser event\r\n   * @private\r\n   */\n\n\n  Modify.prototype.willModifyFeatures_ = function (evt) {\n    if (!this.modified_) {\n      this.modified_ = true;\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.features_, evt));\n    }\n  };\n  /**\r\n   * @param {Feature} feature Feature.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.removeFeature_ = function (feature) {\n    this.removeFeatureSegmentData_(feature); // Remove the vertex feature if the collection of canditate features is empty.\n\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\r\n   * @param {Feature} feature Feature.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.removeFeatureSegmentData_ = function (feature) {\n    var rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n\n    var nodesToRemove = [];\n    rBush.forEach(\n    /**\r\n     * @param {SegmentData} node RTree node.\r\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n\n    for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n      var nodeToRemove = nodesToRemove[i];\n\n      for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n\n      rBush.remove(nodeToRemove);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Modify.prototype.setActive = function (active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    _super.prototype.setActive.call(this, active);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Modify.prototype.setMap = function (map) {\n    this.overlay_.setMap(map);\n\n    _super.prototype.setMap.call(this, map);\n  };\n  /**\r\n   * Get the overlay layer that this interaction renders sketch features to.\r\n   * @return {VectorLayer} Overlay layer.\r\n   * @api\r\n   */\n\n\n  Modify.prototype.getOverlay = function () {\n    return this.overlay_;\n  };\n  /**\r\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.handleSourceAdd_ = function (event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  };\n  /**\r\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.handleSourceRemove_ = function (event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  };\n  /**\r\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.handleFeatureAdd_ = function (evt) {\n    this.addFeature_(\n    /** @type {Feature} */\n    evt.element);\n  };\n  /**\r\n   * @param {import(\"../events/Event.js\").default} evt Event.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.handleFeatureChange_ = function (evt) {\n    if (!this.changingFeature_) {\n      var feature =\n      /** @type {Feature} */\n      evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  };\n  /**\r\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.handleFeatureRemove_ = function (evt) {\n    var feature =\n    /** @type {Feature} */\n    evt.element;\n    this.removeFeature_(feature);\n  };\n  /**\r\n   * @param {Feature} feature Feature\r\n   * @param {Point} geometry Geometry.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.writePointGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    /** @type {SegmentData} */\n\n    var segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n  /**\r\n   * @param {Feature} feature Feature\r\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n    var points = geometry.getCoordinates();\n\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      /** @type {SegmentData} */\n\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n  /**\r\n   * @param {Feature} feature Feature\r\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      /** @type {SegmentData} */\n\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n  /**\r\n   * @param {Feature} feature Feature\r\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n    var lines = geometry.getCoordinates();\n\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\r\n   * @param {Feature} feature Feature\r\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n    var rings = geometry.getCoordinates();\n\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\r\n   * @param {Feature} feature Feature\r\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n    var polygons = geometry.getCoordinates();\n\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          /** @type {SegmentData} */\n\n          var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  };\n  /**\r\n   * We convert a circle into two segments.  The segment at index\r\n   * {@link CIRCLE_CENTER_INDEX} is the\r\n   * circle's center (a point).  The segment at index\r\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\r\n   * the circumference, and is not a line segment.\r\n   *\r\n   * @param {Feature} feature Feature.\r\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCenter();\n    /** @type {SegmentData} */\n\n    var centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    /** @type {SegmentData} */\n\n    var circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);\n  };\n  /**\r\n   * @param {Feature} feature Feature\r\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n    var geometries = geometry.getGeometriesArray();\n\n    for (var i = 0; i < geometries.length; ++i) {\n      var geometry_1 = geometries[i];\n      var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];\n      writer(feature, geometry_1);\n    }\n  };\n  /**\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\r\n   * @return {Feature} Vertex feature.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.createOrUpdateVertexFeature_ = function (coordinates) {\n    var vertexFeature = this.vertexFeature_;\n\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n\n    return vertexFeature;\n  };\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\r\n   * @override\r\n   */\n\n\n  Modify.prototype.handleEvent = function (mapBrowserEvent) {\n    if (!\n    /** @type {import(\"../MapBrowserPointerEvent.js\").default} */\n    mapBrowserEvent.pointerEvent) {\n      return true;\n    }\n\n    this.lastPointerEvent_ = mapBrowserEvent;\n    var handled;\n\n    if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Modify.prototype.handleDragEvent = function (evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt);\n    var vertex = evt.coordinate;\n\n    for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      var dragSegment = this.dragSegments_[i];\n      var segmentData = dragSegment[0];\n      var depth = segmentData.depth;\n      var geometry = segmentData.geometry;\n      var coordinates = void 0;\n      var segment = segmentData.segment;\n      var index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case GeometryType.POINT:\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n\n        case GeometryType.MULTI_POINT:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n\n        case GeometryType.LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.MULTI_LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.MULTI_POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.CIRCLE:\n          segment[0] = vertex;\n          segment[1] = vertex;\n\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            geometry.setRadius(coordinateDistance(geometry.getCenter(), vertex));\n            this.changingFeature_ = false;\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n\n    this.createOrUpdateVertexFeature_(vertex);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Modify.prototype.handleDownEvent = function (evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n    var pixelCoordinate = evt.coordinate;\n    this.dragSegments_.length = 0;\n    this.modified_ = false;\n    var vertexFeature = this.vertexFeature_;\n\n    if (vertexFeature) {\n      var projection = evt.map.getView().getProjection();\n      var insertVertices = [];\n      var vertex = vertexFeature.getGeometry().getCoordinates();\n      var vertexExtent = boundingExtent([vertex]);\n      var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      var componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n\n      for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        var segmentDataMatch = segmentDataMatches[i];\n        var segment = segmentDataMatch.segment;\n        var uid = getUid(segmentDataMatch.feature);\n        var depth = segmentDataMatch.depth;\n\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n\n        if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n\n          continue;\n        }\n\n        if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n\n        if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n          // prevent dragging closed linestrings by the connecting node\n          if ((segmentDataMatch.geometry.getType() === GeometryType.LINE_STRING || segmentDataMatch.geometry.getType() === GeometryType.MULTI_LINE_STRING) && componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n            continue;\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n\n        if (getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1] && this.insertVertexCondition_(evt)) {\n          insertVertices.push([segmentDataMatch, vertex]);\n        }\n      }\n\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt);\n      }\n\n      for (var j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_.apply(this, insertVertices[j]);\n      }\n    }\n\n    return !!this.vertexFeature_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Modify.prototype.handleUpEvent = function (evt) {\n    for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n      var segmentData = this.dragSegments_[i][0];\n      var geometry = segmentData.geometry;\n\n      if (geometry.getType() === GeometryType.CIRCLE) {\n        // Update a circle object in the R* bush:\n        var coordinates = geometry.getCenter();\n        var centerSegmentData = segmentData.featureSegments[0];\n        var circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n\n    if (this.modified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n    }\n\n    return false;\n  };\n  /**\r\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.handlePointerMove_ = function (evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n  };\n  /**\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\r\n   * @param {import(\"../PluggableMap.js\").default} map Map.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.handlePointerAtPixel_ = function (pixel, map) {\n    var pixelCoordinate = map.getCoordinateFromPixel(pixel);\n    var projection = map.getView().getProjection();\n\n    var sortByDistance = function (a, b) {\n      return projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) - projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection);\n    };\n\n    var viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n    var buffer = map.getView().getResolution() * this.pixelTolerance_;\n    var box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n    var rBush = this.rBush_;\n    var nodes = rBush.getInExtent(box);\n\n    if (nodes.length > 0) {\n      nodes.sort(sortByDistance);\n      var node = nodes[0];\n      var closestSegment = node.segment;\n      var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n      var dist = coordinateDistance(pixel, vertexPixel);\n\n      if (dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        var vertexSegments = {};\n\n        if (node.geometry.getType() === GeometryType.CIRCLE && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex);\n        } else {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n\n          this.createOrUpdateVertexFeature_(vertex);\n\n          for (var i = 1, ii = nodes.length; i < ii; ++i) {\n            var segment = nodes[i].segment;\n\n            if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n              vertexSegments[getUid(segment)] = true;\n            } else {\n              break;\n            }\n          }\n        }\n\n        vertexSegments[getUid(closestSegment)] = true;\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  };\n  /**\r\n   * @param {SegmentData} segmentData Segment data.\r\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.insertVertex_ = function (segmentData, vertex) {\n    var segment = segmentData.segment;\n    var feature = segmentData.feature;\n    var geometry = segmentData.geometry;\n    var depth = segmentData.depth;\n    var index = segmentData.index;\n    var coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    var rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    /** @type {SegmentData} */\n\n    var newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n    /** @type {SegmentData} */\n\n    var newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  };\n  /**\r\n   * Removes the vertex currently being pointed.\r\n   * @return {boolean} True when a vertex was removed.\r\n   * @api\r\n   */\n\n\n  Modify.prototype.removePoint = function () {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      var evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt);\n      var removed = this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n      return removed;\n    }\n\n    return false;\n  };\n  /**\r\n   * Removes a vertex from all matching features.\r\n   * @return {boolean} True when a vertex was removed.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.removeVertex_ = function () {\n    var dragSegments = this.dragSegments_;\n    var segmentsByFeature = {};\n    var deleted = false;\n    var component, coordinates, dragSegment, geometry, i, index, left;\n    var newIndex, right, segmentData, uid;\n\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n\n        /* falls through */\n\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n\n            component.splice(index, 1);\n            deleted = true;\n\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var segments = [];\n\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          var newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        }\n\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n\n        dragSegments.length = 0;\n      }\n    }\n\n    return deleted;\n  };\n  /**\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {Array} coordinates Coordinates.\r\n   * @private\r\n   */\n\n\n  Modify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  };\n  /**\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {number} index Index.\r\n   * @param {Array<number>|undefined} depth Depth.\r\n   * @param {number} delta Delta (1 or -1).\r\n   * @private\r\n   */\n\n\n  Modify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  };\n\n  return Modify;\n}(PointerInteraction);\n/**\r\n * @param {SegmentData} a The first segment data.\r\n * @param {SegmentData} b The second segment data.\r\n * @return {number} The difference in indexes.\r\n */\n\n\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n/**\r\n * Returns the distance from a point to a line segment.\r\n *\r\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\r\n *        which to calculate the distance.\r\n * @param {SegmentData} segmentData The object describing the line\r\n *        segment we are calculating the distance to.\r\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\r\n * @return {number} The square of the distance between a point and a line segment.\r\n */\n\n\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    var circleGeometry =\n    /** @type {import(\"../geom/Circle.js\").default} */\n    geometry;\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), pointCoordinates);\n      var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n/**\r\n * Returns the point closest to a given line segment.\r\n *\r\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\r\n *        should be found.\r\n * @param {SegmentData} segmentData The object describing the line\r\n *        segment which should contain the closest point.\r\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\r\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\r\n */\n\n\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    return geometry.getClosestPoint(pointCoordinates);\n  }\n\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n/**\r\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\r\n */\n\n\nfunction getDefaultStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\nexport default Modify;","map":null,"metadata":{},"sourceType":"module"}