{"ast":null,"code":"const sortFeatures = require('./sort_features');\n\nconst mapEventToBoundingBox = require('./map_event_to_bounding_box');\n\nconst Constants = require('../constants');\n\nconst StringSet = require('./string_set');\n\nconst META_TYPES = [Constants.meta.FEATURE, Constants.meta.MIDPOINT, Constants.meta.VERTEX]; // Requires either event or bbox\n\nmodule.exports = {\n  click: featuresAtClick,\n  touch: featuresAtTouch\n};\n\nfunction featuresAtClick(event, bbox, ctx) {\n  return featuresAt(event, bbox, ctx, ctx.options.clickBuffer);\n}\n\nfunction featuresAtTouch(event, bbox, ctx) {\n  return featuresAt(event, bbox, ctx, ctx.options.touchBuffer);\n}\n\nfunction featuresAt(event, bbox, ctx, buffer) {\n  if (ctx.map === null) return [];\n  const box = event ? mapEventToBoundingBox(event, buffer) : bbox;\n  const queryParams = {};\n  if (ctx.options.styles) queryParams.layers = ctx.options.styles.map(s => s.id);\n  const features = ctx.map.queryRenderedFeatures(box, queryParams).filter(feature => {\n    return META_TYPES.indexOf(feature.properties.meta) !== -1;\n  });\n  const featureIds = new StringSet();\n  const uniqueFeatures = [];\n  features.forEach(feature => {\n    const featureId = feature.properties.id;\n    if (featureIds.has(featureId)) return;\n    featureIds.add(featureId);\n    uniqueFeatures.push(feature);\n  });\n  return sortFeatures(uniqueFeatures);\n}","map":null,"metadata":{},"sourceType":"script"}