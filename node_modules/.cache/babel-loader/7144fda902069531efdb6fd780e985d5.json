{"ast":null,"code":"import centroid from '@turf/centroid';\nimport rhumbBearing from '@turf/rhumb-bearing';\nimport rhumbDistance from '@turf/rhumb-distance';\nimport rhumbDestination from '@turf/rhumb-destination';\nimport clone from '@turf/clone';\nimport { coordEach } from '@turf/meta';\nimport { getCoords } from '@turf/invariant';\nimport { isObject } from '@turf/helpers';\n/**\n * Rotates any geojson Feature or Geometry of a specified angle, around its `centroid` or a given `pivot` point;\n * all rotations follow the right-hand rule: https://en.wikipedia.org/wiki/Right-hand_rule\n *\n * @name transformRotate\n * @param {GeoJSON} geojson object to be rotated\n * @param {number} angle of rotation (along the vertical axis), from North in decimal degrees, negative clockwise\n * @param {Object} [options={}] Optional parameters\n * @param {Coord} [options.pivot='centroid'] point around which the rotation will be performed\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} the rotated GeoJSON feature\n * @example\n * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * var options = {pivot: [0, 25]};\n * var rotatedPoly = turf.transformRotate(poly, 10, options);\n *\n * //addToMap\n * var addToMap = [poly, rotatedPoly];\n * rotatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\n\nfunction transformRotate(geojson, angle, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error('options is invalid');\n  var pivot = options.pivot;\n  var mutate = options.mutate; // Input validation\n\n  if (!geojson) throw new Error('geojson is required');\n  if (angle === undefined || angle === null || isNaN(angle)) throw new Error('angle is required'); // Shortcut no-rotation\n\n  if (angle === 0) return geojson; // Use centroid of GeoJSON if pivot is not provided\n\n  if (!pivot) pivot = centroid(geojson); // Clone geojson to avoid side effects\n\n  if (mutate === false || mutate === undefined) geojson = clone(geojson); // Rotate each coordinate\n\n  coordEach(geojson, function (pointCoords) {\n    var initialAngle = rhumbBearing(pivot, pointCoords);\n    var finalAngle = initialAngle + angle;\n    var distance = rhumbDistance(pivot, pointCoords);\n    var newCoords = getCoords(rhumbDestination(pivot, distance, finalAngle));\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n  });\n  return geojson;\n}\n\nexport default transformRotate;","map":null,"metadata":{},"sourceType":"module"}