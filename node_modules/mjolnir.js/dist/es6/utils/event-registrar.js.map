{"version":3,"sources":["../../../src/utils/event-registrar.js"],"names":["whichButtons","getOffsetPosition","DEFAULT_OPTIONS","srcElement","priority","EventRegistrar","constructor","eventManager","handlers","handlersByElement","Map","handleEvent","bind","isEmpty","length","add","type","handler","opts","once","addEventListener","Object","assign","entries","get","set","entry","push","insertPosition","splice","remove","i","indexOf","delete","event","mjolnirEvent","_normalizeEvent","target","srcEvent","rootElement","_emit","handled","parentNode","immediatePropagationStopped","stopPropagation","stopImmediatePropagation","entriesToRemove","element"],"mappings":"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","sourcesContent":["import {whichButtons, getOffsetPosition} from './event-utils';\n\nconst DEFAULT_OPTIONS = {\n  srcElement: 'root',\n  priority: 0\n};\n\nexport default class EventRegistrar {\n  constructor(eventManager) {\n    this.eventManager = eventManager;\n    this.handlers = [];\n    // Element -> handler map\n    this.handlersByElement = new Map();\n\n    this.handleEvent = this.handleEvent.bind(this);\n  }\n\n  isEmpty() {\n    return this.handlers.length === 0;\n  }\n\n  add(type, handler, opts, once = false) {\n    const {handlers, handlersByElement} = this;\n\n    if (opts && (typeof opts !== 'object' || opts.addEventListener)) {\n      // is DOM element, backward compatibility\n      opts = {srcElement: opts};\n    }\n    opts = opts ? Object.assign({}, DEFAULT_OPTIONS, opts) : DEFAULT_OPTIONS;\n\n    let entries = handlersByElement.get(opts.srcElement);\n    if (!entries) {\n      entries = [];\n      handlersByElement.set(opts.srcElement, entries);\n    }\n    const entry = {type, handler, srcElement: opts.srcElement, priority: opts.priority, once};\n    handlers.push(entry);\n\n    // Sort handlers by descending priority\n    // Handlers with the same priority are excuted in the order of registration\n    let insertPosition = entries.length - 1;\n    while (insertPosition >= 0) {\n      if (entries[insertPosition].priority >= entry.priority) {\n        break;\n      }\n      insertPosition--;\n    }\n    entries.splice(insertPosition + 1, 0, entry);\n  }\n\n  remove(type, handler) {\n    const {handlers, handlersByElement} = this;\n\n    for (let i = handlers.length - 1; i >= 0; i--) {\n      const entry = handlers[i];\n\n      if (entry.type === type && entry.handler === handler) {\n        handlers.splice(i, 1);\n        const entries = handlersByElement.get(entry.srcElement);\n        entries.splice(entries.indexOf(entry), 1);\n        if (entries.length === 0) {\n          handlersByElement.delete(entry.srcElement);\n        }\n      }\n    }\n  }\n\n  /**\n   * Handles hammerjs event\n   */\n  handleEvent(event) {\n    if (this.isEmpty()) {\n      return;\n    }\n\n    const mjolnirEvent = this._normalizeEvent(event);\n    let target = event.srcEvent.target;\n\n    while (target && target !== mjolnirEvent.rootElement) {\n      this._emit(mjolnirEvent, target);\n      if (mjolnirEvent.handled) {\n        return;\n      }\n      target = target.parentNode;\n    }\n    this._emit(mjolnirEvent, 'root');\n  }\n\n  /**\n   * Invoke handlers on a particular element\n   */\n  _emit(event, srcElement) {\n    const entries = this.handlersByElement.get(srcElement);\n\n    if (entries) {\n      let immediatePropagationStopped = false;\n\n      // Prevents the current event from bubbling up\n      const stopPropagation = () => {\n        event.handled = true;\n      };\n      // Prevent any remaining listeners from being called\n      const stopImmediatePropagation = () => {\n        event.handled = true;\n        immediatePropagationStopped = true;\n      };\n      const entriesToRemove = [];\n\n      for (let i = 0; i < entries.length; i++) {\n        const {type, handler, once} = entries[i];\n        handler(\n          Object.assign({}, event, {\n            type,\n            stopPropagation,\n            stopImmediatePropagation\n          })\n        );\n        if (once) {\n          entriesToRemove.push(entries[i]);\n        }\n        if (immediatePropagationStopped) {\n          break;\n        }\n      }\n\n      for (let i = 0; i < entriesToRemove.length; i++) {\n        const {type, handler} = entriesToRemove[i];\n        this.remove(type, handler);\n      }\n    }\n  }\n\n  /**\n   * Normalizes hammerjs and custom events to have predictable fields.\n   */\n  _normalizeEvent(event) {\n    const rootElement = this.eventManager.element;\n\n    return Object.assign({}, event, whichButtons(event), getOffsetPosition(event, rootElement), {\n      handled: false,\n      rootElement\n    });\n  }\n}\n"],"file":"event-registrar.js"}