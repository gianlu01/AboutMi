{"version":3,"sources":["../../../src/utils/event-registrar.js"],"names":["DEFAULT_OPTIONS","srcElement","priority","EventRegistrar","eventManager","handlers","handlersByElement","Map","handleEvent","bind","length","type","handler","opts","once","addEventListener","Object","assign","entries","get","set","entry","push","insertPosition","splice","i","indexOf","event","isEmpty","mjolnirEvent","_normalizeEvent","target","srcEvent","rootElement","_emit","handled","parentNode","immediatePropagationStopped","stopPropagation","stopImmediatePropagation","entriesToRemove","remove","element"],"mappings":"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","sourcesContent":["import {whichButtons, getOffsetPosition} from './event-utils';\n\nconst DEFAULT_OPTIONS = {\n  srcElement: 'root',\n  priority: 0\n};\n\nexport default class EventRegistrar {\n  constructor(eventManager) {\n    this.eventManager = eventManager;\n    this.handlers = [];\n    // Element -> handler map\n    this.handlersByElement = new Map();\n\n    this.handleEvent = this.handleEvent.bind(this);\n  }\n\n  isEmpty() {\n    return this.handlers.length === 0;\n  }\n\n  add(type, handler, opts, once = false) {\n    const {handlers, handlersByElement} = this;\n\n    if (opts && (typeof opts !== 'object' || opts.addEventListener)) {\n      // is DOM element, backward compatibility\n      opts = {srcElement: opts};\n    }\n    opts = opts ? Object.assign({}, DEFAULT_OPTIONS, opts) : DEFAULT_OPTIONS;\n\n    let entries = handlersByElement.get(opts.srcElement);\n    if (!entries) {\n      entries = [];\n      handlersByElement.set(opts.srcElement, entries);\n    }\n    const entry = {type, handler, srcElement: opts.srcElement, priority: opts.priority, once};\n    handlers.push(entry);\n\n    // Sort handlers by descending priority\n    // Handlers with the same priority are excuted in the order of registration\n    let insertPosition = entries.length - 1;\n    while (insertPosition >= 0) {\n      if (entries[insertPosition].priority >= entry.priority) {\n        break;\n      }\n      insertPosition--;\n    }\n    entries.splice(insertPosition + 1, 0, entry);\n  }\n\n  remove(type, handler) {\n    const {handlers, handlersByElement} = this;\n\n    for (let i = handlers.length - 1; i >= 0; i--) {\n      const entry = handlers[i];\n\n      if (entry.type === type && entry.handler === handler) {\n        handlers.splice(i, 1);\n        const entries = handlersByElement.get(entry.srcElement);\n        entries.splice(entries.indexOf(entry), 1);\n        if (entries.length === 0) {\n          handlersByElement.delete(entry.srcElement);\n        }\n      }\n    }\n  }\n\n  /**\n   * Handles hammerjs event\n   */\n  handleEvent(event) {\n    if (this.isEmpty()) {\n      return;\n    }\n\n    const mjolnirEvent = this._normalizeEvent(event);\n    let target = event.srcEvent.target;\n\n    while (target && target !== mjolnirEvent.rootElement) {\n      this._emit(mjolnirEvent, target);\n      if (mjolnirEvent.handled) {\n        return;\n      }\n      target = target.parentNode;\n    }\n    this._emit(mjolnirEvent, 'root');\n  }\n\n  /**\n   * Invoke handlers on a particular element\n   */\n  _emit(event, srcElement) {\n    const entries = this.handlersByElement.get(srcElement);\n\n    if (entries) {\n      let immediatePropagationStopped = false;\n\n      // Prevents the current event from bubbling up\n      const stopPropagation = () => {\n        event.handled = true;\n      };\n      // Prevent any remaining listeners from being called\n      const stopImmediatePropagation = () => {\n        event.handled = true;\n        immediatePropagationStopped = true;\n      };\n      const entriesToRemove = [];\n\n      for (let i = 0; i < entries.length; i++) {\n        const {type, handler, once} = entries[i];\n        handler(\n          Object.assign({}, event, {\n            type,\n            stopPropagation,\n            stopImmediatePropagation\n          })\n        );\n        if (once) {\n          entriesToRemove.push(entries[i]);\n        }\n        if (immediatePropagationStopped) {\n          break;\n        }\n      }\n\n      for (let i = 0; i < entriesToRemove.length; i++) {\n        const {type, handler} = entriesToRemove[i];\n        this.remove(type, handler);\n      }\n    }\n  }\n\n  /**\n   * Normalizes hammerjs and custom events to have predictable fields.\n   */\n  _normalizeEvent(event) {\n    const rootElement = this.eventManager.element;\n\n    return Object.assign({}, event, whichButtons(event), getOffsetPosition(event, rootElement), {\n      handled: false,\n      rootElement\n    });\n  }\n}\n"],"file":"event-registrar.js"}